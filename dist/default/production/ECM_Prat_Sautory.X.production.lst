

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Mon Dec 11 13:54:32 2017

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    45                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    46                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    47                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    48  0000                     
    49                           	psect	smallconst
    50  000300                     __psmallconst:
    51                           	opt stack 0
    52  000300  00                 	db	0
    53  000301                     _dpowers:
    54                           	opt stack 0
    55  000301  0001               	dw	1
    56  000303  000A               	dw	10
    57  000305  0064               	dw	100
    58  000307  03E8               	dw	1000
    59  000309  2710               	dw	10000
    60  00030B                     __end_of_dpowers:
    61                           	opt stack 0
    62  0000                     _ANSEL0	set	4024
    63  0000                     _ANSEL1	set	4025
    64  0000                     _BAUDCONbits	set	4010
    65  0000                     _CAP1BUFH	set	3945
    66  0000                     _CAP1BUFL	set	3944
    67  0000                     _CAP1CONbits	set	3939
    68  0000                     _CAP2BUFH	set	3943
    69  0000                     _CAP2BUFL	set	3942
    70  0000                     _CAP2CONbits	set	3938
    71  0000                     _INTCON3bits	set	4080
    72  0000                     _INTCONbits	set	4082
    73  0000                     _LATA	set	3977
    74  0000                     _LATAbits	set	3977
    75  0000                     _LATB	set	3978
    76  0000                     _LATC	set	3979
    77  0000                     _LATCbits	set	3979
    78  0000                     _LATD	set	3980
    79  0000                     _OSCCON	set	4051
    80  0000                     _OSCCONbits	set	4051
    81  0000                     _PIE1bits	set	3997
    82  0000                     _PIR1bits	set	3998
    83  0000                     _PORTCbits	set	3970
    84  0000                     _PTCON0	set	3967
    85  0000                     _PTCON1	set	3966
    86  0000                     _PTPERH	set	3962
    87  0000                     _PTPERL	set	3963
    88  0000                     _PWMCON0	set	3951
    89  0000                     _PWMCON1	set	3950
    90  0000                     _RCREG	set	4014
    91  0000                     _RCSTAbits	set	4011
    92  0000                     _SPBRG	set	4015
    93  0000                     _SPBRGH	set	4016
    94  0000                     _T0CONbits	set	4053
    95  0000                     _T5CONbits	set	4023
    96  0000                     _TMR0H	set	4055
    97  0000                     _TMR0L	set	4054
    98  0000                     _TRISAbits	set	3986
    99  0000                     _TRISB	set	3987
   100  0000                     _TRISC	set	3988
   101  0000                     _TRISCbits	set	3988
   102  0000                     _TRISDbits	set	3989
   103  0000                     _TXSTAbits	set	4012
   104  0000                     _PDC0H	set	3960
   105  0000                     _PDC0L	set	3961
   106  0000                     _PDC1H	set	3958
   107  0000                     _PDC1L	set	3959
   108  00030B                     STR_4:
   109  00030B  43                 	db	67	;'C'
   110  00030C  53                 	db	83	;'S'
   111  00030D  20                 	db	32
   112  00030E  49                 	db	73	;'I'
   113  00030F  4E                 	db	78	;'N'
   114  000310  43                 	db	67	;'C'
   115  000311  4F                 	db	79	;'O'
   116  000312  52                 	db	82	;'R'
   117  000313  52                 	db	82	;'R'
   118  000314  45                 	db	69	;'E'
   119  000315  43                 	db	67	;'C'
   120  000316  54                 	db	84	;'T'
   121  000317  20                 	db	32
   122  000318  25                 	db	37
   123  000319  64                 	db	100	;'d'
   124  00031A  00                 	db	0
   125  00031B                     STR_3:
   126  00031B  43                 	db	67	;'C'
   127  00031C  53                 	db	83	;'S'
   128  00031D  20                 	db	32
   129  00031E  43                 	db	67	;'C'
   130  00031F  4F                 	db	79	;'O'
   131  000320  52                 	db	82	;'R'
   132  000321  52                 	db	82	;'R'
   133  000322  45                 	db	69	;'E'
   134  000323  43                 	db	67	;'C'
   135  000324  54                 	db	84	;'T'
   136  000325  20                 	db	32
   137  000326  25                 	db	37
   138  000327  64                 	db	100	;'d'
   139  000328  00                 	db	0
   140  000329                     STR_2:
   141  000329  50                 	db	80	;'P'
   142  00032A  4C                 	db	76	;'L'
   143  00032B  20                 	db	32
   144  00032C  3D                 	db	61	;'='
   145  00032D  20                 	db	32
   146  00032E  25                 	db	37
   147  00032F  64                 	db	100	;'d'
   148  000330  20                 	db	32
   149  000331  25                 	db	37
   150  000332  30                 	db	48	;'0'
   151  000333  32                 	db	50	;'2'
   152  000334  64                 	db	100	;'d'
   153  000335  00                 	db	0
   154  000336                     STR_1:
   155  000336  50                 	db	80	;'P'
   156  000337  52                 	db	82	;'R'
   157  000338  20                 	db	32
   158  000339  3D                 	db	61	;'='
   159  00033A  20                 	db	32
   160  00033B  25                 	db	37
   161  00033C  64                 	db	100	;'d'
   162  00033D  20                 	db	32
   163  00033E  25                 	db	37
   164  00033F  30                 	db	48	;'0'
   165  000340  32                 	db	50	;'2'
   166  000341  64                 	db	100	;'d'
   167  000342  00                 	db	0
   168                           
   169                           ; #config settings
   170  000343  00                 	db	0	; dummy byte at the end
   171  0000                     
   172                           	psect	cinit
   173  001828                     __pcinit:
   174                           	opt stack 0
   175  001828                     start_initialization:
   176                           	opt stack 0
   177  001828                     __initialization:
   178                           	opt stack 0
   179                           
   180                           ; Clear objects allocated to BANK1 (1 bytes)
   181  001828  0101               	movlb	1
   182  00182A  6BD1               	clrf	__pbssBANK1& (0+255),b
   183                           
   184                           ; Clear objects allocated to COMRAM (18 bytes)
   185  00182C  EE00  F03E         	lfsr	0,__pbssCOMRAM
   186  001830  0E12               	movlw	18
   187  001832                     clear_0:
   188  001832  6AEE               	clrf	postinc0,c
   189  001834  06E8               	decf	wreg,f,c
   190  001836  E1FD               	bnz	clear_0
   191  001838                     end_of_initialization:
   192                           	opt stack 0
   193  001838                     __end_of__initialization:
   194                           	opt stack 0
   195  001838  9050               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   196  00183A  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   197  00183C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   198  00183E  6EF8               	movwf	tblptru,c
   199  001840  0100               	movlb	0
   200  001842  EFA2  F001         	goto	_main	;jump to C main() function
   201                           tblptru	equ	0xFF8
   202                           postinc0	equ	0xFEE
   203                           wreg	equ	0xFE8
   204                           
   205                           	psect	bssCOMRAM
   206  00003E                     __pbssCOMRAM:
   207                           	opt stack 0
   208  00003E                     InterruptHandlerHigh@x:
   209                           	opt stack 0
   210  00003E                     	ds	1
   211  00003F                     _string_rfid:
   212                           	opt stack 0
   213  00003F                     	ds	17
   214                           tblptru	equ	0xFF8
   215                           postinc0	equ	0xFEE
   216                           wreg	equ	0xFE8
   217                           
   218                           	psect	bssBANK1
   219  0001D1                     __pbssBANK1:
   220                           	opt stack 0
   221  0001D1                     _card_read:
   222                           	opt stack 0
   223  0001D1                     	ds	1
   224                           tblptru	equ	0xFF8
   225                           postinc0	equ	0xFEE
   226                           wreg	equ	0xFE8
   227                           
   228                           	psect	cstackBANK1
   229  000100                     __pcstackBANK1:
   230                           	opt stack 0
   231  000100                     main@back_trace_distance:
   232                           	opt stack 0
   233                           
   234                           ; 120 bytes @ 0x0
   235  000100                     	ds	120
   236  000178                     main@array_check:
   237                           	opt stack 0
   238                           
   239                           ; 12 bytes @ 0x78
   240  000178                     	ds	12
   241  000184                     main@buf_r:
   242                           	opt stack 0
   243                           
   244                           ; 16 bytes @ 0x84
   245  000184                     	ds	16
   246  000194                     main@buf_l:
   247                           	opt stack 0
   248                           
   249                           ; 16 bytes @ 0x94
   250  000194                     	ds	16
   251  0001A4                     main@bits_16:
   252                           	opt stack 0
   253                           
   254                           ; 12 bytes @ 0xA4
   255  0001A4                     	ds	12
   256  0001B0                     main@direction:
   257                           	opt stack 0
   258                           
   259                           ; 1 bytes @ 0xB0
   260  0001B0                     	ds	1
   261  0001B1                     main@back_trace_counter:
   262                           	opt stack 0
   263                           
   264                           ; 2 bytes @ 0xB1
   265  0001B1                     	ds	2
   266  0001B3                     main@IR_values:
   267                           	opt stack 0
   268                           
   269                           ; 12 bytes @ 0xB3
   270  0001B3                     	ds	12
   271  0001BF                     main@motorL:
   272                           	opt stack 0
   273                           
   274                           ; 9 bytes @ 0xBF
   275  0001BF                     	ds	9
   276  0001C8                     main@motorR:
   277                           	opt stack 0
   278                           
   279                           ; 9 bytes @ 0xC8
   280  0001C8                     	ds	9
   281                           tblptru	equ	0xFF8
   282                           postinc0	equ	0xFEE
   283                           wreg	equ	0xFE8
   284                           
   285                           	psect	cstackBANK0
   286  000060                     __pcstackBANK0:
   287                           	opt stack 0
   288  000060                     ??_check_sum:
   289                           
   290                           ; 1 bytes @ 0x0
   291  000060                     	ds	10
   292  00006A                     check_sum@buf_cs:
   293                           	opt stack 0
   294                           
   295                           ; 16 bytes @ 0xA
   296  00006A                     	ds	16
   297  00007A                     check_sum@xor_value:
   298                           	opt stack 0
   299                           
   300                           ; 2 bytes @ 0x1A
   301  00007A                     	ds	2
   302  00007C                     check_sum@i:
   303                           	opt stack 0
   304                           
   305                           ; 2 bytes @ 0x1C
   306  00007C                     	ds	2
   307  00007E                     check_sum@j:
   308                           	opt stack 0
   309                           
   310                           ; 1 bytes @ 0x1E
   311  00007E                     	ds	1
   312  00007F                     main@back_trace_direction:
   313                           	opt stack 0
   314                           
   315                           ; 120 bytes @ 0x1F
   316  00007F                     	ds	120
   317  0000F7                     main@speed_motor_high:
   318                           	opt stack 0
   319                           
   320                           ; 1 bytes @ 0x97
   321  0000F7                     	ds	1
   322  0000F8                     main@PWMcycle:
   323                           	opt stack 0
   324                           
   325                           ; 2 bytes @ 0x98
   326  0000F8                     	ds	2
   327  0000FA                     main@speed_motor_medium:
   328                           	opt stack 0
   329                           
   330                           ; 1 bytes @ 0x9A
   331  0000FA                     	ds	1
   332  0000FB                     main@difference:
   333                           	opt stack 0
   334                           
   335                           ; 2 bytes @ 0x9B
   336  0000FB                     	ds	2
   337  0000FD                     main@threshold:
   338                           	opt stack 0
   339                           
   340                           ; 2 bytes @ 0x9D
   341  0000FD                     	ds	2
   342  0000FF                     main@speed_motor_low:
   343                           	opt stack 0
   344                           
   345                           ; 1 bytes @ 0x9F
   346  0000FF                     	ds	1
   347                           tblptru	equ	0xFF8
   348                           postinc0	equ	0xFEE
   349                           wreg	equ	0xFE8
   350                           
   351                           	psect	cstackCOMRAM
   352  000001                     __pcstackCOMRAM:
   353                           	opt stack 0
   354  000001                     ??_InterruptHandlerHigh:
   355  000001                     
   356                           ; 1 bytes @ 0x0
   357  000001                     	ds	14
   358  00000F                     InterruptHandlerHigh@rx_char:
   359                           	opt stack 0
   360                           
   361                           ; 1 bytes @ 0xE
   362  00000F                     	ds	1
   363  000010                     ??_isdigit:
   364  000010                     ??_LCDout:
   365  000010                     ?_store_back:
   366                           	opt stack 0
   367  000010                     ?___wmul:
   368                           	opt stack 0
   369  000010                     ?___lwdiv:
   370                           	opt stack 0
   371  000010                     store_back@back_trace_dir:
   372                           	opt stack 0
   373  000010                     ___wmul@multiplier:
   374                           	opt stack 0
   375  000010                     ___lwdiv@dividend:
   376                           	opt stack 0
   377                           
   378                           ; 2 bytes @ 0xF
   379  000010                     	ds	1
   380  000011                     _isdigit$1717:
   381                           	opt stack 0
   382                           
   383                           ; 1 bytes @ 0x10
   384  000011                     	ds	1
   385  000012                     LCDout@number:
   386                           	opt stack 0
   387  000012                     isdigit@c:
   388                           	opt stack 0
   389  000012                     store_back@back_trace_dist:
   390                           	opt stack 0
   391  000012                     ___wmul@multiplicand:
   392                           	opt stack 0
   393  000012                     ___lwdiv@divisor:
   394                           	opt stack 0
   395                           
   396                           ; 2 bytes @ 0x11
   397  000012                     	ds	1
   398  000013                     SendLCD@type:
   399                           	opt stack 0
   400                           
   401                           ; 2 bytes @ 0x12
   402  000013                     	ds	1
   403  000014                     store_back@dir:
   404                           	opt stack 0
   405  000014                     ___lwdiv@counter:
   406                           	opt stack 0
   407  000014                     ___wmul@product:
   408                           	opt stack 0
   409                           
   410                           ; 2 bytes @ 0x13
   411  000014                     	ds	1
   412  000015                     SendLCD@Byte:
   413                           	opt stack 0
   414  000015                     store_back@btc:
   415                           	opt stack 0
   416  000015                     ___lwdiv@quotient:
   417                           	opt stack 0
   418                           
   419                           ; 2 bytes @ 0x14
   420  000015                     	ds	1
   421  000016                     ??_LCD_Init:
   422  000016                     ??_clear_LCD:
   423  000016                     ?___awdiv:
   424                           	opt stack 0
   425  000016                     SetLine@line:
   426                           	opt stack 0
   427  000016                     LCD_string@string:
   428                           	opt stack 0
   429  000016                     ___awdiv@dividend:
   430                           	opt stack 0
   431                           
   432                           ; 2 bytes @ 0x15
   433  000016                     	ds	1
   434  000017                     ??_store_back:
   435  000017                     ?___lwmod:
   436                           	opt stack 0
   437  000017                     ___lwmod@dividend:
   438                           	opt stack 0
   439                           
   440                           ; 2 bytes @ 0x16
   441  000017                     	ds	1
   442  000018                     send_signal_RFID@pa:
   443                           	opt stack 0
   444  000018                     ___awdiv@divisor:
   445                           	opt stack 0
   446                           
   447                           ; 2 bytes @ 0x17
   448  000018                     	ds	1
   449  000019                     ___lwmod@divisor:
   450                           	opt stack 0
   451                           
   452                           ; 2 bytes @ 0x18
   453  000019                     	ds	1
   454  00001A                     ___awdiv@counter:
   455                           	opt stack 0
   456  00001A                     send_signal_RFID@dis:
   457                           	opt stack 0
   458                           
   459                           ; 2 bytes @ 0x19
   460  00001A                     	ds	1
   461  00001B                     ___awdiv@sign:
   462                           	opt stack 0
   463  00001B                     ___lwmod@counter:
   464                           	opt stack 0
   465                           
   466                           ; 1 bytes @ 0x1A
   467  00001B                     	ds	1
   468  00001C                     ??_send_signal_RFID:
   469  00001C                     ?_sprintf:
   470                           	opt stack 0
   471  00001C                     sprintf@sp:
   472                           	opt stack 0
   473  00001C                     ___awdiv@quotient:
   474                           	opt stack 0
   475                           
   476                           ; 2 bytes @ 0x1B
   477  00001C                     	ds	2
   478  00001E                     ?_map_infrared:
   479                           	opt stack 0
   480  00001E                     map_infrared@ir_signal:
   481                           	opt stack 0
   482  00001E                     setMotorPWM@m:
   483                           	opt stack 0
   484  00001E                     sprintf@f:
   485                           	opt stack 0
   486                           
   487                           ; 2 bytes @ 0x1D
   488  00001E                     	ds	2
   489  000020                     ??_setMotorPWM:
   490  000020                     map_infrared@map_signal:
   491                           	opt stack 0
   492                           
   493                           ; 2 bytes @ 0x1F
   494  000020                     	ds	2
   495  000022                     IR_signal_extract@ir:
   496                           	opt stack 0
   497                           
   498                           ; 2 bytes @ 0x21
   499  000022                     	ds	1
   500  000023                     setMotorPWM@PWMduty:
   501                           	opt stack 0
   502                           
   503                           ; 2 bytes @ 0x22
   504  000023                     	ds	1
   505  000024                     ??_sprintf:
   506  000024                     ??_IR_signal_extract:
   507                           
   508                           ; 1 bytes @ 0x23
   509  000024                     	ds	1
   510  000025                     setMotorFullSpeed@m:
   511                           	opt stack 0
   512  000025                     stop@m_L:
   513                           	opt stack 0
   514                           
   515                           ; 2 bytes @ 0x24
   516  000025                     	ds	2
   517  000027                     setMotorFullSpeed@max_p:
   518                           	opt stack 0
   519  000027                     stop@m_R:
   520                           	opt stack 0
   521                           
   522                           ; 2 bytes @ 0x26
   523  000027                     	ds	1
   524  000028                     sprintf@ap:
   525                           	opt stack 0
   526                           
   527                           ; 2 bytes @ 0x27
   528  000028                     	ds	1
   529  000029                     turnLeft@m_L:
   530                           	opt stack 0
   531  000029                     turnRight@m_L:
   532                           	opt stack 0
   533  000029                     forwards@m_L:
   534                           	opt stack 0
   535  000029                     backwards@m_L:
   536                           	opt stack 0
   537                           
   538                           ; 2 bytes @ 0x28
   539  000029                     	ds	1
   540  00002A                     sprintf@prec:
   541                           	opt stack 0
   542                           
   543                           ; 1 bytes @ 0x29
   544  00002A                     	ds	1
   545  00002B                     turnLeft@m_R:
   546                           	opt stack 0
   547  00002B                     turnRight@m_R:
   548                           	opt stack 0
   549  00002B                     forwards@m_R:
   550                           	opt stack 0
   551  00002B                     backwards@m_R:
   552                           	opt stack 0
   553  00002B                     sprintf@val:
   554                           	opt stack 0
   555                           
   556                           ; 2 bytes @ 0x2A
   557  00002B                     	ds	2
   558  00002D                     turnLeft@speed:
   559                           	opt stack 0
   560  00002D                     turnRight@speed:
   561                           	opt stack 0
   562  00002D                     forwards@speed:
   563                           	opt stack 0
   564  00002D                     backwards@speed:
   565                           	opt stack 0
   566  00002D                     sprintf@flag:
   567                           	opt stack 0
   568                           
   569                           ; 1 bytes @ 0x2C
   570  00002D                     	ds	1
   571  00002E                     sprintf@width:
   572                           	opt stack 0
   573                           
   574                           ; 2 bytes @ 0x2D
   575  00002E                     	ds	2
   576  000030                     sprintf@c:
   577                           	opt stack 0
   578                           
   579                           ; 1 bytes @ 0x2F
   580  000030                     	ds	1
   581  000031                     IR_LCD_display@buf_r:
   582                           	opt stack 0
   583  000031                     check_sum@str:
   584                           	opt stack 0
   585                           
   586                           ; 2 bytes @ 0x30
   587  000031                     	ds	2
   588  000033                     IR_LCD_display@buf_l:
   589                           	opt stack 0
   590  000033                     check_sum@arr_check:
   591                           	opt stack 0
   592                           
   593                           ; 2 bytes @ 0x32
   594  000033                     	ds	2
   595  000035                     IR_LCD_display@ir:
   596                           	opt stack 0
   597  000035                     check_sum@bit16:
   598                           	opt stack 0
   599                           
   600                           ; 2 bytes @ 0x34
   601  000035                     	ds	2
   602  000037                     ??_IR_LCD_display:
   603  000037                     check_sum@btc:
   604                           	opt stack 0
   605                           
   606                           ; 2 bytes @ 0x36
   607  000037                     	ds	2
   608  000039                     ??_main:
   609                           
   610                           ; 1 bytes @ 0x38
   611  000039                     	ds	5
   612                           tblptru	equ	0xFF8
   613                           postinc0	equ	0xFEE
   614                           wreg	equ	0xFE8
   615                           
   616 ;;
   617 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
   618 ;;
   619 ;; *************** function _main *****************
   620 ;; Defined at:
   621 ;;		line 62 in file "main_final_project.c"
   622 ;; Parameters:    Size  Location     Type
   623 ;;		None
   624 ;; Auto vars:     Size  Location     Type
   625 ;;  back_trace_d  120    0[BANK1 ] int [60]
   626 ;;  back_trace_d  120   31[BANK0 ] int [60]
   627 ;;  buf_l          16  148[BANK1 ] unsigned char [16]
   628 ;;  buf_r          16  132[BANK1 ] unsigned char [16]
   629 ;;  IR_values      12  179[BANK1 ] struct IR_struct
   630 ;;  bits_16        12  164[BANK1 ] int [6]
   631 ;;  array_check    12  120[BANK1 ] unsigned char [12]
   632 ;;  motorR          9  200[BANK1 ] struct DC_motor
   633 ;;  motorL          9  191[BANK1 ] struct DC_motor
   634 ;;  back_trace_c    2  177[BANK1 ] int 
   635 ;;  threshold       2  157[BANK0 ] int 
   636 ;;  difference      2  155[BANK0 ] int 
   637 ;;  PWMcycle        2  152[BANK0 ] int 
   638 ;;  direction       1  176[BANK1 ] unsigned char 
   639 ;;  speed_motor_    1  159[BANK0 ] unsigned char 
   640 ;;  speed_motor_    1  154[BANK0 ] unsigned char 
   641 ;;  speed_motor_    1  151[BANK0 ] unsigned char 
   642 ;; Return value:  Size  Location     Type
   643 ;;                  1    wreg      void 
   644 ;; Registers used:
   645 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   646 ;; Tracked objects:
   647 ;;		On entry : 0/0
   648 ;;		On exit  : 0/0
   649 ;;		Unchanged: 0/0
   650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   651 ;;      Params:         0       0       0       0
   652 ;;      Locals:         0     129     209       0
   653 ;;      Temps:          5       0       0       0
   654 ;;      Totals:         5     129     209       0
   655 ;;Total ram usage:      343 bytes
   656 ;; Hardware stack levels required when called:    6
   657 ;; This function calls:
   658 ;;		_IR_LCD_display
   659 ;;		_IR_init
   660 ;;		_IR_signal_extract
   661 ;;		_LCD_Init
   662 ;;		_RFID_init
   663 ;;		_TMR0_init
   664 ;;		_TMR5_init
   665 ;;		_backwards
   666 ;;		_check_sum
   667 ;;		_forwards
   668 ;;		_initPWM
   669 ;;		_send_signal_RFID
   670 ;;		_stop
   671 ;;		_store_back
   672 ;;		_turnLeft
   673 ;;		_turnRight
   674 ;; This function is called by:
   675 ;;		Startup code after reset
   676 ;; This function uses a non-reentrant model
   677 ;;
   678                           
   679                           	psect	text0
   680  000344                     __ptext0:
   681                           	opt stack 0
   682  000344                     _main:
   683                           	opt stack 25
   684                           
   685                           ;main_final_project.c: 64: OSCCON = 0x72;
   686                           
   687                           ;incstack = 0
   688  000344  0E72               	movlw	114
   689  000346  6ED3               	movwf	4051,c	;volatile
   690  000348                     l168:
   691  000348  A4D3               	btfss	4051,2,c	;volatile
   692  00034A  D7FE               	goto	l168
   693                           
   694                           ;main_final_project.c: 68: struct IR_struct IR_values;
   695                           ;main_final_project.c: 70: IR_values.ir_left_mapped = 0;
   696  00034C  0E00               	movlw	0
   697  00034E  0101               	movlb	1	; () banked
   698  000350  6FB4               	movwf	(main@IR_values+1)& (0+255),b
   699  000352  0E00               	movlw	0
   700  000354  6FB3               	movwf	main@IR_values& (0+255),b
   701                           
   702                           ;main_final_project.c: 71: IR_values.ir_right_mapped = 0;
   703  000356  0E00               	movlw	0
   704  000358  0101               	movlb	1	; () banked
   705  00035A  6FB6               	movwf	(main@IR_values+3)& (0+255),b
   706  00035C  0E00               	movlw	0
   707  00035E  6FB5               	movwf	(main@IR_values+2)& (0+255),b
   708                           
   709                           ;main_final_project.c: 72: IR_values.ir_left = 0;
   710  000360  0E00               	movlw	0
   711  000362  0101               	movlb	1	; () banked
   712  000364  6FB8               	movwf	(main@IR_values+5)& (0+255),b
   713  000366  0E00               	movlw	0
   714  000368  6FB7               	movwf	(main@IR_values+4)& (0+255),b
   715                           
   716                           ;main_final_project.c: 73: IR_values.ir_right = 0;
   717  00036A  0E00               	movlw	0
   718  00036C  0101               	movlb	1	; () banked
   719  00036E  6FBA               	movwf	(main@IR_values+7)& (0+255),b
   720  000370  0E00               	movlw	0
   721  000372  6FB9               	movwf	(main@IR_values+6)& (0+255),b
   722                           
   723                           ;main_final_project.c: 74: IR_values.ir_left_old = 0;
   724  000374  0E00               	movlw	0
   725  000376  0101               	movlb	1	; () banked
   726  000378  6FBC               	movwf	(main@IR_values+9)& (0+255),b
   727  00037A  0E00               	movlw	0
   728  00037C  6FBB               	movwf	(main@IR_values+8)& (0+255),b
   729                           
   730                           ;main_final_project.c: 75: IR_values.ir_right_old = 0;
   731  00037E  0E00               	movlw	0
   732  000380  0101               	movlb	1	; () banked
   733  000382  6FBE               	movwf	(main@IR_values+11)& (0+255),b
   734  000384  0E00               	movlw	0
   735  000386  6FBD               	movwf	(main@IR_values+10)& (0+255),b
   736                           
   737                           ;main_final_project.c: 78: int PWMcycle = 199;
   738  000388  0E00               	movlw	0
   739  00038A  0100               	movlb	0	; () banked
   740  00038C  6FF9               	movwf	(main@PWMcycle+1)& (0+255),b
   741  00038E  0EC7               	movlw	199
   742  000390  6FF8               	movwf	main@PWMcycle& (0+255),b
   743                           
   744                           ;main_final_project.c: 81: struct DC_motor motorL, motorR;
   745                           ;main_final_project.c: 83: motorL.power = 0;
   746  000392  0E00               	movlw	0
   747  000394  0101               	movlb	1	; () banked
   748  000396  6FBF               	movwf	main@motorL& (0+255),b
   749                           
   750                           ;main_final_project.c: 84: motorL.direction = 1;
   751  000398  0E01               	movlw	1
   752  00039A  0101               	movlb	1	; () banked
   753  00039C  6FC0               	movwf	(main@motorL+1)& (0+255),b
   754                           
   755                           ; BSR set to: 1
   756                           ;main_final_project.c: 85: motorL.dutyLowByte = (unsigned char *) (&PDC0L);
   757  00039E  0E79               	movlw	121
   758  0003A0  0101               	movlb	1	; () banked
   759  0003A2  6FC1               	movwf	(main@motorL+2)& (0+255),b
   760  0003A4  0E0F               	movlw	15
   761  0003A6  0101               	movlb	1	; () banked
   762  0003A8  6FC2               	movwf	(main@motorL+3)& (0+255),b
   763                           
   764                           ; BSR set to: 1
   765                           ;main_final_project.c: 86: motorL.dutyHighByte = (unsigned char *) (&PDC0H);
   766  0003AA  0E78               	movlw	120
   767  0003AC  0101               	movlb	1	; () banked
   768  0003AE  6FC3               	movwf	(main@motorL+4)& (0+255),b
   769  0003B0  0E0F               	movlw	15
   770  0003B2  0101               	movlb	1	; () banked
   771  0003B4  6FC4               	movwf	(main@motorL+5)& (0+255),b
   772                           
   773                           ;main_final_project.c: 87: motorL.dir_pin = 0;
   774  0003B6  0E00               	movlw	0
   775  0003B8  0101               	movlb	1	; () banked
   776  0003BA  6FC5               	movwf	(main@motorL+6)& (0+255),b
   777                           
   778                           ; BSR set to: 1
   779                           ;main_final_project.c: 88: motorL.PWMperiod = PWMcycle;
   780  0003BC  C0F8  F1C6         	movff	main@PWMcycle,main@motorL+7
   781  0003C0  C0F9  F1C7         	movff	main@PWMcycle+1,main@motorL+8
   782                           
   783                           ;main_final_project.c: 91: motorR.power = 0;
   784  0003C4  0E00               	movlw	0
   785  0003C6  0101               	movlb	1	; () banked
   786  0003C8  6FC8               	movwf	main@motorR& (0+255),b
   787                           
   788                           ;main_final_project.c: 92: motorR.direction = 1;
   789  0003CA  0E01               	movlw	1
   790  0003CC  0101               	movlb	1	; () banked
   791  0003CE  6FC9               	movwf	(main@motorR+1)& (0+255),b
   792                           
   793                           ; BSR set to: 1
   794                           ;main_final_project.c: 93: motorR.dutyLowByte = (unsigned char *) (&PDC1L);
   795  0003D0  0E77               	movlw	119
   796  0003D2  0101               	movlb	1	; () banked
   797  0003D4  6FCA               	movwf	(main@motorR+2)& (0+255),b
   798  0003D6  0E0F               	movlw	15
   799  0003D8  0101               	movlb	1	; () banked
   800  0003DA  6FCB               	movwf	(main@motorR+3)& (0+255),b
   801                           
   802                           ; BSR set to: 1
   803                           ;main_final_project.c: 94: motorR.dutyHighByte = (unsigned char *) (&PDC1H);
   804  0003DC  0E76               	movlw	118
   805  0003DE  0101               	movlb	1	; () banked
   806  0003E0  6FCC               	movwf	(main@motorR+4)& (0+255),b
   807  0003E2  0E0F               	movlw	15
   808  0003E4  0101               	movlb	1	; () banked
   809  0003E6  6FCD               	movwf	(main@motorR+5)& (0+255),b
   810                           
   811                           ;main_final_project.c: 95: motorR.dir_pin = 2;
   812  0003E8  0E02               	movlw	2
   813  0003EA  0101               	movlb	1	; () banked
   814  0003EC  6FCE               	movwf	(main@motorR+6)& (0+255),b
   815                           
   816                           ; BSR set to: 1
   817                           ;main_final_project.c: 96: motorR.PWMperiod = PWMcycle;
   818  0003EE  C0F8  F1CF         	movff	main@PWMcycle,main@motorR+7
   819  0003F2  C0F9  F1D0         	movff	main@PWMcycle+1,main@motorR+8
   820                           
   821                           ; BSR set to: 1
   822                           ;main_final_project.c: 99: TMR0_init();
   823  0003F6  EC50  F00C         	call	_TMR0_init	;wreg free
   824                           
   825                           ;main_final_project.c: 100: TMR5_init();
   826  0003FA  EC6B  F00C         	call	_TMR5_init	;wreg free
   827                           
   828                           ;main_final_project.c: 101: LCD_Init();
   829  0003FE  ECCF  F008         	call	_LCD_Init	;wreg free
   830                           
   831                           ;main_final_project.c: 102: IR_init();
   832  000402  EC32  F00C         	call	_IR_init	;wreg free
   833                           
   834                           ;main_final_project.c: 103: RFID_init();
   835  000406  EC5E  F00C         	call	_RFID_init	;wreg free
   836                           
   837                           ;main_final_project.c: 104: initPWM();
   838  00040A  EC23  F00C         	call	_initPWM	;wreg free
   839                           
   840                           ;main_final_project.c: 105: TRISCbits.RC3 = 1;
   841  00040E  8694               	bsf	3988,3,c	;volatile
   842                           
   843                           ;main_final_project.c: 108: RCREG;
   844  000410  50AE               	movf	4014,w,c	;volatile
   845                           
   846                           ;main_final_project.c: 109: RCREG;
   847  000412  50AE               	movf	4014,w,c	;volatile
   848                           
   849                           ;main_final_project.c: 110: RCREG;
   850  000414  50AE               	movf	4014,w,c	;volatile
   851                           
   852                           ;main_final_project.c: 111: PIE1bits.RCIE = 1;
   853  000416  8A9D               	bsf	3997,5,c	;volatile
   854                           
   855                           ;main_final_project.c: 112: INTCONbits.GIEL = 1;
   856  000418  8CF2               	bsf	intcon,6,c	;volatile
   857                           
   858                           ;main_final_project.c: 113: INTCONbits.GIEH = 1;
   859  00041A  8EF2               	bsf	intcon,7,c	;volatile
   860                           
   861                           ;main_final_project.c: 114: INTCON3bits.INT2IE = 1;
   862  00041C  88F0               	bsf	intcon3,4,c	;volatile
   863                           
   864                           ;main_final_project.c: 119: char buf_r[16], buf_l[16];
   865                           ;main_final_project.c: 120: int difference = 0;
   866  00041E  0E00               	movlw	0
   867  000420  0100               	movlb	0	; () banked
   868  000422  6FFC               	movwf	(main@difference+1)& (0+255),b
   869  000424  0E00               	movlw	0
   870  000426  6FFB               	movwf	main@difference& (0+255),b
   871                           
   872                           ; BSR set to: 0
   873                           ;main_final_project.c: 121: int threshold;
   874                           ;main_final_project.c: 124: char speed_motor_low = 48;
   875  000428  0E30               	movlw	48
   876  00042A  0100               	movlb	0	; () banked
   877  00042C  6FFF               	movwf	main@speed_motor_low& (0+255),b
   878                           
   879                           ; BSR set to: 0
   880                           ;main_final_project.c: 125: char speed_motor_medium = 56;
   881  00042E  0E38               	movlw	56
   882  000430  0100               	movlb	0	; () banked
   883  000432  6FFA               	movwf	main@speed_motor_medium& (0+255),b
   884                           
   885                           ; BSR set to: 0
   886                           ;main_final_project.c: 126: char speed_motor_high = 73;
   887  000434  0E49               	movlw	73
   888  000436  0100               	movlb	0	; () banked
   889  000438  6FF7               	movwf	main@speed_motor_high& (0+255),b
   890                           
   891                           ; BSR set to: 0
   892                           ;main_final_project.c: 129: int back_trace_direction[60];
   893                           ;main_final_project.c: 130: int back_trace_distance[60];
   894                           ;main_final_project.c: 131: char direction = 0;
   895  00043A  0E00               	movlw	0
   896  00043C  0101               	movlb	1	; () banked
   897  00043E  6FB0               	movwf	main@direction& (0+255),b
   898                           
   899                           ; BSR set to: 1
   900                           ;main_final_project.c: 132: int back_trace_counter = 0;
   901  000440  0E00               	movlw	0
   902  000442  0101               	movlb	1	; () banked
   903  000444  6FB2               	movwf	(main@back_trace_counter+1)& (0+255),b
   904  000446  0E00               	movlw	0
   905  000448  6FB1               	movwf	main@back_trace_counter& (0+255),b
   906                           
   907                           ; BSR set to: 1
   908                           ;main_final_project.c: 135: int bits_16[6];
   909                           ;main_final_project.c: 136: char array_check[12];
   910                           ;main_final_project.c: 139: card_read = 3;
   911  00044A  0E03               	movlw	3
   912  00044C  0101               	movlb	1	; () banked
   913  00044E  6FD1               	movwf	_card_read& (0+255),b	;volatile
   914                           
   915                           ; BSR set to: 1
   916                           ;main_final_project.c: 140: forwards(&motorL, &motorR, 1);
   917  000450  0EBF               	movlw	low main@motorL
   918  000452  6E29               	movwf	forwards@m_L,c
   919  000454  0E01               	movlw	high main@motorL
   920  000456  6E2A               	movwf	forwards@m_L+1,c
   921  000458  0EC8               	movlw	low main@motorR
   922  00045A  6E2B               	movwf	forwards@m_R,c
   923  00045C  0E01               	movlw	high main@motorR
   924  00045E  6E2C               	movwf	forwards@m_R+1,c
   925  000460  0E01               	movlw	1
   926  000462  6E2D               	movwf	forwards@speed,c
   927  000464  ECEE  F00A         	call	_forwards	;wreg free
   928  000468                     l3085:
   929                           
   930                           ;main_final_project.c: 147: if (card_read == 3) {
   931  000468  0E03               	movlw	3
   932  00046A  0101               	movlb	1	; () banked
   933  00046C  19D1               	xorwf	_card_read& (0+255),w,b	;volatile
   934  00046E  A4D8               	btfss	status,2,c
   935  000470  D18F               	goto	l3149
   936                           
   937                           ; BSR set to: 1
   938                           ;main_final_project.c: 148: stop(&motorL, &motorR);
   939  000472  0EBF               	movlw	low main@motorL
   940  000474  6E25               	movwf	stop@m_L,c
   941  000476  0E01               	movlw	high main@motorL
   942  000478  6E26               	movwf	stop@m_L+1,c
   943  00047A  0EC8               	movlw	low main@motorR
   944  00047C  6E27               	movwf	stop@m_R,c
   945  00047E  0E01               	movlw	high main@motorR
   946  000480  6E28               	movwf	stop@m_R+1,c
   947  000482  EC29  F00A         	call	_stop	;wreg free
   948                           
   949                           ;main_final_project.c: 149: }
   950                           ;main_final_project.c: 153: while (card_read == 0) {
   951  000486  D184               	goto	l3149
   952  000488                     l3089:
   953                           
   954                           ;main_final_project.c: 155: IR_signal_extract(&IR_values);
   955  000488  0EB3               	movlw	low main@IR_values
   956  00048A  6E22               	movwf	IR_signal_extract@ir,c
   957  00048C  0E01               	movlw	high main@IR_values
   958  00048E  6E23               	movwf	IR_signal_extract@ir+1,c
   959  000490  EC41  F007         	call	_IR_signal_extract	;wreg free
   960                           
   961                           ;main_final_project.c: 156: IR_LCD_display(&buf_r, &buf_l, &IR_values);
   962  000494  0E84               	movlw	low main@buf_r
   963  000496  6E31               	movwf	IR_LCD_display@buf_r,c
   964  000498  0E01               	movlw	high main@buf_r
   965  00049A  6E32               	movwf	IR_LCD_display@buf_r+1,c
   966  00049C  0E94               	movlw	low main@buf_l
   967  00049E  6E33               	movwf	IR_LCD_display@buf_l,c
   968  0004A0  0E01               	movlw	high main@buf_l
   969  0004A2  6E34               	movwf	IR_LCD_display@buf_l+1,c
   970  0004A4  0EB3               	movlw	low main@IR_values
   971  0004A6  6E35               	movwf	IR_LCD_display@ir,c
   972  0004A8  0E01               	movlw	high main@IR_values
   973  0004AA  6E36               	movwf	IR_LCD_display@ir+1,c
   974  0004AC  EC3E  F009         	call	_IR_LCD_display	;wreg free
   975                           
   976                           ;main_final_project.c: 158: difference = IR_values.ir_right_mapped - IR_values.ir_left_m
      +                          apped;
   977  0004B0  C1B3  F039         	movff	main@IR_values,??_main
   978  0004B4  C1B4  F03A         	movff	main@IR_values+1,??_main+1
   979  0004B8  1E39               	comf	??_main,f,c
   980  0004BA  1E3A               	comf	??_main+1,f,c
   981  0004BC  4A39               	infsnz	??_main,f,c
   982  0004BE  2A3A               	incf	??_main+1,f,c
   983  0004C0  0101               	movlb	1	; () banked
   984  0004C2  51B5               	movf	(main@IR_values+2)& (0+255),w,b
   985  0004C4  2439               	addwf	??_main,w,c
   986  0004C6  0100               	movlb	0	; () banked
   987  0004C8  6FFB               	movwf	main@difference& (0+255),b
   988  0004CA  0101               	movlb	1	; () banked
   989  0004CC  51B6               	movf	(main@IR_values+3)& (0+255),w,b
   990  0004CE  203A               	addwfc	??_main+1,w,c
   991  0004D0  0100               	movlb	0	; () banked
   992  0004D2  6FFC               	movwf	(main@difference+1)& (0+255),b
   993                           
   994                           ; BSR set to: 0
   995                           ;main_final_project.c: 160: if ((IR_values.ir_right_mapped | IR_values.ir_left_mapped) >
      +                           180) {
   996  0004D4  0101               	movlb	1	; () banked
   997  0004D6  51B3               	movf	main@IR_values& (0+255),w,b
   998  0004D8  0101               	movlb	1	; () banked
   999  0004DA  11B5               	iorwf	(main@IR_values+2)& (0+255),w,b
  1000  0004DC  6E39               	movwf	??_main& (0+255),c
  1001  0004DE  0101               	movlb	1	; () banked
  1002  0004E0  51B4               	movf	(main@IR_values+1)& (0+255),w,b
  1003  0004E2  0101               	movlb	1	; () banked
  1004  0004E4  11B6               	iorwf	(main@IR_values+3)& (0+255),w,b
  1005  0004E6  6E3A               	movwf	(??_main+1)& (0+255),c
  1006  0004E8  BE3A               	btfsc	??_main+1,7,c
  1007  0004EA  D00B               	goto	l3099
  1008  0004EC  503A               	movf	??_main+1,w,c
  1009  0004EE  E104               	bnz	u2330
  1010  0004F0  0EB5               	movlw	181
  1011  0004F2  5C39               	subwf	??_main,w,c
  1012  0004F4  A0D8               	btfss	status,0,c
  1013  0004F6  D005               	goto	l3099
  1014  0004F8                     u2330:
  1015                           
  1016                           ; BSR set to: 1
  1017                           ;main_final_project.c: 161: threshold = 50;
  1018  0004F8  0E00               	movlw	0
  1019  0004FA  0100               	movlb	0	; () banked
  1020  0004FC  6FFE               	movwf	(main@threshold+1)& (0+255),b
  1021  0004FE  0E32               	movlw	50
  1022  000500  D004               	goto	L1
  1023  000502                     l3099:
  1024                           
  1025                           ;main_final_project.c: 163: threshold = 10;
  1026  000502  0E00               	movlw	0
  1027  000504  0100               	movlb	0	; () banked
  1028  000506  6FFE               	movwf	(main@threshold+1)& (0+255),b
  1029  000508  0E0A               	movlw	10
  1030  00050A                     L1:
  1031  00050A  6FFD               	movwf	main@threshold& (0+255),b
  1032                           
  1033                           ; BSR set to: 0
  1034                           ;main_final_project.c: 164: }
  1035                           ;main_final_project.c: 166: if (difference <= (-threshold)) {
  1036                           
  1037                           ; BSR set to: 0
  1038  00050C  C0FD  F039         	movff	main@threshold,??_main
  1039  000510  C0FE  F03A         	movff	main@threshold+1,??_main+1
  1040  000514  1E39               	comf	??_main,f,c
  1041  000516  1E3A               	comf	??_main+1,f,c
  1042  000518  4A39               	infsnz	??_main,f,c
  1043  00051A  2A3A               	incf	??_main+1,f,c
  1044  00051C  0100               	movlb	0	; () banked
  1045  00051E  51FB               	movf	main@difference& (0+255),w,b
  1046  000520  5C39               	subwf	??_main,w,c
  1047  000522  503A               	movf	??_main+1,w,c
  1048  000524  0A80               	xorlw	128
  1049  000526  6E3B               	movwf	(??_main+2)& (0+255),c
  1050  000528  0100               	movlb	0	; () banked
  1051  00052A  51FC               	movf	(main@difference+1)& (0+255),w,b
  1052  00052C  0A80               	xorlw	128
  1053  00052E  583B               	subwfb	(??_main+2)& (0+255),w,c
  1054  000530  A0D8               	btfss	status,0,c
  1055  000532  D041               	goto	l3113
  1056                           
  1057                           ; BSR set to: 0
  1058                           ;main_final_project.c: 167: if (direction != 1) {
  1059  000534  0101               	movlb	1	; () banked
  1060  000536  05B0               	decf	main@direction& (0+255),w,b
  1061  000538  B4D8               	btfsc	status,2,c
  1062  00053A  D030               	goto	l3109
  1063                           
  1064                           ; BSR set to: 1
  1065                           ;main_final_project.c: 168: stop(&motorL, &motorR);
  1066  00053C  0EBF               	movlw	low main@motorL
  1067  00053E  6E25               	movwf	stop@m_L,c
  1068  000540  0E01               	movlw	high main@motorL
  1069  000542  6E26               	movwf	stop@m_L+1,c
  1070  000544  0EC8               	movlw	low main@motorR
  1071  000546  6E27               	movwf	stop@m_R,c
  1072  000548  0E01               	movlw	high main@motorR
  1073  00054A  6E28               	movwf	stop@m_R+1,c
  1074  00054C  EC29  F00A         	call	_stop	;wreg free
  1075                           
  1076                           ;main_final_project.c: 169: back_trace_counter = store_back(&back_trace_direction[back_t
      +                          race_counter], &back_trace_distance[back_trace_counter], direction, back_trace_counter);
  1077  000550  C1B1  F039         	movff	main@back_trace_counter,??_main
  1078  000554  C1B2  F03A         	movff	main@back_trace_counter+1,??_main+1
  1079  000558  90D8               	bcf	status,0,c
  1080  00055A  3639               	rlcf	??_main,f,c
  1081  00055C  363A               	rlcf	??_main+1,f,c
  1082  00055E  0E7F               	movlw	low main@back_trace_direction
  1083  000560  2439               	addwf	??_main,w,c
  1084  000562  6E10               	movwf	store_back@back_trace_dir,c
  1085  000564  0E00               	movlw	high main@back_trace_direction
  1086  000566  203A               	addwfc	??_main+1,w,c
  1087  000568  6E11               	movwf	store_back@back_trace_dir+1,c
  1088  00056A  C1B1  F03B         	movff	main@back_trace_counter,??_main+2
  1089  00056E  C1B2  F03C         	movff	main@back_trace_counter+1,??_main+3
  1090  000572  90D8               	bcf	status,0,c
  1091  000574  363B               	rlcf	??_main+2,f,c
  1092  000576  363C               	rlcf	??_main+3,f,c
  1093  000578  0E00               	movlw	low main@back_trace_distance
  1094  00057A  243B               	addwf	??_main+2,w,c
  1095  00057C  6E12               	movwf	store_back@back_trace_dist,c
  1096  00057E  0E01               	movlw	high main@back_trace_distance
  1097  000580  203C               	addwfc	??_main+3,w,c
  1098  000582  6E13               	movwf	store_back@back_trace_dist+1,c
  1099  000584  C1B0  F014         	movff	main@direction,store_back@dir
  1100  000588  C1B1  F015         	movff	main@back_trace_counter,store_back@btc
  1101  00058C  C1B2  F016         	movff	main@back_trace_counter+1,store_back@btc+1
  1102  000590  EC58  F00A         	call	_store_back	;wreg free
  1103  000594  C010  F1B1         	movff	?_store_back,main@back_trace_counter
  1104  000598  C011  F1B2         	movff	?_store_back+1,main@back_trace_counter+1
  1105  00059C                     l3109:
  1106                           
  1107                           ;main_final_project.c: 170: }
  1108                           ;main_final_project.c: 171: turnLeft(&motorL, &motorR, speed_motor_low);
  1109  00059C  0EBF               	movlw	low main@motorL
  1110  00059E  6E29               	movwf	turnLeft@m_L,c
  1111  0005A0  0E01               	movlw	high main@motorL
  1112  0005A2  6E2A               	movwf	turnLeft@m_L+1,c
  1113  0005A4  0EC8               	movlw	low main@motorR
  1114  0005A6  6E2B               	movwf	turnLeft@m_R,c
  1115  0005A8  0E01               	movlw	high main@motorR
  1116  0005AA  6E2C               	movwf	turnLeft@m_R+1,c
  1117  0005AC  C0FF  F02D         	movff	main@speed_motor_low,turnLeft@speed
  1118  0005B0  ECCD  F00A         	call	_turnLeft	;wreg free
  1119  0005B4  D0EA               	goto	l3147
  1120  0005B6                     l3113:
  1121                           
  1122                           ;main_final_project.c: 174: else if (difference >= threshold) {
  1123  0005B6  0100               	movlb	0	; () banked
  1124  0005B8  51FD               	movf	main@threshold& (0+255),w,b
  1125  0005BA  0100               	movlb	0	; () banked
  1126  0005BC  5DFB               	subwf	main@difference& (0+255),w,b
  1127  0005BE  0100               	movlb	0	; () banked
  1128  0005C0  51FC               	movf	(main@difference+1)& (0+255),w,b
  1129  0005C2  0A80               	xorlw	128
  1130  0005C4  6E39               	movwf	??_main& (0+255),c
  1131  0005C6  0100               	movlb	0	; () banked
  1132  0005C8  51FE               	movf	(main@threshold+1)& (0+255),w,b
  1133  0005CA  0A80               	xorlw	128
  1134  0005CC  5839               	subwfb	??_main& (0+255),w,c
  1135  0005CE  A0D8               	btfss	status,0,c
  1136  0005D0  D043               	goto	l3125
  1137                           
  1138                           ; BSR set to: 0
  1139                           ;main_final_project.c: 175: if (direction != 2) {
  1140  0005D2  0E02               	movlw	2
  1141  0005D4  0101               	movlb	1	; () banked
  1142  0005D6  19B0               	xorwf	main@direction& (0+255),w,b
  1143  0005D8  B4D8               	btfsc	status,2,c
  1144  0005DA  D030               	goto	l3121
  1145                           
  1146                           ; BSR set to: 1
  1147                           ;main_final_project.c: 176: stop(&motorL, &motorR);
  1148  0005DC  0EBF               	movlw	low main@motorL
  1149  0005DE  6E25               	movwf	stop@m_L,c
  1150  0005E0  0E01               	movlw	high main@motorL
  1151  0005E2  6E26               	movwf	stop@m_L+1,c
  1152  0005E4  0EC8               	movlw	low main@motorR
  1153  0005E6  6E27               	movwf	stop@m_R,c
  1154  0005E8  0E01               	movlw	high main@motorR
  1155  0005EA  6E28               	movwf	stop@m_R+1,c
  1156  0005EC  EC29  F00A         	call	_stop	;wreg free
  1157                           
  1158                           ;main_final_project.c: 177: back_trace_counter = store_back(&back_trace_direction[back_t
      +                          race_counter], &back_trace_distance[back_trace_counter], direction, back_trace_counter);
  1159  0005F0  C1B1  F039         	movff	main@back_trace_counter,??_main
  1160  0005F4  C1B2  F03A         	movff	main@back_trace_counter+1,??_main+1
  1161  0005F8  90D8               	bcf	status,0,c
  1162  0005FA  3639               	rlcf	??_main,f,c
  1163  0005FC  363A               	rlcf	??_main+1,f,c
  1164  0005FE  0E7F               	movlw	low main@back_trace_direction
  1165  000600  2439               	addwf	??_main,w,c
  1166  000602  6E10               	movwf	store_back@back_trace_dir,c
  1167  000604  0E00               	movlw	high main@back_trace_direction
  1168  000606  203A               	addwfc	??_main+1,w,c
  1169  000608  6E11               	movwf	store_back@back_trace_dir+1,c
  1170  00060A  C1B1  F03B         	movff	main@back_trace_counter,??_main+2
  1171  00060E  C1B2  F03C         	movff	main@back_trace_counter+1,??_main+3
  1172  000612  90D8               	bcf	status,0,c
  1173  000614  363B               	rlcf	??_main+2,f,c
  1174  000616  363C               	rlcf	??_main+3,f,c
  1175  000618  0E00               	movlw	low main@back_trace_distance
  1176  00061A  243B               	addwf	??_main+2,w,c
  1177  00061C  6E12               	movwf	store_back@back_trace_dist,c
  1178  00061E  0E01               	movlw	high main@back_trace_distance
  1179  000620  203C               	addwfc	??_main+3,w,c
  1180  000622  6E13               	movwf	store_back@back_trace_dist+1,c
  1181  000624  C1B0  F014         	movff	main@direction,store_back@dir
  1182  000628  C1B1  F015         	movff	main@back_trace_counter,store_back@btc
  1183  00062C  C1B2  F016         	movff	main@back_trace_counter+1,store_back@btc+1
  1184  000630  EC58  F00A         	call	_store_back	;wreg free
  1185  000634  C010  F1B1         	movff	?_store_back,main@back_trace_counter
  1186  000638  C011  F1B2         	movff	?_store_back+1,main@back_trace_counter+1
  1187  00063C                     l3121:
  1188                           
  1189                           ;main_final_project.c: 178: }
  1190                           ;main_final_project.c: 179: turnRight(&motorL, &motorR, speed_motor_low);
  1191  00063C  0EBF               	movlw	low main@motorL
  1192  00063E  6E29               	movwf	turnRight@m_L,c
  1193  000640  0E01               	movlw	high main@motorL
  1194  000642  6E2A               	movwf	turnRight@m_L+1,c
  1195  000644  0EC8               	movlw	low main@motorR
  1196  000646  6E2B               	movwf	turnRight@m_R,c
  1197  000648  0E01               	movlw	high main@motorR
  1198  00064A  6E2C               	movwf	turnRight@m_R+1,c
  1199  00064C  C0FF  F02D         	movff	main@speed_motor_low,turnRight@speed
  1200  000650  ECAC  F00A         	call	_turnRight	;wreg free
  1201                           
  1202                           ;main_final_project.c: 180: direction = 2;
  1203  000654  0E02               	movlw	2
  1204  000656  D09A               	goto	L4
  1205  000658                     l3125:
  1206                           
  1207                           ;main_final_project.c: 183: else {
  1208                           ;main_final_project.c: 185: if ((IR_values.ir_right_mapped >= 120) && (IR_values.ir_left
      +                          _mapped >= 120)) {
  1209  000658  0101               	movlb	1	; () banked
  1210  00065A  BFB6               	btfsc	(main@IR_values+3)& (0+255),7,b
  1211  00065C  D056               	goto	l3139
  1212  00065E  0101               	movlb	1	; () banked
  1213  000660  51B6               	movf	(main@IR_values+3)& (0+255),w,b
  1214  000662  E105               	bnz	u2380
  1215  000664  0E78               	movlw	120
  1216  000666  0101               	movlb	1	; () banked
  1217  000668  5DB5               	subwf	(main@IR_values+2)& (0+255),w,b
  1218  00066A  A0D8               	btfss	status,0,c
  1219  00066C  D04E               	goto	l3139
  1220  00066E                     u2380:
  1221                           
  1222                           ; BSR set to: 1
  1223  00066E  0101               	movlb	1	; () banked
  1224  000670  BFB4               	btfsc	(main@IR_values+1)& (0+255),7,b
  1225  000672  D04B               	goto	l3139
  1226  000674  0101               	movlb	1	; () banked
  1227  000676  51B4               	movf	(main@IR_values+1)& (0+255),w,b
  1228  000678  E105               	bnz	u2390
  1229  00067A  0E78               	movlw	120
  1230  00067C  0101               	movlb	1	; () banked
  1231  00067E  5DB3               	subwf	main@IR_values& (0+255),w,b
  1232  000680  A0D8               	btfss	status,0,c
  1233  000682  D043               	goto	l3139
  1234  000684                     u2390:
  1235                           
  1236                           ; BSR set to: 1
  1237                           ;main_final_project.c: 186: if (direction != 3) {
  1238  000684  0E03               	movlw	3
  1239  000686  0101               	movlb	1	; () banked
  1240  000688  19B0               	xorwf	main@direction& (0+255),w,b
  1241  00068A  B4D8               	btfsc	status,2,c
  1242  00068C  D030               	goto	l3135
  1243                           
  1244                           ; BSR set to: 1
  1245                           ;main_final_project.c: 187: stop(&motorL, &motorR);
  1246  00068E  0EBF               	movlw	low main@motorL
  1247  000690  6E25               	movwf	stop@m_L,c
  1248  000692  0E01               	movlw	high main@motorL
  1249  000694  6E26               	movwf	stop@m_L+1,c
  1250  000696  0EC8               	movlw	low main@motorR
  1251  000698  6E27               	movwf	stop@m_R,c
  1252  00069A  0E01               	movlw	high main@motorR
  1253  00069C  6E28               	movwf	stop@m_R+1,c
  1254  00069E  EC29  F00A         	call	_stop	;wreg free
  1255                           
  1256                           ;main_final_project.c: 188: back_trace_counter = store_back(&back_trace_direction[back_t
      +                          race_counter], &back_trace_distance[back_trace_counter], direction, back_trace_counter);
  1257  0006A2  C1B1  F039         	movff	main@back_trace_counter,??_main
  1258  0006A6  C1B2  F03A         	movff	main@back_trace_counter+1,??_main+1
  1259  0006AA  90D8               	bcf	status,0,c
  1260  0006AC  3639               	rlcf	??_main,f,c
  1261  0006AE  363A               	rlcf	??_main+1,f,c
  1262  0006B0  0E7F               	movlw	low main@back_trace_direction
  1263  0006B2  2439               	addwf	??_main,w,c
  1264  0006B4  6E10               	movwf	store_back@back_trace_dir,c
  1265  0006B6  0E00               	movlw	high main@back_trace_direction
  1266  0006B8  203A               	addwfc	??_main+1,w,c
  1267  0006BA  6E11               	movwf	store_back@back_trace_dir+1,c
  1268  0006BC  C1B1  F03B         	movff	main@back_trace_counter,??_main+2
  1269  0006C0  C1B2  F03C         	movff	main@back_trace_counter+1,??_main+3
  1270  0006C4  90D8               	bcf	status,0,c
  1271  0006C6  363B               	rlcf	??_main+2,f,c
  1272  0006C8  363C               	rlcf	??_main+3,f,c
  1273  0006CA  0E00               	movlw	low main@back_trace_distance
  1274  0006CC  243B               	addwf	??_main+2,w,c
  1275  0006CE  6E12               	movwf	store_back@back_trace_dist,c
  1276  0006D0  0E01               	movlw	high main@back_trace_distance
  1277  0006D2  203C               	addwfc	??_main+3,w,c
  1278  0006D4  6E13               	movwf	store_back@back_trace_dist+1,c
  1279  0006D6  C1B0  F014         	movff	main@direction,store_back@dir
  1280  0006DA  C1B1  F015         	movff	main@back_trace_counter,store_back@btc
  1281  0006DE  C1B2  F016         	movff	main@back_trace_counter+1,store_back@btc+1
  1282  0006E2  EC58  F00A         	call	_store_back	;wreg free
  1283  0006E6  C010  F1B1         	movff	?_store_back,main@back_trace_counter
  1284  0006EA  C011  F1B2         	movff	?_store_back+1,main@back_trace_counter+1
  1285  0006EE                     l3135:
  1286                           
  1287                           ;main_final_project.c: 189: }
  1288                           ;main_final_project.c: 190: forwards(&motorL, &motorR, speed_motor_medium);
  1289  0006EE  0EBF               	movlw	low main@motorL
  1290  0006F0  6E29               	movwf	forwards@m_L,c
  1291  0006F2  0E01               	movlw	high main@motorL
  1292  0006F4  6E2A               	movwf	forwards@m_L+1,c
  1293  0006F6  0EC8               	movlw	low main@motorR
  1294  0006F8  6E2B               	movwf	forwards@m_R,c
  1295  0006FA  0E01               	movlw	high main@motorR
  1296  0006FC  6E2C               	movwf	forwards@m_R+1,c
  1297  0006FE  C0FA  F02D         	movff	main@speed_motor_medium,forwards@speed
  1298  000702  ECEE  F00A         	call	_forwards	;wreg free
  1299                           
  1300                           ;main_final_project.c: 191: direction = 3;
  1301  000706  0E03               	movlw	3
  1302  000708  D041               	goto	L4
  1303  00070A                     l3139:
  1304                           
  1305                           ; BSR set to: 1
  1306                           ;main_final_project.c: 194: if (direction != 1) {
  1307  00070A  0101               	movlb	1	; () banked
  1308  00070C  05B0               	decf	main@direction& (0+255),w,b
  1309  00070E  B4D8               	btfsc	status,2,c
  1310  000710  D030               	goto	l3145
  1311                           
  1312                           ; BSR set to: 1
  1313                           ;main_final_project.c: 195: stop(&motorL, &motorR);
  1314  000712  0EBF               	movlw	low main@motorL
  1315  000714  6E25               	movwf	stop@m_L,c
  1316  000716  0E01               	movlw	high main@motorL
  1317  000718  6E26               	movwf	stop@m_L+1,c
  1318  00071A  0EC8               	movlw	low main@motorR
  1319  00071C  6E27               	movwf	stop@m_R,c
  1320  00071E  0E01               	movlw	high main@motorR
  1321  000720  6E28               	movwf	stop@m_R+1,c
  1322  000722  EC29  F00A         	call	_stop	;wreg free
  1323                           
  1324                           ;main_final_project.c: 196: back_trace_counter = store_back(&back_trace_direction[back_t
      +                          race_counter], &back_trace_distance[back_trace_counter], direction, back_trace_counter);
  1325  000726  C1B1  F039         	movff	main@back_trace_counter,??_main
  1326  00072A  C1B2  F03A         	movff	main@back_trace_counter+1,??_main+1
  1327  00072E  90D8               	bcf	status,0,c
  1328  000730  3639               	rlcf	??_main,f,c
  1329  000732  363A               	rlcf	??_main+1,f,c
  1330  000734  0E7F               	movlw	low main@back_trace_direction
  1331  000736  2439               	addwf	??_main,w,c
  1332  000738  6E10               	movwf	store_back@back_trace_dir,c
  1333  00073A  0E00               	movlw	high main@back_trace_direction
  1334  00073C  203A               	addwfc	??_main+1,w,c
  1335  00073E  6E11               	movwf	store_back@back_trace_dir+1,c
  1336  000740  C1B1  F03B         	movff	main@back_trace_counter,??_main+2
  1337  000744  C1B2  F03C         	movff	main@back_trace_counter+1,??_main+3
  1338  000748  90D8               	bcf	status,0,c
  1339  00074A  363B               	rlcf	??_main+2,f,c
  1340  00074C  363C               	rlcf	??_main+3,f,c
  1341  00074E  0E00               	movlw	low main@back_trace_distance
  1342  000750  243B               	addwf	??_main+2,w,c
  1343  000752  6E12               	movwf	store_back@back_trace_dist,c
  1344  000754  0E01               	movlw	high main@back_trace_distance
  1345  000756  203C               	addwfc	??_main+3,w,c
  1346  000758  6E13               	movwf	store_back@back_trace_dist+1,c
  1347  00075A  C1B0  F014         	movff	main@direction,store_back@dir
  1348  00075E  C1B1  F015         	movff	main@back_trace_counter,store_back@btc
  1349  000762  C1B2  F016         	movff	main@back_trace_counter+1,store_back@btc+1
  1350  000766  EC58  F00A         	call	_store_back	;wreg free
  1351  00076A  C010  F1B1         	movff	?_store_back,main@back_trace_counter
  1352  00076E  C011  F1B2         	movff	?_store_back+1,main@back_trace_counter+1
  1353  000772                     l3145:
  1354                           
  1355                           ;main_final_project.c: 197: }
  1356                           ;main_final_project.c: 198: turnLeft(&motorL, &motorR, speed_motor_low);
  1357  000772  0EBF               	movlw	low main@motorL
  1358  000774  6E29               	movwf	turnLeft@m_L,c
  1359  000776  0E01               	movlw	high main@motorL
  1360  000778  6E2A               	movwf	turnLeft@m_L+1,c
  1361  00077A  0EC8               	movlw	low main@motorR
  1362  00077C  6E2B               	movwf	turnLeft@m_R,c
  1363  00077E  0E01               	movlw	high main@motorR
  1364  000780  6E2C               	movwf	turnLeft@m_R+1,c
  1365  000782  C0FF  F02D         	movff	main@speed_motor_low,turnLeft@speed
  1366  000786  ECCD  F00A         	call	_turnLeft	;wreg free
  1367  00078A                     l3147:
  1368                           
  1369                           ;main_final_project.c: 199: direction = 1;
  1370  00078A  0E01               	movlw	1
  1371  00078C                     L4:
  1372  00078C  0101               	movlb	1	; () banked
  1373  00078E  6FB0               	movwf	main@direction& (0+255),b
  1374  000790                     l3149:
  1375  000790  0101               	movlb	1	; () banked
  1376  000792  51D1               	movf	_card_read& (0+255),w,b	;volatile
  1377  000794  B4D8               	btfsc	status,2,c
  1378  000796  D678               	goto	l3089
  1379                           
  1380                           ; BSR set to: 1
  1381                           ;main_final_project.c: 200: }
  1382                           ;main_final_project.c: 201: }
  1383                           ;main_final_project.c: 202: }
  1384                           ;main_final_project.c: 209: if (card_read == 1) {
  1385                           
  1386                           ; BSR set to: 1
  1387  000798  0101               	movlb	1	; () banked
  1388  00079A  05D1               	decf	_card_read& (0+255),w,b	;volatile
  1389  00079C  A4D8               	btfss	status,2,c
  1390  00079E  D053               	goto	l3165
  1391                           
  1392                           ; BSR set to: 1
  1393                           ;main_final_project.c: 210: stop(&motorL, &motorR);
  1394  0007A0  0EBF               	movlw	low main@motorL
  1395  0007A2  6E25               	movwf	stop@m_L,c
  1396  0007A4  0E01               	movlw	high main@motorL
  1397  0007A6  6E26               	movwf	stop@m_L+1,c
  1398  0007A8  0EC8               	movlw	low main@motorR
  1399  0007AA  6E27               	movwf	stop@m_R,c
  1400  0007AC  0E01               	movlw	high main@motorR
  1401  0007AE  6E28               	movwf	stop@m_R+1,c
  1402  0007B0  EC29  F00A         	call	_stop	;wreg free
  1403                           
  1404                           ;main_final_project.c: 213: back_trace_counter = store_back(&back_trace_direction[back_t
      +                          race_counter], &back_trace_distance[back_trace_counter], direction, back_trace_counter);
  1405  0007B4  C1B1  F039         	movff	main@back_trace_counter,??_main
  1406  0007B8  C1B2  F03A         	movff	main@back_trace_counter+1,??_main+1
  1407  0007BC  90D8               	bcf	status,0,c
  1408  0007BE  3639               	rlcf	??_main,f,c
  1409  0007C0  363A               	rlcf	??_main+1,f,c
  1410  0007C2  0E7F               	movlw	low main@back_trace_direction
  1411  0007C4  2439               	addwf	??_main,w,c
  1412  0007C6  6E10               	movwf	store_back@back_trace_dir,c
  1413  0007C8  0E00               	movlw	high main@back_trace_direction
  1414  0007CA  203A               	addwfc	??_main+1,w,c
  1415  0007CC  6E11               	movwf	store_back@back_trace_dir+1,c
  1416  0007CE  C1B1  F03B         	movff	main@back_trace_counter,??_main+2
  1417  0007D2  C1B2  F03C         	movff	main@back_trace_counter+1,??_main+3
  1418  0007D6  90D8               	bcf	status,0,c
  1419  0007D8  363B               	rlcf	??_main+2,f,c
  1420  0007DA  363C               	rlcf	??_main+3,f,c
  1421  0007DC  0E00               	movlw	low main@back_trace_distance
  1422  0007DE  243B               	addwf	??_main+2,w,c
  1423  0007E0  6E12               	movwf	store_back@back_trace_dist,c
  1424  0007E2  0E01               	movlw	high main@back_trace_distance
  1425  0007E4  203C               	addwfc	??_main+3,w,c
  1426  0007E6  6E13               	movwf	store_back@back_trace_dist+1,c
  1427  0007E8  C1B0  F014         	movff	main@direction,store_back@dir
  1428  0007EC  C1B1  F015         	movff	main@back_trace_counter,store_back@btc
  1429  0007F0  C1B2  F016         	movff	main@back_trace_counter+1,store_back@btc+1
  1430  0007F4  EC58  F00A         	call	_store_back	;wreg free
  1431  0007F8  C010  F1B1         	movff	?_store_back,main@back_trace_counter
  1432  0007FC  C011  F1B2         	movff	?_store_back+1,main@back_trace_counter+1
  1433                           
  1434                           ;main_final_project.c: 214: back_trace_counter--;
  1435  000800  0101               	movlb	1	; () banked
  1436  000802  07B1               	decf	main@back_trace_counter& (0+255),f,b
  1437  000804  A0D8               	btfss	status,0,c
  1438  000806  07B2               	decf	(main@back_trace_counter+1)& (0+255),f,b
  1439                           
  1440                           ; BSR set to: 1
  1441                           ;main_final_project.c: 215: send_signal_RFID(&string_rfid[0], &string_rfid[0]);
  1442  000808  0E3F               	movlw	low _string_rfid
  1443  00080A  6E18               	movwf	send_signal_RFID@pa,c
  1444  00080C  0E00               	movlw	high _string_rfid
  1445  00080E  6E19               	movwf	send_signal_RFID@pa+1,c
  1446  000810  0E3F               	movlw	low _string_rfid
  1447  000812  6E1A               	movwf	send_signal_RFID@dis,c
  1448  000814  0E00               	movlw	high _string_rfid
  1449  000816  6E1B               	movwf	send_signal_RFID@dis+1,c
  1450  000818  ECA1  F009         	call	_send_signal_RFID	;wreg free
  1451                           
  1452                           ;main_final_project.c: 216: check_sum(&string_rfid[0], &array_check[0], &bits_16[0], bac
      +                          k_trace_counter);
  1453  00081C  0E3F               	movlw	low _string_rfid
  1454  00081E  6E31               	movwf	check_sum@str,c
  1455  000820  0E00               	movlw	high _string_rfid
  1456  000822  6E32               	movwf	check_sum@str+1,c
  1457  000824  0E78               	movlw	low main@array_check
  1458  000826  6E33               	movwf	check_sum@arr_check,c
  1459  000828  0E01               	movlw	high main@array_check
  1460  00082A  6E34               	movwf	check_sum@arr_check+1,c
  1461  00082C  0EA4               	movlw	low main@bits_16
  1462  00082E  6E35               	movwf	check_sum@bit16,c
  1463  000830  0E01               	movlw	high main@bits_16
  1464  000832  6E36               	movwf	check_sum@bit16+1,c
  1465  000834  C1B1  F037         	movff	main@back_trace_counter,check_sum@btc
  1466  000838  C1B2  F038         	movff	main@back_trace_counter+1,check_sum@btc+1
  1467  00083C  EC18  F006         	call	_check_sum	;wreg free
  1468                           
  1469                           ;main_final_project.c: 217: card_read = 2;
  1470  000840  0E02               	movlw	2
  1471  000842  0101               	movlb	1	; () banked
  1472  000844  6FD1               	movwf	_card_read& (0+255),b	;volatile
  1473  000846                     l3165:
  1474                           
  1475                           ; BSR set to: 1
  1476                           ;main_final_project.c: 218: }
  1477                           ;main_final_project.c: 222: if (card_read == 2) {
  1478  000846  0E02               	movlw	2
  1479  000848  0101               	movlb	1	; () banked
  1480  00084A  19D1               	xorwf	_card_read& (0+255),w,b	;volatile
  1481  00084C  A4D8               	btfss	status,2,c
  1482  00084E  D60C               	goto	l3085
  1483  000850                     l3167:
  1484                           
  1485                           ; BSR set to: 1
  1486  000850  0101               	movlb	1	; () banked
  1487  000852  BFB2               	btfsc	(main@back_trace_counter+1)& (0+255),7,b
  1488  000854  D09A               	goto	l3195
  1489                           
  1490                           ; BSR set to: 1
  1491                           ;main_final_project.c: 226: TMR0H = 0;
  1492                           
  1493                           ; BSR set to: 1
  1494                           
  1495                           ; BSR set to: 1
  1496  000856  0E00               	movlw	0
  1497  000858  6ED7               	movwf	4055,c	;volatile
  1498                           
  1499                           ;main_final_project.c: 227: TMR0L = 0;
  1500  00085A  0E00               	movlw	0
  1501  00085C  6ED6               	movwf	4054,c	;volatile
  1502                           
  1503                           ;main_final_project.c: 229: while (((TMR0H << 8) | TMR0L) <= back_trace_distance[back_tr
      +                          ace_counter]) {
  1504  00085E  D067               	goto	l3187
  1505  000860                     l3173:
  1506                           
  1507                           ; BSR set to: 1
  1508                           ;main_final_project.c: 230: if (back_trace_direction[back_trace_counter] == 1) {
  1509  000860  90D8               	bcf	status,0,c
  1510  000862  0101               	movlb	1	; () banked
  1511  000864  35B1               	rlcf	main@back_trace_counter& (0+255),w,b
  1512  000866  6ED9               	movwf	fsr2l,c
  1513  000868  0101               	movlb	1	; () banked
  1514  00086A  35B2               	rlcf	(main@back_trace_counter+1)& (0+255),w,b
  1515  00086C  6EDA               	movwf	fsr2h,c
  1516  00086E  0E7F               	movlw	low main@back_trace_direction
  1517  000870  26D9               	addwf	fsr2l,f,c
  1518  000872  0E00               	movlw	high main@back_trace_direction
  1519  000874  22DA               	addwfc	fsr2h,f,c
  1520  000876  04DE               	decf	postinc2,w,c
  1521  000878  10DE               	iorwf	postinc2,w,c
  1522  00087A  A4D8               	btfss	status,2,c
  1523  00087C  D00D               	goto	l3177
  1524                           
  1525                           ; BSR set to: 1
  1526                           ;main_final_project.c: 231: turnRight(&motorL, &motorR, speed_motor_low);
  1527  00087E  0EBF               	movlw	low main@motorL
  1528  000880  6E29               	movwf	turnRight@m_L,c
  1529  000882  0E01               	movlw	high main@motorL
  1530  000884  6E2A               	movwf	turnRight@m_L+1,c
  1531  000886  0EC8               	movlw	low main@motorR
  1532  000888  6E2B               	movwf	turnRight@m_R,c
  1533  00088A  0E01               	movlw	high main@motorR
  1534  00088C  6E2C               	movwf	turnRight@m_R+1,c
  1535  00088E  C0FF  F02D         	movff	main@speed_motor_low,turnRight@speed
  1536  000892  ECAC  F00A         	call	_turnRight	;wreg free
  1537                           
  1538                           ;main_final_project.c: 232: } else if (back_trace_direction[back_trace_counter] == 2) {
  1539  000896  D04B               	goto	l3187
  1540  000898                     l3177:
  1541  000898  90D8               	bcf	status,0,c
  1542  00089A  0101               	movlb	1	; () banked
  1543  00089C  35B1               	rlcf	main@back_trace_counter& (0+255),w,b
  1544  00089E  6ED9               	movwf	fsr2l,c
  1545  0008A0  0101               	movlb	1	; () banked
  1546  0008A2  35B2               	rlcf	(main@back_trace_counter+1)& (0+255),w,b
  1547  0008A4  6EDA               	movwf	fsr2h,c
  1548  0008A6  0E7F               	movlw	low main@back_trace_direction
  1549  0008A8  26D9               	addwf	fsr2l,f,c
  1550  0008AA  0E00               	movlw	high main@back_trace_direction
  1551  0008AC  22DA               	addwfc	fsr2h,f,c
  1552  0008AE  0E02               	movlw	2
  1553  0008B0  18DE               	xorwf	postinc2,w,c
  1554  0008B2  10DE               	iorwf	postinc2,w,c
  1555  0008B4  A4D8               	btfss	status,2,c
  1556  0008B6  D00D               	goto	l3181
  1557                           
  1558                           ; BSR set to: 1
  1559                           ;main_final_project.c: 233: turnLeft(&motorL, &motorR, speed_motor_low);
  1560  0008B8  0EBF               	movlw	low main@motorL
  1561  0008BA  6E29               	movwf	turnLeft@m_L,c
  1562  0008BC  0E01               	movlw	high main@motorL
  1563  0008BE  6E2A               	movwf	turnLeft@m_L+1,c
  1564  0008C0  0EC8               	movlw	low main@motorR
  1565  0008C2  6E2B               	movwf	turnLeft@m_R,c
  1566  0008C4  0E01               	movlw	high main@motorR
  1567  0008C6  6E2C               	movwf	turnLeft@m_R+1,c
  1568  0008C8  C0FF  F02D         	movff	main@speed_motor_low,turnLeft@speed
  1569  0008CC  ECCD  F00A         	call	_turnLeft	;wreg free
  1570                           
  1571                           ;main_final_project.c: 234: } else {
  1572  0008D0  D02E               	goto	l3187
  1573  0008D2                     l3181:
  1574                           
  1575                           ;main_final_project.c: 235: if (back_trace_distance[back_trace_counter] > 100) {
  1576  0008D2  90D8               	bcf	status,0,c
  1577  0008D4  0101               	movlb	1	; () banked
  1578  0008D6  35B1               	rlcf	main@back_trace_counter& (0+255),w,b
  1579  0008D8  6ED9               	movwf	fsr2l,c
  1580  0008DA  0101               	movlb	1	; () banked
  1581  0008DC  35B2               	rlcf	(main@back_trace_counter+1)& (0+255),w,b
  1582  0008DE  6EDA               	movwf	fsr2h,c
  1583  0008E0  0E00               	movlw	low main@back_trace_distance
  1584  0008E2  26D9               	addwf	fsr2l,f,c
  1585  0008E4  0E01               	movlw	high main@back_trace_distance
  1586  0008E6  22DA               	addwfc	fsr2h,f,c
  1587  0008E8  0E01               	movlw	1
  1588  0008EA  BEDB               	btfsc	plusw2,7,c
  1589  0008EC  D014               	goto	l3185
  1590  0008EE  0E01               	movlw	1
  1591  0008F0  50DB               	movf	plusw2,w,c
  1592  0008F2  E104               	bnz	u2480
  1593  0008F4  0E65               	movlw	101
  1594  0008F6  5CDE               	subwf	postinc2,w,c
  1595  0008F8  A0D8               	btfss	status,0,c
  1596  0008FA  D00D               	goto	l3185
  1597  0008FC                     u2480:
  1598                           
  1599                           ; BSR set to: 1
  1600                           ;main_final_project.c: 236: backwards(&motorL, &motorR, speed_motor_high);
  1601  0008FC  0EBF               	movlw	low main@motorL
  1602  0008FE  6E29               	movwf	backwards@m_L,c
  1603  000900  0E01               	movlw	high main@motorL
  1604  000902  6E2A               	movwf	backwards@m_L+1,c
  1605  000904  0EC8               	movlw	low main@motorR
  1606  000906  6E2B               	movwf	backwards@m_R,c
  1607  000908  0E01               	movlw	high main@motorR
  1608  00090A  6E2C               	movwf	backwards@m_R+1,c
  1609  00090C  C0F7  F02D         	movff	main@speed_motor_high,backwards@speed
  1610  000910  EC0F  F00B         	call	_backwards	;wreg free
  1611                           
  1612                           ;main_final_project.c: 237: } else {
  1613  000914  D00C               	goto	l3187
  1614  000916                     l3185:
  1615                           
  1616                           ;main_final_project.c: 238: backwards(&motorL, &motorR, speed_motor_medium);
  1617  000916  0EBF               	movlw	low main@motorL
  1618  000918  6E29               	movwf	backwards@m_L,c
  1619  00091A  0E01               	movlw	high main@motorL
  1620  00091C  6E2A               	movwf	backwards@m_L+1,c
  1621  00091E  0EC8               	movlw	low main@motorR
  1622  000920  6E2B               	movwf	backwards@m_R,c
  1623  000922  0E01               	movlw	high main@motorR
  1624  000924  6E2C               	movwf	backwards@m_R+1,c
  1625  000926  C0FA  F02D         	movff	main@speed_motor_medium,backwards@speed
  1626  00092A  EC0F  F00B         	call	_backwards	;wreg free
  1627  00092E                     l3187:
  1628  00092E  50D6               	movf	4054,w,c	;volatile
  1629  000930  CFD7 F039          	movff	4055,??_main	;volatile
  1630  000934  6A3A               	clrf	(??_main+1)& (0+255),c
  1631  000936  C039  F03A         	movff	??_main,??_main+1
  1632  00093A  6A39               	clrf	??_main,c
  1633  00093C  1239               	iorwf	??_main,f,c
  1634  00093E  0E00               	movlw	0
  1635  000940  123A               	iorwf	??_main+1,f,c
  1636  000942  90D8               	bcf	status,0,c
  1637  000944  0101               	movlb	1	; () banked
  1638  000946  35B1               	rlcf	main@back_trace_counter& (0+255),w,b
  1639  000948  6ED9               	movwf	fsr2l,c
  1640  00094A  0101               	movlb	1	; () banked
  1641  00094C  35B2               	rlcf	(main@back_trace_counter+1)& (0+255),w,b
  1642  00094E  6EDA               	movwf	fsr2h,c
  1643  000950  0E00               	movlw	low main@back_trace_distance
  1644  000952  26D9               	addwf	fsr2l,f,c
  1645  000954  0E01               	movlw	high main@back_trace_distance
  1646  000956  22DA               	addwfc	fsr2h,f,c
  1647  000958  5039               	movf	??_main,w,c
  1648  00095A  5CDE               	subwf	postinc2,w,c
  1649  00095C  50DE               	movf	postinc2,w,c
  1650  00095E  0A80               	xorlw	128
  1651  000960  6E3D               	movwf	(??_main+4)& (0+255),c
  1652  000962  503A               	movf	??_main+1,w,c
  1653  000964  0A80               	xorlw	128
  1654  000966  583D               	subwfb	(??_main+4)& (0+255),w,c
  1655  000968  B0D8               	btfsc	status,0,c
  1656  00096A  D77A               	goto	l3173
  1657                           
  1658                           ; BSR set to: 1
  1659                           ;main_final_project.c: 239: }
  1660                           ;main_final_project.c: 241: }
  1661                           ;main_final_project.c: 242: }
  1662                           ;main_final_project.c: 243: stop(&motorL, &motorR);
  1663                           
  1664                           ; BSR set to: 1
  1665  00096C  0EBF               	movlw	low main@motorL
  1666  00096E  6E25               	movwf	stop@m_L,c
  1667  000970  0E01               	movlw	high main@motorL
  1668  000972  6E26               	movwf	stop@m_L+1,c
  1669  000974  0EC8               	movlw	low main@motorR
  1670  000976  6E27               	movwf	stop@m_R,c
  1671  000978  0E01               	movlw	high main@motorR
  1672  00097A  6E28               	movwf	stop@m_R+1,c
  1673  00097C  EC29  F00A         	call	_stop	;wreg free
  1674  000980  0101               	movlb	1	; () banked
  1675  000982  07B1               	decf	main@back_trace_counter& (0+255),f,b
  1676  000984  A0D8               	btfss	status,0,c
  1677  000986  07B2               	decf	(main@back_trace_counter+1)& (0+255),f,b
  1678  000988  D763               	goto	l3167
  1679  00098A                     l3195:
  1680                           
  1681                           ; BSR set to: 1
  1682                           ;main_final_project.c: 244: }
  1683                           ;main_final_project.c: 245: card_read = 3;
  1684  00098A  0E03               	movlw	3
  1685  00098C  0101               	movlb	1	; () banked
  1686  00098E  6FD1               	movwf	_card_read& (0+255),b	;volatile
  1687                           
  1688                           ;main_final_project.c: 246: back_trace_counter = 0;
  1689  000990  0E00               	movlw	0
  1690  000992  0101               	movlb	1	; () banked
  1691  000994  6FB2               	movwf	(main@back_trace_counter+1)& (0+255),b
  1692  000996  0E00               	movlw	0
  1693  000998  6FB1               	movwf	main@back_trace_counter& (0+255),b
  1694                           
  1695                           ;main_final_project.c: 247: direction = 0;
  1696  00099A  0E00               	movlw	0
  1697  00099C  0101               	movlb	1	; () banked
  1698  00099E  6FB0               	movwf	main@direction& (0+255),b
  1699                           
  1700                           ; BSR set to: 1
  1701                           
  1702                           ; BSR set to: 1
  1703  0009A0  D563               	goto	l3085
  1704  0009A2                     __end_of_main:
  1705                           	opt stack 0
  1706                           tblptru	equ	0xFF8
  1707                           intcon	equ	0xFF2
  1708                           intcon3	equ	0xFF0
  1709                           postinc0	equ	0xFEE
  1710                           wreg	equ	0xFE8
  1711                           postinc2	equ	0xFDE
  1712                           plusw2	equ	0xFDB
  1713                           fsr2h	equ	0xFDA
  1714                           fsr2l	equ	0xFD9
  1715                           status	equ	0xFD8
  1716                           
  1717 ;; *************** function _turnRight *****************
  1718 ;; Defined at:
  1719 ;;		line 81 in file "motor.c"
  1720 ;; Parameters:    Size  Location     Type
  1721 ;;  m_L             2   40[COMRAM] PTR struct DC_motor
  1722 ;;		 -> main@motorL(9), 
  1723 ;;  m_R             2   42[COMRAM] PTR struct DC_motor
  1724 ;;		 -> main@motorR(9), 
  1725 ;;  speed           1   44[COMRAM] unsigned char 
  1726 ;; Auto vars:     Size  Location     Type
  1727 ;;		None
  1728 ;; Return value:  Size  Location     Type
  1729 ;;                  1    wreg      void 
  1730 ;; Registers used:
  1731 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1732 ;; Tracked objects:
  1733 ;;		On entry : 0/0
  1734 ;;		On exit  : 0/0
  1735 ;;		Unchanged: 0/0
  1736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1737 ;;      Params:         5       0       0       0
  1738 ;;      Locals:         0       0       0       0
  1739 ;;      Temps:          0       0       0       0
  1740 ;;      Totals:         5       0       0       0
  1741 ;;Total ram usage:        5 bytes
  1742 ;; Hardware stack levels used:    1
  1743 ;; Hardware stack levels required when called:    4
  1744 ;; This function calls:
  1745 ;;		_setMotorFullSpeed
  1746 ;; This function is called by:
  1747 ;;		_main
  1748 ;; This function uses a non-reentrant model
  1749 ;;
  1750                           
  1751                           	psect	text1
  1752  001558                     __ptext1:
  1753                           	opt stack 0
  1754  001558                     _turnRight:
  1755                           	opt stack 26
  1756                           
  1757                           ;motor.c: 82: (m_L->direction) = 1;
  1758                           
  1759                           ; BSR set to: 1
  1760                           ;incstack = 0
  1761  001558  EE20 F001          	lfsr	2,1
  1762  00155C  5029               	movf	turnRight@m_L,w,c
  1763  00155E  26D9               	addwf	fsr2l,f,c
  1764  001560  502A               	movf	turnRight@m_L+1,w,c
  1765  001562  22DA               	addwfc	fsr2h,f,c
  1766  001564  0E01               	movlw	1
  1767  001566  6EDF               	movwf	indf2,c
  1768                           
  1769                           ;motor.c: 83: (m_R->direction) = 0;
  1770  001568  EE20 F001          	lfsr	2,1
  1771  00156C  502B               	movf	turnRight@m_R,w,c
  1772  00156E  26D9               	addwf	fsr2l,f,c
  1773  001570  502C               	movf	turnRight@m_R+1,w,c
  1774  001572  22DA               	addwfc	fsr2h,f,c
  1775  001574  0E00               	movlw	0
  1776  001576  6EDF               	movwf	indf2,c
  1777                           
  1778                           ;motor.c: 84: setMotorFullSpeed(m_L, speed);
  1779  001578  C029  F025         	movff	turnRight@m_L,setMotorFullSpeed@m
  1780  00157C  C02A  F026         	movff	turnRight@m_L+1,setMotorFullSpeed@m+1
  1781  001580  C02D  F027         	movff	turnRight@speed,setMotorFullSpeed@max_p
  1782  001584  ECDC  F00B         	call	_setMotorFullSpeed	;wreg free
  1783                           
  1784                           ;motor.c: 85: setMotorFullSpeed(m_R, speed);
  1785  001588  C02B  F025         	movff	turnRight@m_R,setMotorFullSpeed@m
  1786  00158C  C02C  F026         	movff	turnRight@m_R+1,setMotorFullSpeed@m+1
  1787  001590  C02D  F027         	movff	turnRight@speed,setMotorFullSpeed@max_p
  1788  001594  ECDC  F00B         	call	_setMotorFullSpeed	;wreg free
  1789  001598  0012               	return		;funcret
  1790  00159A                     __end_of_turnRight:
  1791                           	opt stack 0
  1792                           tblptru	equ	0xFF8
  1793                           intcon	equ	0xFF2
  1794                           intcon3	equ	0xFF0
  1795                           postinc0	equ	0xFEE
  1796                           wreg	equ	0xFE8
  1797                           indf2	equ	0xFDF
  1798                           postinc2	equ	0xFDE
  1799                           plusw2	equ	0xFDB
  1800                           fsr2h	equ	0xFDA
  1801                           fsr2l	equ	0xFD9
  1802                           status	equ	0xFD8
  1803                           
  1804 ;; *************** function _turnLeft *****************
  1805 ;; Defined at:
  1806 ;;		line 73 in file "motor.c"
  1807 ;; Parameters:    Size  Location     Type
  1808 ;;  m_L             2   40[COMRAM] PTR struct DC_motor
  1809 ;;		 -> main@motorL(9), 
  1810 ;;  m_R             2   42[COMRAM] PTR struct DC_motor
  1811 ;;		 -> main@motorR(9), 
  1812 ;;  speed           1   44[COMRAM] unsigned char 
  1813 ;; Auto vars:     Size  Location     Type
  1814 ;;		None
  1815 ;; Return value:  Size  Location     Type
  1816 ;;                  1    wreg      void 
  1817 ;; Registers used:
  1818 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1819 ;; Tracked objects:
  1820 ;;		On entry : 0/0
  1821 ;;		On exit  : 0/0
  1822 ;;		Unchanged: 0/0
  1823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1824 ;;      Params:         5       0       0       0
  1825 ;;      Locals:         0       0       0       0
  1826 ;;      Temps:          0       0       0       0
  1827 ;;      Totals:         5       0       0       0
  1828 ;;Total ram usage:        5 bytes
  1829 ;; Hardware stack levels used:    1
  1830 ;; Hardware stack levels required when called:    4
  1831 ;; This function calls:
  1832 ;;		_setMotorFullSpeed
  1833 ;; This function is called by:
  1834 ;;		_main
  1835 ;; This function uses a non-reentrant model
  1836 ;;
  1837                           
  1838                           	psect	text2
  1839  00159A                     __ptext2:
  1840                           	opt stack 0
  1841  00159A                     _turnLeft:
  1842                           	opt stack 26
  1843                           
  1844                           ;motor.c: 74: (m_L->direction) = 0;
  1845                           
  1846                           ;incstack = 0
  1847  00159A  EE20 F001          	lfsr	2,1
  1848  00159E  5029               	movf	turnLeft@m_L,w,c
  1849  0015A0  26D9               	addwf	fsr2l,f,c
  1850  0015A2  502A               	movf	turnLeft@m_L+1,w,c
  1851  0015A4  22DA               	addwfc	fsr2h,f,c
  1852  0015A6  0E00               	movlw	0
  1853  0015A8  6EDF               	movwf	indf2,c
  1854                           
  1855                           ;motor.c: 75: (m_R->direction) = 1;
  1856  0015AA  EE20 F001          	lfsr	2,1
  1857  0015AE  502B               	movf	turnLeft@m_R,w,c
  1858  0015B0  26D9               	addwf	fsr2l,f,c
  1859  0015B2  502C               	movf	turnLeft@m_R+1,w,c
  1860  0015B4  22DA               	addwfc	fsr2h,f,c
  1861  0015B6  0E01               	movlw	1
  1862  0015B8  6EDF               	movwf	indf2,c
  1863                           
  1864                           ;motor.c: 76: setMotorFullSpeed(m_L, speed);
  1865  0015BA  C029  F025         	movff	turnLeft@m_L,setMotorFullSpeed@m
  1866  0015BE  C02A  F026         	movff	turnLeft@m_L+1,setMotorFullSpeed@m+1
  1867  0015C2  C02D  F027         	movff	turnLeft@speed,setMotorFullSpeed@max_p
  1868  0015C6  ECDC  F00B         	call	_setMotorFullSpeed	;wreg free
  1869                           
  1870                           ;motor.c: 77: setMotorFullSpeed(m_R, speed);
  1871  0015CA  C02B  F025         	movff	turnLeft@m_R,setMotorFullSpeed@m
  1872  0015CE  C02C  F026         	movff	turnLeft@m_R+1,setMotorFullSpeed@m+1
  1873  0015D2  C02D  F027         	movff	turnLeft@speed,setMotorFullSpeed@max_p
  1874  0015D6  ECDC  F00B         	call	_setMotorFullSpeed	;wreg free
  1875  0015DA  0012               	return		;funcret
  1876  0015DC                     __end_of_turnLeft:
  1877                           	opt stack 0
  1878                           tblptru	equ	0xFF8
  1879                           intcon	equ	0xFF2
  1880                           intcon3	equ	0xFF0
  1881                           postinc0	equ	0xFEE
  1882                           wreg	equ	0xFE8
  1883                           indf2	equ	0xFDF
  1884                           postinc2	equ	0xFDE
  1885                           plusw2	equ	0xFDB
  1886                           fsr2h	equ	0xFDA
  1887                           fsr2l	equ	0xFD9
  1888                           status	equ	0xFD8
  1889                           
  1890 ;; *************** function _store_back *****************
  1891 ;; Defined at:
  1892 ;;		line 105 in file "motor.c"
  1893 ;; Parameters:    Size  Location     Type
  1894 ;;  back_trace_d    2   15[COMRAM] PTR int 
  1895 ;;		 -> main@back_trace_direction(120), 
  1896 ;;  back_trace_d    2   17[COMRAM] PTR int 
  1897 ;;		 -> main@back_trace_distance(120), 
  1898 ;;  dir             1   19[COMRAM] unsigned char 
  1899 ;;  btc             2   20[COMRAM] int 
  1900 ;; Auto vars:     Size  Location     Type
  1901 ;;		None
  1902 ;; Return value:  Size  Location     Type
  1903 ;;                  2   15[COMRAM] int 
  1904 ;; Registers used:
  1905 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1906 ;; Tracked objects:
  1907 ;;		On entry : 0/0
  1908 ;;		On exit  : 0/0
  1909 ;;		Unchanged: 0/0
  1910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1911 ;;      Params:         7       0       0       0
  1912 ;;      Locals:         0       0       0       0
  1913 ;;      Temps:          2       0       0       0
  1914 ;;      Totals:         9       0       0       0
  1915 ;;Total ram usage:        9 bytes
  1916 ;; Hardware stack levels used:    1
  1917 ;; Hardware stack levels required when called:    1
  1918 ;; This function calls:
  1919 ;;		Nothing
  1920 ;; This function is called by:
  1921 ;;		_main
  1922 ;; This function uses a non-reentrant model
  1923 ;;
  1924                           
  1925                           	psect	text3
  1926  0014B0                     __ptext3:
  1927                           	opt stack 0
  1928  0014B0                     _store_back:
  1929                           	opt stack 29
  1930                           
  1931                           ;motor.c: 106: if (dir != 0) {
  1932                           
  1933                           ;incstack = 0
  1934  0014B0  5014               	movf	store_back@dir,w,c
  1935  0014B2  B4D8               	btfsc	status,2,c
  1936  0014B4  D023               	goto	l2941
  1937                           
  1938                           ;motor.c: 107: *back_trace_dir = dir;
  1939  0014B6  5014               	movf	store_back@dir,w,c
  1940  0014B8  6E17               	movwf	??_store_back& (0+255),c
  1941  0014BA  6A18               	clrf	(??_store_back+1)& (0+255),c
  1942  0014BC  C010  FFD9         	movff	store_back@back_trace_dir,fsr2l
  1943  0014C0  C011  FFDA         	movff	store_back@back_trace_dir+1,fsr2h
  1944  0014C4  C017  FFDE         	movff	??_store_back,postinc2
  1945  0014C8  C018  FFDD         	movff	??_store_back+1,postdec2
  1946                           
  1947                           ;motor.c: 108: *back_trace_dist = ((TMR0H << 8) | TMR0L);
  1948  0014CC  50D6               	movf	4054,w,c	;volatile
  1949  0014CE  CFD7 F017          	movff	4055,??_store_back	;volatile
  1950  0014D2  6A18               	clrf	(??_store_back+1)& (0+255),c
  1951  0014D4  C017  F018         	movff	??_store_back,??_store_back+1
  1952  0014D8  6A17               	clrf	??_store_back,c
  1953  0014DA  1217               	iorwf	??_store_back,f,c
  1954  0014DC  0E00               	movlw	0
  1955  0014DE  1218               	iorwf	??_store_back+1,f,c
  1956  0014E0  C012  FFD9         	movff	store_back@back_trace_dist,fsr2l
  1957  0014E4  C013  FFDA         	movff	store_back@back_trace_dist+1,fsr2h
  1958  0014E8  C017  FFDE         	movff	??_store_back,postinc2
  1959  0014EC  C018  FFDD         	movff	??_store_back+1,postdec2
  1960                           
  1961                           ;motor.c: 109: btc++;
  1962  0014F0  4A15               	infsnz	store_back@btc,f,c
  1963  0014F2  2A16               	incf	store_back@btc+1,f,c
  1964                           
  1965                           ;motor.c: 110: TMR0H = 0;
  1966  0014F4  0E00               	movlw	0
  1967  0014F6  6ED7               	movwf	4055,c	;volatile
  1968                           
  1969                           ;motor.c: 111: TMR0L = 0;
  1970  0014F8  0E00               	movlw	0
  1971  0014FA  6ED6               	movwf	4054,c	;volatile
  1972  0014FC                     l2941:
  1973                           
  1974                           ;motor.c: 112: }
  1975                           ;motor.c: 113: return btc;
  1976  0014FC  C015  F010         	movff	store_back@btc,?_store_back
  1977  001500  C016  F011         	movff	store_back@btc+1,?_store_back+1
  1978  001504  0012               	return	
  1979  001506                     __end_of_store_back:
  1980                           	opt stack 0
  1981                           tblptru	equ	0xFF8
  1982                           intcon	equ	0xFF2
  1983                           intcon3	equ	0xFF0
  1984                           postinc0	equ	0xFEE
  1985                           wreg	equ	0xFE8
  1986                           indf2	equ	0xFDF
  1987                           postinc2	equ	0xFDE
  1988                           postdec2	equ	0xFDD
  1989                           plusw2	equ	0xFDB
  1990                           fsr2h	equ	0xFDA
  1991                           fsr2l	equ	0xFD9
  1992                           status	equ	0xFD8
  1993                           
  1994 ;; *************** function _stop *****************
  1995 ;; Defined at:
  1996 ;;		line 59 in file "motor.c"
  1997 ;; Parameters:    Size  Location     Type
  1998 ;;  m_L             2   36[COMRAM] PTR struct DC_motor
  1999 ;;		 -> main@motorL(9), 
  2000 ;;  m_R             2   38[COMRAM] PTR struct DC_motor
  2001 ;;		 -> main@motorR(9), 
  2002 ;; Auto vars:     Size  Location     Type
  2003 ;;		None
  2004 ;; Return value:  Size  Location     Type
  2005 ;;                  1    wreg      void 
  2006 ;; Registers used:
  2007 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2008 ;; Tracked objects:
  2009 ;;		On entry : 0/0
  2010 ;;		On exit  : 0/0
  2011 ;;		Unchanged: 0/0
  2012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2013 ;;      Params:         4       0       0       0
  2014 ;;      Locals:         0       0       0       0
  2015 ;;      Temps:          0       0       0       0
  2016 ;;      Totals:         4       0       0       0
  2017 ;;Total ram usage:        4 bytes
  2018 ;; Hardware stack levels used:    1
  2019 ;; Hardware stack levels required when called:    3
  2020 ;; This function calls:
  2021 ;;		_setMotorPWM
  2022 ;; This function is called by:
  2023 ;;		_main
  2024 ;; This function uses a non-reentrant model
  2025 ;;
  2026                           
  2027                           	psect	text4
  2028  001452                     __ptext4:
  2029                           	opt stack 0
  2030  001452                     _stop:
  2031                           	opt stack 27
  2032                           
  2033                           ;incstack = 0
  2034  001452  D00F               	goto	l2919
  2035  001454                     l2913:
  2036                           
  2037                           ;motor.c: 61: {
  2038                           ;motor.c: 62: setMotorPWM(m_R);
  2039  001454  C027  F01E         	movff	stop@m_R,setMotorPWM@m
  2040  001458  C028  F01F         	movff	stop@m_R+1,setMotorPWM@m+1
  2041  00145C  EC0E  F008         	call	_setMotorPWM	;wreg free
  2042                           
  2043                           ;motor.c: 63: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2044  001460  0E21               	movlw	33
  2045  001462                     u2517:
  2046  001462  2EE8               	decfsz	wreg,f,c
  2047  001464  D7FE               	goto	u2517
  2048  001466  F000               	nop	
  2049  001468  C027  FFD9         	movff	stop@m_R,fsr2l
  2050  00146C  C028  FFDA         	movff	stop@m_R+1,fsr2h
  2051  001470  06DF               	decf	indf2,f,c
  2052  001472                     l2919:
  2053  001472  C027  FFD9         	movff	stop@m_R,fsr2l
  2054  001476  C028  FFDA         	movff	stop@m_R+1,fsr2h
  2055  00147A  50DF               	movf	indf2,w,c
  2056  00147C  B4D8               	btfsc	status,2,c
  2057  00147E  D010               	goto	l2927
  2058  001480  D7E9               	goto	l2913
  2059  001482                     l2921:
  2060                           
  2061                           ;motor.c: 66: {
  2062                           ;motor.c: 67: setMotorPWM(m_L);
  2063  001482  C025  F01E         	movff	stop@m_L,setMotorPWM@m
  2064  001486  C026  F01F         	movff	stop@m_L+1,setMotorPWM@m+1
  2065  00148A  EC0E  F008         	call	_setMotorPWM	;wreg free
  2066                           
  2067                           ;motor.c: 68: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2068  00148E  0E21               	movlw	33
  2069  001490                     u2527:
  2070  001490  2EE8               	decfsz	wreg,f,c
  2071  001492  D7FE               	goto	u2527
  2072  001494  F000               	nop	
  2073  001496  C025  FFD9         	movff	stop@m_L,fsr2l
  2074  00149A  C026  FFDA         	movff	stop@m_L+1,fsr2h
  2075  00149E  06DF               	decf	indf2,f,c
  2076  0014A0                     l2927:
  2077  0014A0  C025  FFD9         	movff	stop@m_L,fsr2l
  2078  0014A4  C026  FFDA         	movff	stop@m_L+1,fsr2h
  2079  0014A8  50DF               	movf	indf2,w,c
  2080  0014AA  B4D8               	btfsc	status,2,c
  2081  0014AC  0012               	return	
  2082  0014AE  D7E9               	goto	l2921
  2083  0014B0                     __end_of_stop:
  2084                           	opt stack 0
  2085                           tblptru	equ	0xFF8
  2086                           intcon	equ	0xFF2
  2087                           intcon3	equ	0xFF0
  2088                           postinc0	equ	0xFEE
  2089                           wreg	equ	0xFE8
  2090                           indf2	equ	0xFDF
  2091                           postinc2	equ	0xFDE
  2092                           postdec2	equ	0xFDD
  2093                           plusw2	equ	0xFDB
  2094                           fsr2h	equ	0xFDA
  2095                           fsr2l	equ	0xFD9
  2096                           status	equ	0xFD8
  2097                           
  2098 ;; *************** function _send_signal_RFID *****************
  2099 ;; Defined at:
  2100 ;;		line 15 in file "RFID.c"
  2101 ;; Parameters:    Size  Location     Type
  2102 ;;  pa              2   23[COMRAM] PTR unsigned char 
  2103 ;;		 -> string_rfid(17), 
  2104 ;;  dis             2   25[COMRAM] PTR unsigned char 
  2105 ;;		 -> string_rfid(17), 
  2106 ;; Auto vars:     Size  Location     Type
  2107 ;;		None
  2108 ;; Return value:  Size  Location     Type
  2109 ;;                  1    wreg      void 
  2110 ;; Registers used:
  2111 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2112 ;; Tracked objects:
  2113 ;;		On entry : 0/0
  2114 ;;		On exit  : 0/0
  2115 ;;		Unchanged: 0/0
  2116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2117 ;;      Params:         4       0       0       0
  2118 ;;      Locals:         0       0       0       0
  2119 ;;      Temps:          6       0       0       0
  2120 ;;      Totals:        10       0       0       0
  2121 ;;Total ram usage:       10 bytes
  2122 ;; Hardware stack levels used:    1
  2123 ;; Hardware stack levels required when called:    5
  2124 ;; This function calls:
  2125 ;;		_SendLCD
  2126 ;;		_SetLine
  2127 ;;		_clear_LCD
  2128 ;; This function is called by:
  2129 ;;		_main
  2130 ;; This function uses a non-reentrant model
  2131 ;;
  2132                           
  2133                           	psect	text5
  2134  001342                     __ptext5:
  2135                           	opt stack 0
  2136  001342                     _send_signal_RFID:
  2137                           	opt stack 25
  2138                           
  2139                           ;RFID.c: 17: clear_LCD();
  2140                           
  2141                           ;incstack = 0
  2142  001342  EC04  F00C         	call	_clear_LCD	;wreg free
  2143                           
  2144                           ;RFID.c: 18: SetLine(1);
  2145  001346  0E00               	movlw	0
  2146  001348  6E17               	movwf	SetLine@line+1,c
  2147  00134A  0E01               	movlw	1
  2148  00134C  6E16               	movwf	SetLine@line,c
  2149  00134E  EC8F  F00B         	call	_SetLine	;wreg free
  2150                           
  2151                           ;RFID.c: 19: while (*pa != 0x03) {
  2152  001352  D002               	goto	l2961
  2153  001354                     l2959:
  2154                           
  2155                           ;RFID.c: 20: pa++;
  2156  001354  4A18               	infsnz	send_signal_RFID@pa,f,c
  2157  001356  2A19               	incf	send_signal_RFID@pa+1,f,c
  2158  001358                     l2961:
  2159  001358  C018  FFD9         	movff	send_signal_RFID@pa,fsr2l
  2160  00135C  C019  FFDA         	movff	send_signal_RFID@pa+1,fsr2h
  2161  001360  0E03               	movlw	3
  2162  001362  18DE               	xorwf	postinc2,w,c
  2163  001364  B4D8               	btfsc	status,2,c
  2164  001366  D014               	goto	l2969
  2165  001368  D7F5               	goto	l2959
  2166  00136A                     l2963:
  2167                           
  2168                           ;RFID.c: 26: SendLCD(*(dis + 1), 1);
  2169  00136A  0E00               	movlw	0
  2170  00136C  6E14               	movwf	SendLCD@type+1,c
  2171  00136E  0E01               	movlw	1
  2172  001370  6E13               	movwf	SendLCD@type,c
  2173  001372  EE20 F001          	lfsr	2,1
  2174  001376  501A               	movf	send_signal_RFID@dis,w,c
  2175  001378  26D9               	addwf	fsr2l,f,c
  2176  00137A  501B               	movf	send_signal_RFID@dis+1,w,c
  2177  00137C  22DA               	addwfc	fsr2h,f,c
  2178  00137E  50DF               	movf	indf2,w,c
  2179  001380  ECC5  F00B         	call	_SendLCD
  2180                           
  2181                           ;RFID.c: 27: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2182  001384  0E21               	movlw	33
  2183  001386                     u2537:
  2184  001386  2EE8               	decfsz	wreg,f,c
  2185  001388  D7FE               	goto	u2537
  2186  00138A  F000               	nop	
  2187                           
  2188                           ;RFID.c: 29: dis++;
  2189  00138C  4A1A               	infsnz	send_signal_RFID@dis,f,c
  2190  00138E  2A1B               	incf	send_signal_RFID@dis+1,f,c
  2191  001390                     l2969:
  2192  001390  0EFE               	movlw	254
  2193  001392  6E1C               	movwf	??_send_signal_RFID& (0+255),c
  2194  001394  0EFF               	movlw	255
  2195  001396  6E1D               	movwf	(??_send_signal_RFID+1)& (0+255),c
  2196  001398  C018  F01E         	movff	send_signal_RFID@pa,??_send_signal_RFID+2
  2197  00139C  C019  F01F         	movff	send_signal_RFID@pa+1,??_send_signal_RFID+3
  2198  0013A0  501C               	movf	??_send_signal_RFID,w,c
  2199  0013A2  261E               	addwf	??_send_signal_RFID+2,f,c
  2200  0013A4  501D               	movf	??_send_signal_RFID+1,w,c
  2201  0013A6  221F               	addwfc	??_send_signal_RFID+3,f,c
  2202  0013A8  0E01               	movlw	1
  2203  0013AA  241A               	addwf	send_signal_RFID@dis,w,c
  2204  0013AC  6E20               	movwf	(??_send_signal_RFID+4)& (0+255),c
  2205  0013AE  0E00               	movlw	0
  2206  0013B0  201B               	addwfc	send_signal_RFID@dis+1,w,c
  2207  0013B2  6E21               	movwf	(??_send_signal_RFID+5)& (0+255),c
  2208  0013B4  501E               	movf	??_send_signal_RFID+2,w,c
  2209  0013B6  5C20               	subwf	??_send_signal_RFID+4,w,c
  2210  0013B8  501F               	movf	??_send_signal_RFID+3,w,c
  2211  0013BA  5821               	subwfb	??_send_signal_RFID+5,w,c
  2212  0013BC  A0D8               	btfss	status,0,c
  2213  0013BE  D7D5               	goto	l2963
  2214                           
  2215                           ;RFID.c: 30: }
  2216                           ;RFID.c: 31: SetLine(2);
  2217  0013C0  0E00               	movlw	0
  2218  0013C2  6E17               	movwf	SetLine@line+1,c
  2219  0013C4  0E02               	movlw	2
  2220  0013C6  6E16               	movwf	SetLine@line,c
  2221  0013C8  EC8F  F00B         	call	_SetLine	;wreg free
  2222  0013CC  0012               	return		;funcret
  2223  0013CE                     __end_of_send_signal_RFID:
  2224                           	opt stack 0
  2225                           tblptru	equ	0xFF8
  2226                           intcon	equ	0xFF2
  2227                           intcon3	equ	0xFF0
  2228                           postinc0	equ	0xFEE
  2229                           wreg	equ	0xFE8
  2230                           indf2	equ	0xFDF
  2231                           postinc2	equ	0xFDE
  2232                           postdec2	equ	0xFDD
  2233                           plusw2	equ	0xFDB
  2234                           fsr2h	equ	0xFDA
  2235                           fsr2l	equ	0xFD9
  2236                           status	equ	0xFD8
  2237                           
  2238 ;; *************** function _initPWM *****************
  2239 ;; Defined at:
  2240 ;;		line 48 in file "motor.c"
  2241 ;; Parameters:    Size  Location     Type
  2242 ;;		None
  2243 ;; Auto vars:     Size  Location     Type
  2244 ;;		None
  2245 ;; Return value:  Size  Location     Type
  2246 ;;                  1    wreg      void 
  2247 ;; Registers used:
  2248 ;;		wreg, status,2
  2249 ;; Tracked objects:
  2250 ;;		On entry : 0/0
  2251 ;;		On exit  : 0/0
  2252 ;;		Unchanged: 0/0
  2253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2254 ;;      Params:         0       0       0       0
  2255 ;;      Locals:         0       0       0       0
  2256 ;;      Temps:          0       0       0       0
  2257 ;;      Totals:         0       0       0       0
  2258 ;;Total ram usage:        0 bytes
  2259 ;; Hardware stack levels used:    1
  2260 ;; Hardware stack levels required when called:    1
  2261 ;; This function calls:
  2262 ;;		Nothing
  2263 ;; This function is called by:
  2264 ;;		_main
  2265 ;; This function uses a non-reentrant model
  2266 ;;
  2267                           
  2268                           	psect	text6
  2269  001846                     __ptext6:
  2270                           	opt stack 0
  2271  001846                     _initPWM:
  2272                           	opt stack 29
  2273                           
  2274                           ;motor.c: 49: TRISB = 0;
  2275                           
  2276                           ;incstack = 0
  2277  001846  0E00               	movlw	0
  2278  001848  6E93               	movwf	3987,c	;volatile
  2279                           
  2280                           ;motor.c: 50: PTCON0 = 0b00000000;
  2281  00184A  0E00               	movlw	0
  2282  00184C  6E7F               	movwf	3967,c	;volatile
  2283                           
  2284                           ;motor.c: 51: PTCON1 = 0b10000000;
  2285  00184E  0E80               	movlw	128
  2286  001850  6E7E               	movwf	3966,c	;volatile
  2287                           
  2288                           ;motor.c: 52: PWMCON0 = 0b01101111;
  2289  001852  0E6F               	movlw	111
  2290  001854  6E6F               	movwf	3951,c	;volatile
  2291                           
  2292                           ;motor.c: 53: PWMCON1 = 0x00;
  2293  001856  0E00               	movlw	0
  2294  001858  6E6E               	movwf	3950,c	;volatile
  2295                           
  2296                           ;motor.c: 54: PTPERL = 0b11000111;
  2297  00185A  0EC7               	movlw	199
  2298  00185C  6E7B               	movwf	3963,c	;volatile
  2299                           
  2300                           ;motor.c: 55: PTPERH = 0b00000000;
  2301  00185E  0E00               	movlw	0
  2302  001860  6E7A               	movwf	3962,c	;volatile
  2303  001862  0012               	return		;funcret
  2304  001864                     __end_of_initPWM:
  2305                           	opt stack 0
  2306                           tblptru	equ	0xFF8
  2307                           intcon	equ	0xFF2
  2308                           intcon3	equ	0xFF0
  2309                           postinc0	equ	0xFEE
  2310                           wreg	equ	0xFE8
  2311                           indf2	equ	0xFDF
  2312                           postinc2	equ	0xFDE
  2313                           postdec2	equ	0xFDD
  2314                           plusw2	equ	0xFDB
  2315                           fsr2h	equ	0xFDA
  2316                           fsr2l	equ	0xFD9
  2317                           status	equ	0xFD8
  2318                           
  2319 ;; *************** function _forwards *****************
  2320 ;; Defined at:
  2321 ;;		line 89 in file "motor.c"
  2322 ;; Parameters:    Size  Location     Type
  2323 ;;  m_L             2   40[COMRAM] PTR struct DC_motor
  2324 ;;		 -> main@motorL(9), 
  2325 ;;  m_R             2   42[COMRAM] PTR struct DC_motor
  2326 ;;		 -> main@motorR(9), 
  2327 ;;  speed           1   44[COMRAM] unsigned char 
  2328 ;; Auto vars:     Size  Location     Type
  2329 ;;		None
  2330 ;; Return value:  Size  Location     Type
  2331 ;;                  1    wreg      void 
  2332 ;; Registers used:
  2333 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2334 ;; Tracked objects:
  2335 ;;		On entry : 0/0
  2336 ;;		On exit  : 0/0
  2337 ;;		Unchanged: 0/0
  2338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2339 ;;      Params:         5       0       0       0
  2340 ;;      Locals:         0       0       0       0
  2341 ;;      Temps:          0       0       0       0
  2342 ;;      Totals:         5       0       0       0
  2343 ;;Total ram usage:        5 bytes
  2344 ;; Hardware stack levels used:    1
  2345 ;; Hardware stack levels required when called:    4
  2346 ;; This function calls:
  2347 ;;		_setMotorFullSpeed
  2348 ;; This function is called by:
  2349 ;;		_main
  2350 ;; This function uses a non-reentrant model
  2351 ;;
  2352                           
  2353                           	psect	text7
  2354  0015DC                     __ptext7:
  2355                           	opt stack 0
  2356  0015DC                     _forwards:
  2357                           	opt stack 26
  2358                           
  2359                           ;motor.c: 90: (m_L->direction) = 1;
  2360                           
  2361                           ;incstack = 0
  2362  0015DC  EE20 F001          	lfsr	2,1
  2363  0015E0  5029               	movf	forwards@m_L,w,c
  2364  0015E2  26D9               	addwf	fsr2l,f,c
  2365  0015E4  502A               	movf	forwards@m_L+1,w,c
  2366  0015E6  22DA               	addwfc	fsr2h,f,c
  2367  0015E8  0E01               	movlw	1
  2368  0015EA  6EDF               	movwf	indf2,c
  2369                           
  2370                           ;motor.c: 91: (m_R->direction) = 1;
  2371  0015EC  EE20 F001          	lfsr	2,1
  2372  0015F0  502B               	movf	forwards@m_R,w,c
  2373  0015F2  26D9               	addwf	fsr2l,f,c
  2374  0015F4  502C               	movf	forwards@m_R+1,w,c
  2375  0015F6  22DA               	addwfc	fsr2h,f,c
  2376  0015F8  0E01               	movlw	1
  2377  0015FA  6EDF               	movwf	indf2,c
  2378                           
  2379                           ;motor.c: 92: setMotorFullSpeed(m_L, speed);
  2380  0015FC  C029  F025         	movff	forwards@m_L,setMotorFullSpeed@m
  2381  001600  C02A  F026         	movff	forwards@m_L+1,setMotorFullSpeed@m+1
  2382  001604  C02D  F027         	movff	forwards@speed,setMotorFullSpeed@max_p
  2383  001608  ECDC  F00B         	call	_setMotorFullSpeed	;wreg free
  2384                           
  2385                           ;motor.c: 93: setMotorFullSpeed(m_R, speed);
  2386  00160C  C02B  F025         	movff	forwards@m_R,setMotorFullSpeed@m
  2387  001610  C02C  F026         	movff	forwards@m_R+1,setMotorFullSpeed@m+1
  2388  001614  C02D  F027         	movff	forwards@speed,setMotorFullSpeed@max_p
  2389  001618  ECDC  F00B         	call	_setMotorFullSpeed	;wreg free
  2390  00161C  0012               	return		;funcret
  2391  00161E                     __end_of_forwards:
  2392                           	opt stack 0
  2393                           tblptru	equ	0xFF8
  2394                           intcon	equ	0xFF2
  2395                           intcon3	equ	0xFF0
  2396                           postinc0	equ	0xFEE
  2397                           wreg	equ	0xFE8
  2398                           indf2	equ	0xFDF
  2399                           postinc2	equ	0xFDE
  2400                           postdec2	equ	0xFDD
  2401                           plusw2	equ	0xFDB
  2402                           fsr2h	equ	0xFDA
  2403                           fsr2l	equ	0xFD9
  2404                           status	equ	0xFD8
  2405                           
  2406 ;; *************** function _check_sum *****************
  2407 ;; Defined at:
  2408 ;;		line 36 in file "RFID.c"
  2409 ;; Parameters:    Size  Location     Type
  2410 ;;  str             2   48[COMRAM] PTR unsigned char 
  2411 ;;		 -> string_rfid(17), 
  2412 ;;  arr_check       2   50[COMRAM] PTR unsigned char 
  2413 ;;		 -> main@array_check(12), 
  2414 ;;  bit16           2   52[COMRAM] PTR int 
  2415 ;;		 -> main@bits_16(12), 
  2416 ;;  btc             2   54[COMRAM] int 
  2417 ;; Auto vars:     Size  Location     Type
  2418 ;;  j               1   30[BANK0 ] unsigned char 
  2419 ;;  buf_cs         16   10[BANK0 ] unsigned char [16]
  2420 ;;  i               2   28[BANK0 ] int 
  2421 ;;  xor_value       2   26[BANK0 ] int 
  2422 ;; Return value:  Size  Location     Type
  2423 ;;                  1    wreg      void 
  2424 ;; Registers used:
  2425 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2426 ;; Tracked objects:
  2427 ;;		On entry : 0/0
  2428 ;;		On exit  : 0/0
  2429 ;;		Unchanged: 0/0
  2430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2431 ;;      Params:         8       0       0       0
  2432 ;;      Locals:         0      21       0       0
  2433 ;;      Temps:          0      10       0       0
  2434 ;;      Totals:         8      31       0       0
  2435 ;;Total ram usage:       39 bytes
  2436 ;; Hardware stack levels used:    1
  2437 ;; Hardware stack levels required when called:    5
  2438 ;; This function calls:
  2439 ;;		_LCD_string
  2440 ;;		_sprintf
  2441 ;; This function is called by:
  2442 ;;		_main
  2443 ;; This function uses a non-reentrant model
  2444 ;;
  2445                           
  2446                           	psect	text8
  2447  000C30                     __ptext8:
  2448                           	opt stack 0
  2449  000C30                     _check_sum:
  2450                           	opt stack 25
  2451                           
  2452                           ;RFID.c: 39: int i = 0;
  2453                           
  2454                           ;incstack = 0
  2455  000C30  0E00               	movlw	0
  2456  000C32  0100               	movlb	0	; () banked
  2457  000C34  6F7D               	movwf	(check_sum@i+1)& (0+255),b
  2458  000C36  0E00               	movlw	0
  2459  000C38  6F7C               	movwf	check_sum@i& (0+255),b
  2460                           
  2461                           ;RFID.c: 40: while (i < 12) {
  2462  000C3A  D037               	goto	l2993
  2463  000C3C                     l2975:
  2464                           
  2465                           ; BSR set to: 0
  2466                           ;RFID.c: 41: if ((*(str + 1) >> 6) == 1) {
  2467  000C3C  EE20 F001          	lfsr	2,1
  2468  000C40  5031               	movf	check_sum@str,w,c
  2469  000C42  26D9               	addwf	fsr2l,f,c
  2470  000C44  5032               	movf	check_sum@str+1,w,c
  2471  000C46  22DA               	addwfc	fsr2h,f,c
  2472  000C48  50DF               	movf	indf2,w,c
  2473  000C4A  0100               	movlb	0	; () banked
  2474  000C4C  6F60               	movwf	??_check_sum& (0+255),b
  2475  000C4E  0E06               	movlw	6
  2476  000C50  0100               	movlb	0	; () banked
  2477  000C52  6F61               	movwf	(??_check_sum+1)& (0+255),b
  2478  000C54                     u2255:
  2479  000C54  0100               	movlb	0	; () banked
  2480  000C56  90D8               	bcf	status,0,c
  2481  000C58  3360               	rrcf	??_check_sum& (0+255),f,b
  2482  000C5A  0100               	movlb	0	; () banked
  2483  000C5C  2F61               	decfsz	(??_check_sum+1)& (0+255),f,b
  2484  000C5E  D7FA               	goto	u2255
  2485  000C60  0100               	movlb	0	; () banked
  2486  000C62  0560               	decf	??_check_sum& (0+255),w,b
  2487  000C64  A4D8               	btfss	status,2,c
  2488  000C66  D010               	goto	l2985
  2489                           
  2490                           ; BSR set to: 0
  2491                           ;RFID.c: 42: *(arr_check) = *(str + 1) - 55;
  2492  000C68  EE20 F001          	lfsr	2,1
  2493  000C6C  5031               	movf	check_sum@str,w,c
  2494  000C6E  26D9               	addwf	fsr2l,f,c
  2495  000C70  5032               	movf	check_sum@str+1,w,c
  2496  000C72  22DA               	addwfc	fsr2h,f,c
  2497  000C74  50DF               	movf	indf2,w,c
  2498  000C76  0FC9               	addlw	201
  2499  000C78  D00F               	goto	L5
  2500  000C7A                     l2979:
  2501                           
  2502                           ; BSR set to: 0
  2503                           ;RFID.c: 43: str++;
  2504  000C7A  4A31               	infsnz	check_sum@str,f,c
  2505  000C7C  2A32               	incf	check_sum@str+1,f,c
  2506  000C7E  D012               	goto	l2989
  2507  000C80                     l2983:
  2508                           
  2509                           ; BSR set to: 0
  2510                           ;RFID.c: 45: i++;
  2511  000C80  0100               	movlb	0	; () banked
  2512  000C82  4B7C               	infsnz	check_sum@i& (0+255),f,b
  2513  000C84  2B7D               	incf	(check_sum@i+1)& (0+255),f,b
  2514                           
  2515                           ;RFID.c: 46: } else {
  2516  000C86  D011               	goto	l2993
  2517  000C88                     l2985:
  2518                           
  2519                           ; BSR set to: 0
  2520                           ;RFID.c: 47: *(arr_check) = *(str + 1) - 48;
  2521  000C88  EE20 F001          	lfsr	2,1
  2522  000C8C  5031               	movf	check_sum@str,w,c
  2523  000C8E  26D9               	addwf	fsr2l,f,c
  2524  000C90  5032               	movf	check_sum@str+1,w,c
  2525  000C92  22DA               	addwfc	fsr2h,f,c
  2526  000C94  50DF               	movf	indf2,w,c
  2527  000C96  0FD0               	addlw	208
  2528  000C98                     L5:
  2529  000C98  C033  FFD9         	movff	check_sum@arr_check,fsr2l
  2530  000C9C  C034  FFDA         	movff	check_sum@arr_check+1,fsr2h
  2531  000CA0  6EDF               	movwf	indf2,c
  2532  000CA2  D7EB               	goto	l2979
  2533  000CA4                     l2989:
  2534                           
  2535                           ; BSR set to: 0
  2536                           ;RFID.c: 49: arr_check++;
  2537  000CA4  4A33               	infsnz	check_sum@arr_check,f,c
  2538  000CA6  2A34               	incf	check_sum@arr_check+1,f,c
  2539  000CA8  D7EB               	goto	l2983
  2540  000CAA                     l2993:
  2541                           
  2542                           ; BSR set to: 0
  2543  000CAA  0100               	movlb	0	; () banked
  2544  000CAC  BF7D               	btfsc	(check_sum@i+1)& (0+255),7,b
  2545  000CAE  D7C6               	goto	l2975
  2546  000CB0  0100               	movlb	0	; () banked
  2547  000CB2  517D               	movf	(check_sum@i+1)& (0+255),w,b
  2548  000CB4  E105               	bnz	l2995
  2549  000CB6  0E0C               	movlw	12
  2550  000CB8  0100               	movlb	0	; () banked
  2551  000CBA  5D7C               	subwf	check_sum@i& (0+255),w,b
  2552  000CBC  A0D8               	btfss	status,0,c
  2553  000CBE  D7BE               	goto	l2975
  2554  000CC0                     l2995:
  2555                           
  2556                           ; BSR set to: 0
  2557                           ;RFID.c: 51: }
  2558                           ;RFID.c: 52: }
  2559                           ;RFID.c: 54: for (char j = 0; j < 6; j++) {
  2560  000CC0  0E00               	movlw	0
  2561  000CC2  0100               	movlb	0	; () banked
  2562  000CC4  6F7E               	movwf	check_sum@j& (0+255),b
  2563  000CC6                     l2997:
  2564                           
  2565                           ; BSR set to: 0
  2566  000CC6  0E05               	movlw	5
  2567  000CC8  0100               	movlb	0	; () banked
  2568  000CCA  657E               	cpfsgt	check_sum@j& (0+255),b
  2569  000CCC  D001               	goto	l3001
  2570  000CCE  D04A               	goto	l3009
  2571  000CD0                     l3001:
  2572                           
  2573                           ; BSR set to: 0
  2574                           ;RFID.c: 55: *bit16 = (*(arr_check + 2*j - 12) << 8) | *(arr_check + 2*j + 1 - 12);
  2575  000CD0  0100               	movlb	0	; () banked
  2576  000CD2  517E               	movf	check_sum@j& (0+255),w,b
  2577  000CD4  0D02               	mullw	2
  2578  000CD6  C033  F060         	movff	check_sum@arr_check,??_check_sum
  2579  000CDA  C034  F061         	movff	check_sum@arr_check+1,??_check_sum+1
  2580  000CDE  50F3               	movf	prodl,w,c
  2581  000CE0  0100               	movlb	0	; () banked
  2582  000CE2  2760               	addwf	??_check_sum& (0+255),f,b
  2583  000CE4  50F4               	movf	prodh,w,c
  2584  000CE6  0100               	movlb	0	; () banked
  2585  000CE8  2361               	addwfc	(??_check_sum+1)& (0+255),f,b
  2586  000CEA  0EF4               	movlw	244
  2587  000CEC  0100               	movlb	0	; () banked
  2588  000CEE  2560               	addwf	??_check_sum& (0+255),w,b
  2589  000CF0  6ED9               	movwf	fsr2l,c
  2590  000CF2  0EFF               	movlw	255
  2591  000CF4  0100               	movlb	0	; () banked
  2592  000CF6  2161               	addwfc	(??_check_sum+1)& (0+255),w,b
  2593  000CF8  6EDA               	movwf	fsr2h,c
  2594  000CFA  50DF               	movf	indf2,w,c
  2595  000CFC  0100               	movlb	0	; () banked
  2596  000CFE  6F62               	movwf	(??_check_sum+2)& (0+255),b
  2597  000D00  0100               	movlb	0	; () banked
  2598  000D02  5162               	movf	(??_check_sum+2)& (0+255),w,b
  2599  000D04  0100               	movlb	0	; () banked
  2600  000D06  6F64               	movwf	(??_check_sum+4)& (0+255),b
  2601  000D08  6B63               	clrf	(??_check_sum+3)& (0+255),b
  2602  000D0A  0100               	movlb	0	; () banked
  2603  000D0C  517E               	movf	check_sum@j& (0+255),w,b
  2604  000D0E  0D02               	mullw	2
  2605  000D10  C033  F065         	movff	check_sum@arr_check,??_check_sum+5
  2606  000D14  C034  F066         	movff	check_sum@arr_check+1,??_check_sum+6
  2607  000D18  50F3               	movf	prodl,w,c
  2608  000D1A  0100               	movlb	0	; () banked
  2609  000D1C  2765               	addwf	(??_check_sum+5)& (0+255),f,b
  2610  000D1E  50F4               	movf	prodh,w,c
  2611  000D20  0100               	movlb	0	; () banked
  2612  000D22  2366               	addwfc	(??_check_sum+6)& (0+255),f,b
  2613  000D24  0EF5               	movlw	245
  2614  000D26  0100               	movlb	0	; () banked
  2615  000D28  2565               	addwf	(??_check_sum+5)& (0+255),w,b
  2616  000D2A  6ED9               	movwf	fsr2l,c
  2617  000D2C  0EFF               	movlw	255
  2618  000D2E  0100               	movlb	0	; () banked
  2619  000D30  2166               	addwfc	(??_check_sum+6)& (0+255),w,b
  2620  000D32  6EDA               	movwf	fsr2h,c
  2621  000D34  50DF               	movf	indf2,w,c
  2622  000D36  0100               	movlb	0	; () banked
  2623  000D38  6F67               	movwf	(??_check_sum+7)& (0+255),b
  2624  000D3A  0100               	movlb	0	; () banked
  2625  000D3C  5167               	movf	(??_check_sum+7)& (0+255),w,b
  2626  000D3E  0100               	movlb	0	; () banked
  2627  000D40  1363               	iorwf	(??_check_sum+3)& (0+255),f,b
  2628  000D42  0E00               	movlw	0
  2629  000D44  1364               	iorwf	(??_check_sum+4)& (0+255),f,b
  2630  000D46  C035  FFD9         	movff	check_sum@bit16,fsr2l
  2631  000D4A  C036  FFDA         	movff	check_sum@bit16+1,fsr2h
  2632  000D4E  C063  FFDE         	movff	??_check_sum+3,postinc2
  2633  000D52  C064  FFDD         	movff	??_check_sum+4,postdec2
  2634                           
  2635                           ; BSR set to: 0
  2636                           ;RFID.c: 56: bit16++;
  2637  000D56  0E02               	movlw	2
  2638  000D58  2635               	addwf	check_sum@bit16,f,c
  2639  000D5A  0E00               	movlw	0
  2640  000D5C  2236               	addwfc	check_sum@bit16+1,f,c
  2641                           
  2642                           ; BSR set to: 0
  2643  000D5E  0100               	movlb	0	; () banked
  2644  000D60  2B7E               	incf	check_sum@j& (0+255),f,b
  2645  000D62  D7B1               	goto	l2997
  2646  000D64                     l3009:
  2647                           
  2648                           ; BSR set to: 0
  2649                           ;RFID.c: 57: }
  2650                           ;RFID.c: 59: int xor_value = ((*(bit16 - 6))^(*(bit16 - 5))^(*(bit16 - 4))^(*(bit16 - 3)
      +                          )^(*(bit16 - 2)));
  2651  000D64  EE2F F0FC          	lfsr	2,-4
  2652  000D68  5035               	movf	check_sum@bit16,w,c
  2653  000D6A  26D9               	addwf	fsr2l,f,c
  2654  000D6C  5036               	movf	check_sum@bit16+1,w,c
  2655  000D6E  22DA               	addwfc	fsr2h,f,c
  2656  000D70  CFDE F060          	movff	postinc2,??_check_sum
  2657  000D74  CFDD F061          	movff	postdec2,??_check_sum+1
  2658  000D78  EE2F F0FA          	lfsr	2,-6
  2659  000D7C  5035               	movf	check_sum@bit16,w,c
  2660  000D7E  26D9               	addwf	fsr2l,f,c
  2661  000D80  5036               	movf	check_sum@bit16+1,w,c
  2662  000D82  22DA               	addwfc	fsr2h,f,c
  2663  000D84  CFDE F062          	movff	postinc2,??_check_sum+2
  2664  000D88  CFDD F063          	movff	postdec2,??_check_sum+3
  2665  000D8C  EE2F F0F8          	lfsr	2,-8
  2666  000D90  5035               	movf	check_sum@bit16,w,c
  2667  000D92  26D9               	addwf	fsr2l,f,c
  2668  000D94  5036               	movf	check_sum@bit16+1,w,c
  2669  000D96  22DA               	addwfc	fsr2h,f,c
  2670  000D98  CFDE F064          	movff	postinc2,??_check_sum+4
  2671  000D9C  CFDD F065          	movff	postdec2,??_check_sum+5
  2672  000DA0  EE2F F0F6          	lfsr	2,-10
  2673  000DA4  5035               	movf	check_sum@bit16,w,c
  2674  000DA6  26D9               	addwf	fsr2l,f,c
  2675  000DA8  5036               	movf	check_sum@bit16+1,w,c
  2676  000DAA  22DA               	addwfc	fsr2h,f,c
  2677  000DAC  CFDE F066          	movff	postinc2,??_check_sum+6
  2678  000DB0  CFDD F067          	movff	postdec2,??_check_sum+7
  2679  000DB4  EE2F F0F4          	lfsr	2,-12
  2680  000DB8  5035               	movf	check_sum@bit16,w,c
  2681  000DBA  26D9               	addwf	fsr2l,f,c
  2682  000DBC  5036               	movf	check_sum@bit16+1,w,c
  2683  000DBE  22DA               	addwfc	fsr2h,f,c
  2684  000DC0  CFDE F068          	movff	postinc2,??_check_sum+8
  2685  000DC4  CFDD F069          	movff	postdec2,??_check_sum+9
  2686  000DC8  0100               	movlb	0	; () banked
  2687  000DCA  5166               	movf	(??_check_sum+6)& (0+255),w,b
  2688  000DCC  0100               	movlb	0	; () banked
  2689  000DCE  1B68               	xorwf	(??_check_sum+8)& (0+255),f,b
  2690  000DD0  0100               	movlb	0	; () banked
  2691  000DD2  5167               	movf	(??_check_sum+7)& (0+255),w,b
  2692  000DD4  0100               	movlb	0	; () banked
  2693  000DD6  1B69               	xorwf	(??_check_sum+9)& (0+255),f,b
  2694  000DD8  0100               	movlb	0	; () banked
  2695  000DDA  5164               	movf	(??_check_sum+4)& (0+255),w,b
  2696  000DDC  0100               	movlb	0	; () banked
  2697  000DDE  1B68               	xorwf	(??_check_sum+8)& (0+255),f,b
  2698  000DE0  0100               	movlb	0	; () banked
  2699  000DE2  5165               	movf	(??_check_sum+5)& (0+255),w,b
  2700  000DE4  0100               	movlb	0	; () banked
  2701  000DE6  1B69               	xorwf	(??_check_sum+9)& (0+255),f,b
  2702  000DE8  0100               	movlb	0	; () banked
  2703  000DEA  5162               	movf	(??_check_sum+2)& (0+255),w,b
  2704  000DEC  0100               	movlb	0	; () banked
  2705  000DEE  1B68               	xorwf	(??_check_sum+8)& (0+255),f,b
  2706  000DF0  0100               	movlb	0	; () banked
  2707  000DF2  5163               	movf	(??_check_sum+3)& (0+255),w,b
  2708  000DF4  0100               	movlb	0	; () banked
  2709  000DF6  1B69               	xorwf	(??_check_sum+9)& (0+255),f,b
  2710  000DF8  0100               	movlb	0	; () banked
  2711  000DFA  5160               	movf	??_check_sum& (0+255),w,b
  2712  000DFC  0100               	movlb	0	; () banked
  2713  000DFE  1968               	xorwf	(??_check_sum+8)& (0+255),w,b
  2714  000E00  0100               	movlb	0	; () banked
  2715  000E02  6F7A               	movwf	check_sum@xor_value& (0+255),b
  2716  000E04  0100               	movlb	0	; () banked
  2717  000E06  5161               	movf	(??_check_sum+1)& (0+255),w,b
  2718  000E08  0100               	movlb	0	; () banked
  2719  000E0A  1969               	xorwf	(??_check_sum+9)& (0+255),w,b
  2720  000E0C  0100               	movlb	0	; () banked
  2721  000E0E  6F7B               	movwf	(check_sum@xor_value+1)& (0+255),b
  2722                           
  2723                           ;RFID.c: 61: char buf_cs[16];
  2724                           ;RFID.c: 62: if (xor_value == *(bit16-1)) {
  2725  000E10  EE2F F0FE          	lfsr	2,-2
  2726  000E14  5035               	movf	check_sum@bit16,w,c
  2727  000E16  26D9               	addwf	fsr2l,f,c
  2728  000E18  5036               	movf	check_sum@bit16+1,w,c
  2729  000E1A  22DA               	addwfc	fsr2h,f,c
  2730  000E1C  0100               	movlb	0	; () banked
  2731  000E1E  517A               	movf	check_sum@xor_value& (0+255),w,b
  2732  000E20  18DE               	xorwf	postinc2,w,c
  2733  000E22  E11A               	bnz	l3015
  2734  000E24  0100               	movlb	0	; () banked
  2735  000E26  517B               	movf	(check_sum@xor_value+1)& (0+255),w,b
  2736  000E28  18DE               	xorwf	postinc2,w,c
  2737  000E2A  A4D8               	btfss	status,2,c
  2738  000E2C  D015               	goto	l3015
  2739                           
  2740                           ; BSR set to: 0
  2741                           ;RFID.c: 63: sprintf(buf_cs, "CS CORRECT %d", btc);
  2742  000E2E  0E6A               	movlw	low check_sum@buf_cs
  2743  000E30  6E1C               	movwf	sprintf@sp,c
  2744  000E32  0E00               	movlw	high check_sum@buf_cs
  2745  000E34  6E1D               	movwf	sprintf@sp+1,c
  2746  000E36  0E1B               	movlw	low STR_3
  2747  000E38  6E1E               	movwf	sprintf@f,c
  2748  000E3A  0E03               	movlw	high STR_3
  2749  000E3C  6E1F               	movwf	sprintf@f+1,c
  2750  000E3E  C037  F020         	movff	check_sum@btc,?_sprintf+4
  2751  000E42  C038  F021         	movff	check_sum@btc+1,?_sprintf+5
  2752  000E46  ECD1  F004         	call	_sprintf	;wreg free
  2753                           
  2754                           ;RFID.c: 64: LCD_string(buf_cs);
  2755  000E4A  0E6A               	movlw	low check_sum@buf_cs
  2756  000E4C  6E16               	movwf	LCD_string@string,c
  2757  000E4E  0E00               	movlw	high check_sum@buf_cs
  2758  000E50  6E17               	movwf	LCD_string@string+1,c
  2759  000E52  ECAB  F00B         	call	_LCD_string	;wreg free
  2760                           
  2761                           ;RFID.c: 65: } else {
  2762  000E56  0012               	return	
  2763  000E58                     l3015:
  2764                           
  2765                           ;RFID.c: 66: sprintf(buf_cs, "CS INCORRECT %d", btc);
  2766  000E58  0E6A               	movlw	low check_sum@buf_cs
  2767  000E5A  6E1C               	movwf	sprintf@sp,c
  2768  000E5C  0E00               	movlw	high check_sum@buf_cs
  2769  000E5E  6E1D               	movwf	sprintf@sp+1,c
  2770  000E60  0E0B               	movlw	low STR_4
  2771  000E62  6E1E               	movwf	sprintf@f,c
  2772  000E64  0E03               	movlw	high STR_4
  2773  000E66  6E1F               	movwf	sprintf@f+1,c
  2774  000E68  C037  F020         	movff	check_sum@btc,?_sprintf+4
  2775  000E6C  C038  F021         	movff	check_sum@btc+1,?_sprintf+5
  2776  000E70  ECD1  F004         	call	_sprintf	;wreg free
  2777                           
  2778                           ;RFID.c: 67: LCD_string(buf_cs);
  2779  000E74  0E6A               	movlw	low check_sum@buf_cs
  2780  000E76  6E16               	movwf	LCD_string@string,c
  2781  000E78  0E00               	movlw	high check_sum@buf_cs
  2782  000E7A  6E17               	movwf	LCD_string@string+1,c
  2783  000E7C  ECAB  F00B         	call	_LCD_string	;wreg free
  2784  000E80  0012               	return	
  2785  000E82                     __end_of_check_sum:
  2786                           	opt stack 0
  2787                           tblptru	equ	0xFF8
  2788                           prodh	equ	0xFF4
  2789                           prodl	equ	0xFF3
  2790                           intcon	equ	0xFF2
  2791                           intcon3	equ	0xFF0
  2792                           postinc0	equ	0xFEE
  2793                           wreg	equ	0xFE8
  2794                           indf2	equ	0xFDF
  2795                           postinc2	equ	0xFDE
  2796                           postdec2	equ	0xFDD
  2797                           plusw2	equ	0xFDB
  2798                           fsr2h	equ	0xFDA
  2799                           fsr2l	equ	0xFD9
  2800                           status	equ	0xFD8
  2801                           
  2802 ;; *************** function _backwards *****************
  2803 ;; Defined at:
  2804 ;;		line 97 in file "motor.c"
  2805 ;; Parameters:    Size  Location     Type
  2806 ;;  m_L             2   40[COMRAM] PTR struct DC_motor
  2807 ;;		 -> main@motorL(9), 
  2808 ;;  m_R             2   42[COMRAM] PTR struct DC_motor
  2809 ;;		 -> main@motorR(9), 
  2810 ;;  speed           1   44[COMRAM] unsigned char 
  2811 ;; Auto vars:     Size  Location     Type
  2812 ;;		None
  2813 ;; Return value:  Size  Location     Type
  2814 ;;                  1    wreg      void 
  2815 ;; Registers used:
  2816 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2817 ;; Tracked objects:
  2818 ;;		On entry : 0/0
  2819 ;;		On exit  : 0/0
  2820 ;;		Unchanged: 0/0
  2821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2822 ;;      Params:         5       0       0       0
  2823 ;;      Locals:         0       0       0       0
  2824 ;;      Temps:          0       0       0       0
  2825 ;;      Totals:         5       0       0       0
  2826 ;;Total ram usage:        5 bytes
  2827 ;; Hardware stack levels used:    1
  2828 ;; Hardware stack levels required when called:    4
  2829 ;; This function calls:
  2830 ;;		_setMotorFullSpeed
  2831 ;; This function is called by:
  2832 ;;		_main
  2833 ;; This function uses a non-reentrant model
  2834 ;;
  2835                           
  2836                           	psect	text9
  2837  00161E                     __ptext9:
  2838                           	opt stack 0
  2839  00161E                     _backwards:
  2840                           	opt stack 26
  2841                           
  2842                           ;motor.c: 98: (m_L->direction) = 0;
  2843                           
  2844                           ;incstack = 0
  2845  00161E  EE20 F001          	lfsr	2,1
  2846  001622  5029               	movf	backwards@m_L,w,c
  2847  001624  26D9               	addwf	fsr2l,f,c
  2848  001626  502A               	movf	backwards@m_L+1,w,c
  2849  001628  22DA               	addwfc	fsr2h,f,c
  2850  00162A  0E00               	movlw	0
  2851  00162C  6EDF               	movwf	indf2,c
  2852                           
  2853                           ;motor.c: 99: (m_R->direction) = 0;
  2854  00162E  EE20 F001          	lfsr	2,1
  2855  001632  502B               	movf	backwards@m_R,w,c
  2856  001634  26D9               	addwf	fsr2l,f,c
  2857  001636  502C               	movf	backwards@m_R+1,w,c
  2858  001638  22DA               	addwfc	fsr2h,f,c
  2859  00163A  0E00               	movlw	0
  2860  00163C  6EDF               	movwf	indf2,c
  2861                           
  2862                           ;motor.c: 100: setMotorFullSpeed(m_L, speed);
  2863  00163E  C029  F025         	movff	backwards@m_L,setMotorFullSpeed@m
  2864  001642  C02A  F026         	movff	backwards@m_L+1,setMotorFullSpeed@m+1
  2865  001646  C02D  F027         	movff	backwards@speed,setMotorFullSpeed@max_p
  2866  00164A  ECDC  F00B         	call	_setMotorFullSpeed	;wreg free
  2867                           
  2868                           ;motor.c: 101: setMotorFullSpeed(m_R, speed);
  2869  00164E  C02B  F025         	movff	backwards@m_R,setMotorFullSpeed@m
  2870  001652  C02C  F026         	movff	backwards@m_R+1,setMotorFullSpeed@m+1
  2871  001656  C02D  F027         	movff	backwards@speed,setMotorFullSpeed@max_p
  2872  00165A  ECDC  F00B         	call	_setMotorFullSpeed	;wreg free
  2873  00165E  0012               	return		;funcret
  2874  001660                     __end_of_backwards:
  2875                           	opt stack 0
  2876                           tblptru	equ	0xFF8
  2877                           prodh	equ	0xFF4
  2878                           prodl	equ	0xFF3
  2879                           intcon	equ	0xFF2
  2880                           intcon3	equ	0xFF0
  2881                           postinc0	equ	0xFEE
  2882                           wreg	equ	0xFE8
  2883                           indf2	equ	0xFDF
  2884                           postinc2	equ	0xFDE
  2885                           postdec2	equ	0xFDD
  2886                           plusw2	equ	0xFDB
  2887                           fsr2h	equ	0xFDA
  2888                           fsr2l	equ	0xFD9
  2889                           status	equ	0xFD8
  2890                           
  2891 ;; *************** function _setMotorFullSpeed *****************
  2892 ;; Defined at:
  2893 ;;		line 41 in file "motor.c"
  2894 ;; Parameters:    Size  Location     Type
  2895 ;;  m               2   36[COMRAM] PTR struct DC_motor
  2896 ;;		 -> main@motorR(9), main@motorL(9), 
  2897 ;;  max_p           1   38[COMRAM] unsigned char 
  2898 ;; Auto vars:     Size  Location     Type
  2899 ;;		None
  2900 ;; Return value:  Size  Location     Type
  2901 ;;                  1    wreg      void 
  2902 ;; Registers used:
  2903 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2904 ;; Tracked objects:
  2905 ;;		On entry : 0/0
  2906 ;;		On exit  : 0/0
  2907 ;;		Unchanged: 0/0
  2908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2909 ;;      Params:         3       0       0       0
  2910 ;;      Locals:         0       0       0       0
  2911 ;;      Temps:          1       0       0       0
  2912 ;;      Totals:         4       0       0       0
  2913 ;;Total ram usage:        4 bytes
  2914 ;; Hardware stack levels used:    1
  2915 ;; Hardware stack levels required when called:    3
  2916 ;; This function calls:
  2917 ;;		_setMotorPWM
  2918 ;; This function is called by:
  2919 ;;		_turnLeft
  2920 ;;		_turnRight
  2921 ;;		_forwards
  2922 ;;		_backwards
  2923 ;; This function uses a non-reentrant model
  2924 ;;
  2925                           
  2926                           	psect	text10
  2927  0017B8                     __ptext10:
  2928                           	opt stack 0
  2929  0017B8                     _setMotorFullSpeed:
  2930                           	opt stack 26
  2931                           
  2932                           ;incstack = 0
  2933  0017B8  D00B               	goto	l2773
  2934  0017BA                     l2769:
  2935                           
  2936                           ;motor.c: 43: setMotorPWM(m);
  2937  0017BA  C025  F01E         	movff	setMotorFullSpeed@m,setMotorPWM@m
  2938  0017BE  C026  F01F         	movff	setMotorFullSpeed@m+1,setMotorPWM@m+1
  2939  0017C2  EC0E  F008         	call	_setMotorPWM	;wreg free
  2940  0017C6  C025  FFD9         	movff	setMotorFullSpeed@m,fsr2l
  2941  0017CA  C026  FFDA         	movff	setMotorFullSpeed@m+1,fsr2h
  2942  0017CE  2ADF               	incf	indf2,f,c
  2943  0017D0                     l2773:
  2944  0017D0  C025  FFD9         	movff	setMotorFullSpeed@m,fsr2l
  2945  0017D4  C026  FFDA         	movff	setMotorFullSpeed@m+1,fsr2h
  2946  0017D8  5027               	movf	setMotorFullSpeed@max_p,w,c
  2947  0017DA  5CDE               	subwf	postinc2,w,c
  2948  0017DC  B0D8               	btfsc	status,0,c
  2949  0017DE  0012               	return	
  2950  0017E0  D7EC               	goto	l2769
  2951  0017E2                     __end_of_setMotorFullSpeed:
  2952                           	opt stack 0
  2953                           tblptru	equ	0xFF8
  2954                           prodh	equ	0xFF4
  2955                           prodl	equ	0xFF3
  2956                           intcon	equ	0xFF2
  2957                           intcon3	equ	0xFF0
  2958                           postinc0	equ	0xFEE
  2959                           wreg	equ	0xFE8
  2960                           indf2	equ	0xFDF
  2961                           postinc2	equ	0xFDE
  2962                           postdec2	equ	0xFDD
  2963                           plusw2	equ	0xFDB
  2964                           fsr2h	equ	0xFDA
  2965                           fsr2l	equ	0xFD9
  2966                           status	equ	0xFD8
  2967                           
  2968 ;; *************** function _setMotorPWM *****************
  2969 ;; Defined at:
  2970 ;;		line 18 in file "motor.c"
  2971 ;; Parameters:    Size  Location     Type
  2972 ;;  m               2   29[COMRAM] PTR struct DC_motor
  2973 ;;		 -> main@motorR(9), main@motorL(9), 
  2974 ;; Auto vars:     Size  Location     Type
  2975 ;;  PWMduty         2   34[COMRAM] int 
  2976 ;; Return value:  Size  Location     Type
  2977 ;;                  1    wreg      void 
  2978 ;; Registers used:
  2979 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2980 ;; Tracked objects:
  2981 ;;		On entry : 0/0
  2982 ;;		On exit  : 0/0
  2983 ;;		Unchanged: 0/0
  2984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2985 ;;      Params:         2       0       0       0
  2986 ;;      Locals:         2       0       0       0
  2987 ;;      Temps:          3       0       0       0
  2988 ;;      Totals:         7       0       0       0
  2989 ;;Total ram usage:        7 bytes
  2990 ;; Hardware stack levels used:    1
  2991 ;; Hardware stack levels required when called:    2
  2992 ;; This function calls:
  2993 ;;		___awdiv
  2994 ;;		___wmul
  2995 ;; This function is called by:
  2996 ;;		_setMotorFullSpeed
  2997 ;;		_stop
  2998 ;; This function uses a non-reentrant model
  2999 ;;
  3000                           
  3001                           	psect	text11
  3002  00101C                     __ptext11:
  3003                           	opt stack 0
  3004  00101C                     _setMotorPWM:
  3005                           	opt stack 26
  3006                           
  3007                           ;motor.c: 19: int PWMduty;
  3008                           ;motor.c: 21: if ((m->direction) == 1) {
  3009                           
  3010                           ;incstack = 0
  3011  00101C  EE20 F001          	lfsr	2,1
  3012  001020  501E               	movf	setMotorPWM@m,w,c
  3013  001022  26D9               	addwf	fsr2l,f,c
  3014  001024  501F               	movf	setMotorPWM@m+1,w,c
  3015  001026  22DA               	addwfc	fsr2h,f,c
  3016  001028  04DE               	decf	postinc2,w,c
  3017  00102A  A4D8               	btfss	status,2,c
  3018  00102C  D034               	goto	l2555
  3019                           
  3020                           ;motor.c: 23: PWMduty = m->PWMperiod - ((int) (m->power)*(m->PWMperiod)) / 100;
  3021  00102E  EE20 F007          	lfsr	2,7
  3022  001032  501E               	movf	setMotorPWM@m,w,c
  3023  001034  26D9               	addwf	fsr2l,f,c
  3024  001036  501F               	movf	setMotorPWM@m+1,w,c
  3025  001038  22DA               	addwfc	fsr2h,f,c
  3026  00103A  CFDE F020          	movff	postinc2,??_setMotorPWM
  3027  00103E  CFDD F021          	movff	postdec2,??_setMotorPWM+1
  3028  001042  C01E  FFD9         	movff	setMotorPWM@m,fsr2l
  3029  001046  C01F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  3030  00104A  50DF               	movf	indf2,w,c
  3031  00104C  6E22               	movwf	(??_setMotorPWM+2)& (0+255),c
  3032  00104E  5022               	movf	??_setMotorPWM+2,w,c
  3033  001050  6E10               	movwf	___wmul@multiplier,c
  3034  001052  6A11               	clrf	___wmul@multiplier+1,c
  3035  001054  EE20 F007          	lfsr	2,7
  3036  001058  501E               	movf	setMotorPWM@m,w,c
  3037  00105A  26D9               	addwf	fsr2l,f,c
  3038  00105C  501F               	movf	setMotorPWM@m+1,w,c
  3039  00105E  22DA               	addwfc	fsr2h,f,c
  3040  001060  CFDE F012          	movff	postinc2,___wmul@multiplicand
  3041  001064  CFDD F013          	movff	postdec2,___wmul@multiplicand+1
  3042  001068  ECF1  F00B         	call	___wmul	;wreg free
  3043  00106C  C010  F016         	movff	?___wmul,___awdiv@dividend
  3044  001070  C011  F017         	movff	?___wmul+1,___awdiv@dividend+1
  3045  001074  0E00               	movlw	0
  3046  001076  6E19               	movwf	___awdiv@divisor+1,c
  3047  001078  0E64               	movlw	100
  3048  00107A  6E18               	movwf	___awdiv@divisor,c
  3049  00107C  ECE7  F009         	call	___awdiv	;wreg free
  3050  001080  1E16               	comf	?___awdiv,f,c
  3051  001082  1E17               	comf	?___awdiv+1,f,c
  3052  001084  4A16               	infsnz	?___awdiv,f,c
  3053  001086  2A17               	incf	?___awdiv+1,f,c
  3054  001088  5020               	movf	??_setMotorPWM,w,c
  3055  00108A  2416               	addwf	?___awdiv,w,c
  3056  00108C  6E23               	movwf	setMotorPWM@PWMduty,c
  3057  00108E  5021               	movf	??_setMotorPWM+1,w,c
  3058  001090  2017               	addwfc	?___awdiv+1,w,c
  3059  001092  6E24               	movwf	setMotorPWM@PWMduty+1,c
  3060                           
  3061                           ;motor.c: 24: } else {
  3062  001094  D023               	goto	l2557
  3063  001096                     l2555:
  3064                           
  3065                           ;motor.c: 26: PWMduty = ((int) (m->power)*(m->PWMperiod)) / 100;
  3066  001096  C01E  FFD9         	movff	setMotorPWM@m,fsr2l
  3067  00109A  C01F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  3068  00109E  50DF               	movf	indf2,w,c
  3069  0010A0  6E20               	movwf	??_setMotorPWM& (0+255),c
  3070  0010A2  5020               	movf	??_setMotorPWM,w,c
  3071  0010A4  6E10               	movwf	___wmul@multiplier,c
  3072  0010A6  6A11               	clrf	___wmul@multiplier+1,c
  3073  0010A8  EE20 F007          	lfsr	2,7
  3074  0010AC  501E               	movf	setMotorPWM@m,w,c
  3075  0010AE  26D9               	addwf	fsr2l,f,c
  3076  0010B0  501F               	movf	setMotorPWM@m+1,w,c
  3077  0010B2  22DA               	addwfc	fsr2h,f,c
  3078  0010B4  CFDE F012          	movff	postinc2,___wmul@multiplicand
  3079  0010B8  CFDD F013          	movff	postdec2,___wmul@multiplicand+1
  3080  0010BC  ECF1  F00B         	call	___wmul	;wreg free
  3081  0010C0  C010  F016         	movff	?___wmul,___awdiv@dividend
  3082  0010C4  C011  F017         	movff	?___wmul+1,___awdiv@dividend+1
  3083  0010C8  0E00               	movlw	0
  3084  0010CA  6E19               	movwf	___awdiv@divisor+1,c
  3085  0010CC  0E64               	movlw	100
  3086  0010CE  6E18               	movwf	___awdiv@divisor,c
  3087  0010D0  ECE7  F009         	call	___awdiv	;wreg free
  3088  0010D4  C016  F023         	movff	?___awdiv,setMotorPWM@PWMduty
  3089  0010D8  C017  F024         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  3090  0010DC                     l2557:
  3091                           
  3092                           ;motor.c: 27: }
  3093                           ;motor.c: 29: PWMduty = (PWMduty << 2);
  3094  0010DC  C023  F020         	movff	setMotorPWM@PWMduty,??_setMotorPWM
  3095  0010E0  C024  F021         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+1
  3096  0010E4  90D8               	bcf	status,0,c
  3097  0010E6  3620               	rlcf	??_setMotorPWM,f,c
  3098  0010E8  3621               	rlcf	??_setMotorPWM+1,f,c
  3099  0010EA  90D8               	bcf	status,0,c
  3100  0010EC  3620               	rlcf	??_setMotorPWM,f,c
  3101  0010EE  3621               	rlcf	??_setMotorPWM+1,f,c
  3102  0010F0  C020  F023         	movff	??_setMotorPWM,setMotorPWM@PWMduty
  3103  0010F4  C021  F024         	movff	??_setMotorPWM+1,setMotorPWM@PWMduty+1
  3104                           
  3105                           ;motor.c: 30: *(m->dutyLowByte) = PWMduty & 0xFF;
  3106  0010F8  EE20 F002          	lfsr	2,2
  3107  0010FC  501E               	movf	setMotorPWM@m,w,c
  3108  0010FE  26D9               	addwf	fsr2l,f,c
  3109  001100  501F               	movf	setMotorPWM@m+1,w,c
  3110  001102  22DA               	addwfc	fsr2h,f,c
  3111  001104  CFDE F020          	movff	postinc2,??_setMotorPWM
  3112  001108  CFDD F021          	movff	postdec2,??_setMotorPWM+1
  3113  00110C  C020  FFD9         	movff	??_setMotorPWM,fsr2l
  3114  001110  C021  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3115  001114  C023  FFDF         	movff	setMotorPWM@PWMduty,indf2
  3116                           
  3117                           ;motor.c: 31: *(m->dutyHighByte) = (PWMduty >> 8) & 0x3F;
  3118  001118  EE20 F004          	lfsr	2,4
  3119  00111C  501E               	movf	setMotorPWM@m,w,c
  3120  00111E  26D9               	addwf	fsr2l,f,c
  3121  001120  501F               	movf	setMotorPWM@m+1,w,c
  3122  001122  22DA               	addwfc	fsr2h,f,c
  3123  001124  CFDE F020          	movff	postinc2,??_setMotorPWM
  3124  001128  CFDD F021          	movff	postdec2,??_setMotorPWM+1
  3125  00112C  C020  FFD9         	movff	??_setMotorPWM,fsr2l
  3126  001130  C021  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3127  001134  5024               	movf	setMotorPWM@PWMduty+1,w,c
  3128  001136  0B3F               	andlw	63
  3129  001138  6EDF               	movwf	indf2,c
  3130                           
  3131                           ;motor.c: 33: if (m->direction == 1) {
  3132  00113A  EE20 F001          	lfsr	2,1
  3133  00113E  501E               	movf	setMotorPWM@m,w,c
  3134  001140  26D9               	addwf	fsr2l,f,c
  3135  001142  501F               	movf	setMotorPWM@m+1,w,c
  3136  001144  22DA               	addwfc	fsr2h,f,c
  3137  001146  04DE               	decf	postinc2,w,c
  3138  001148  A4D8               	btfss	status,2,c
  3139  00114A  D014               	goto	l2567
  3140                           
  3141                           ;motor.c: 34: LATB = LATB | (1 << (m->dir_pin));
  3142  00114C  EE20 F006          	lfsr	2,6
  3143  001150  501E               	movf	setMotorPWM@m,w,c
  3144  001152  26D9               	addwf	fsr2l,f,c
  3145  001154  501F               	movf	setMotorPWM@m+1,w,c
  3146  001156  22DA               	addwfc	fsr2h,f,c
  3147  001158  50DF               	movf	indf2,w,c
  3148  00115A  6E20               	movwf	??_setMotorPWM& (0+255),c
  3149  00115C  0E01               	movlw	1
  3150  00115E  6E21               	movwf	(??_setMotorPWM+1)& (0+255),c
  3151  001160  2A20               	incf	??_setMotorPWM,f,c
  3152  001162  D002               	goto	u1824
  3153  001164                     u1825:
  3154  001164  90D8               	bcf	status,0,c
  3155  001166  3621               	rlcf	??_setMotorPWM+1,f,c
  3156  001168                     u1824:
  3157  001168  2E20               	decfsz	??_setMotorPWM,f,c
  3158  00116A  D7FC               	goto	u1825
  3159  00116C  5021               	movf	??_setMotorPWM+1,w,c
  3160  00116E  108A               	iorwf	3978,w,c	;volatile
  3161  001170  6E8A               	movwf	3978,c	;volatile
  3162                           
  3163                           ;motor.c: 35: } else {
  3164  001172  0012               	return	
  3165  001174                     l2567:
  3166                           
  3167                           ;motor.c: 36: LATB = LATB & (~(1 << (m->dir_pin)));
  3168  001174  EE20 F006          	lfsr	2,6
  3169  001178  501E               	movf	setMotorPWM@m,w,c
  3170  00117A  26D9               	addwf	fsr2l,f,c
  3171  00117C  501F               	movf	setMotorPWM@m+1,w,c
  3172  00117E  22DA               	addwfc	fsr2h,f,c
  3173  001180  50DF               	movf	indf2,w,c
  3174  001182  6E20               	movwf	??_setMotorPWM& (0+255),c
  3175  001184  0E01               	movlw	1
  3176  001186  6E21               	movwf	(??_setMotorPWM+1)& (0+255),c
  3177  001188  2A20               	incf	??_setMotorPWM,f,c
  3178  00118A  D002               	goto	u1834
  3179  00118C                     u1835:
  3180  00118C  90D8               	bcf	status,0,c
  3181  00118E  3621               	rlcf	??_setMotorPWM+1,f,c
  3182  001190                     u1834:
  3183  001190  2E20               	decfsz	??_setMotorPWM,f,c
  3184  001192  D7FC               	goto	u1835
  3185  001194  5021               	movf	??_setMotorPWM+1,w,c
  3186  001196  0AFF               	xorlw	255
  3187  001198  148A               	andwf	3978,w,c	;volatile
  3188  00119A  6E8A               	movwf	3978,c	;volatile
  3189  00119C  0012               	return	
  3190  00119E                     __end_of_setMotorPWM:
  3191                           	opt stack 0
  3192                           tblptru	equ	0xFF8
  3193                           prodh	equ	0xFF4
  3194                           prodl	equ	0xFF3
  3195                           intcon	equ	0xFF2
  3196                           intcon3	equ	0xFF0
  3197                           postinc0	equ	0xFEE
  3198                           wreg	equ	0xFE8
  3199                           indf2	equ	0xFDF
  3200                           postinc2	equ	0xFDE
  3201                           postdec2	equ	0xFDD
  3202                           plusw2	equ	0xFDB
  3203                           fsr2h	equ	0xFDA
  3204                           fsr2l	equ	0xFD9
  3205                           status	equ	0xFD8
  3206                           
  3207 ;; *************** function _TMR5_init *****************
  3208 ;; Defined at:
  3209 ;;		line 4 in file "IR.c"
  3210 ;; Parameters:    Size  Location     Type
  3211 ;;		None
  3212 ;; Auto vars:     Size  Location     Type
  3213 ;;		None
  3214 ;; Return value:  Size  Location     Type
  3215 ;;                  1    wreg      void 
  3216 ;; Registers used:
  3217 ;;		wreg, status,2
  3218 ;; Tracked objects:
  3219 ;;		On entry : 0/0
  3220 ;;		On exit  : 0/0
  3221 ;;		Unchanged: 0/0
  3222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3223 ;;      Params:         0       0       0       0
  3224 ;;      Locals:         0       0       0       0
  3225 ;;      Temps:          0       0       0       0
  3226 ;;      Totals:         0       0       0       0
  3227 ;;Total ram usage:        0 bytes
  3228 ;; Hardware stack levels used:    1
  3229 ;; Hardware stack levels required when called:    1
  3230 ;; This function calls:
  3231 ;;		Nothing
  3232 ;; This function is called by:
  3233 ;;		_main
  3234 ;; This function uses a non-reentrant model
  3235 ;;
  3236                           
  3237                           	psect	text12
  3238  0018D6                     __ptext12:
  3239                           	opt stack 0
  3240  0018D6                     _TMR5_init:
  3241                           	opt stack 29
  3242                           
  3243                           ;IR.c: 6: T5CONbits.T5SEN = 0;
  3244                           
  3245                           ;incstack = 0
  3246  0018D6  9EB7               	bcf	4023,7,c	;volatile
  3247                           
  3248                           ;IR.c: 7: T5CONbits.RESEN = 0;
  3249  0018D8  9CB7               	bcf	4023,6,c	;volatile
  3250                           
  3251                           ;IR.c: 8: T5CONbits.T5MOD = 0;
  3252  0018DA  9AB7               	bcf	4023,5,c	;volatile
  3253                           
  3254                           ;IR.c: 9: T5CONbits.T5PS = 0b11;
  3255  0018DC  0E18               	movlw	24
  3256  0018DE  12B7               	iorwf	4023,f,c	;volatile
  3257                           
  3258                           ;IR.c: 10: T5CONbits.T5SYNC = 0;
  3259  0018E0  94B7               	bcf	4023,2,c	;volatile
  3260                           
  3261                           ;IR.c: 11: T5CONbits.TMR5CS = 0;
  3262  0018E2  92B7               	bcf	4023,1,c	;volatile
  3263                           
  3264                           ;IR.c: 12: T5CONbits.TMR5ON = 1;
  3265  0018E4  80B7               	bsf	4023,0,c	;volatile
  3266  0018E6  0012               	return		;funcret
  3267  0018E8                     __end_of_TMR5_init:
  3268                           	opt stack 0
  3269                           tblptru	equ	0xFF8
  3270                           prodh	equ	0xFF4
  3271                           prodl	equ	0xFF3
  3272                           intcon	equ	0xFF2
  3273                           intcon3	equ	0xFF0
  3274                           postinc0	equ	0xFEE
  3275                           wreg	equ	0xFE8
  3276                           indf2	equ	0xFDF
  3277                           postinc2	equ	0xFDE
  3278                           postdec2	equ	0xFDD
  3279                           plusw2	equ	0xFDB
  3280                           fsr2h	equ	0xFDA
  3281                           fsr2l	equ	0xFD9
  3282                           status	equ	0xFD8
  3283                           
  3284 ;; *************** function _TMR0_init *****************
  3285 ;; Defined at:
  3286 ;;		line 6 in file "motor.c"
  3287 ;; Parameters:    Size  Location     Type
  3288 ;;		None
  3289 ;; Auto vars:     Size  Location     Type
  3290 ;;		None
  3291 ;; Return value:  Size  Location     Type
  3292 ;;                  1    wreg      void 
  3293 ;; Registers used:
  3294 ;;		wreg, status,2
  3295 ;; Tracked objects:
  3296 ;;		On entry : 0/0
  3297 ;;		On exit  : 0/0
  3298 ;;		Unchanged: 0/0
  3299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3300 ;;      Params:         0       0       0       0
  3301 ;;      Locals:         0       0       0       0
  3302 ;;      Temps:          0       0       0       0
  3303 ;;      Totals:         0       0       0       0
  3304 ;;Total ram usage:        0 bytes
  3305 ;; Hardware stack levels used:    1
  3306 ;; Hardware stack levels required when called:    1
  3307 ;; This function calls:
  3308 ;;		Nothing
  3309 ;; This function is called by:
  3310 ;;		_main
  3311 ;; This function uses a non-reentrant model
  3312 ;;
  3313                           
  3314                           	psect	text13
  3315  0018A0                     __ptext13:
  3316                           	opt stack 0
  3317  0018A0                     _TMR0_init:
  3318                           	opt stack 29
  3319                           
  3320                           ;motor.c: 7: T0CONbits.TMR0ON = 1;
  3321                           
  3322                           ;incstack = 0
  3323  0018A0  8ED5               	bsf	4053,7,c	;volatile
  3324                           
  3325                           ;motor.c: 8: T0CONbits.T016BIT = 0;
  3326  0018A2  9CD5               	bcf	4053,6,c	;volatile
  3327                           
  3328                           ;motor.c: 9: T0CONbits.T0CS = 1;
  3329  0018A4  8AD5               	bsf	4053,5,c	;volatile
  3330                           
  3331                           ;motor.c: 10: T0CONbits.PSA = 0;
  3332  0018A6  96D5               	bcf	4053,3,c	;volatile
  3333                           
  3334                           ;motor.c: 11: T0CONbits.T0PS = 0b001;
  3335  0018A8  50D5               	movf	4053,w,c	;volatile
  3336  0018AA  0BF8               	andlw	-8
  3337  0018AC  0901               	iorlw	1
  3338  0018AE  6ED5               	movwf	4053,c	;volatile
  3339                           
  3340                           ;motor.c: 12: T0CONbits.T0SE = 0;
  3341  0018B0  98D5               	bcf	4053,4,c	;volatile
  3342                           
  3343                           ;motor.c: 13: TMR0L = 0;
  3344  0018B2  0E00               	movlw	0
  3345  0018B4  6ED6               	movwf	4054,c	;volatile
  3346                           
  3347                           ;motor.c: 14: TMR0H = 0;
  3348  0018B6  0E00               	movlw	0
  3349  0018B8  6ED7               	movwf	4055,c	;volatile
  3350  0018BA  0012               	return		;funcret
  3351  0018BC                     __end_of_TMR0_init:
  3352                           	opt stack 0
  3353                           tblptru	equ	0xFF8
  3354                           prodh	equ	0xFF4
  3355                           prodl	equ	0xFF3
  3356                           intcon	equ	0xFF2
  3357                           intcon3	equ	0xFF0
  3358                           postinc0	equ	0xFEE
  3359                           wreg	equ	0xFE8
  3360                           indf2	equ	0xFDF
  3361                           postinc2	equ	0xFDE
  3362                           postdec2	equ	0xFDD
  3363                           plusw2	equ	0xFDB
  3364                           fsr2h	equ	0xFDA
  3365                           fsr2l	equ	0xFD9
  3366                           status	equ	0xFD8
  3367                           
  3368 ;; *************** function _RFID_init *****************
  3369 ;; Defined at:
  3370 ;;		line 3 in file "RFID.c"
  3371 ;; Parameters:    Size  Location     Type
  3372 ;;		None
  3373 ;; Auto vars:     Size  Location     Type
  3374 ;;		None
  3375 ;; Return value:  Size  Location     Type
  3376 ;;                  1    wreg      void 
  3377 ;; Registers used:
  3378 ;;		wreg, status,2, status,0
  3379 ;; Tracked objects:
  3380 ;;		On entry : 0/0
  3381 ;;		On exit  : 0/0
  3382 ;;		Unchanged: 0/0
  3383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3384 ;;      Params:         0       0       0       0
  3385 ;;      Locals:         0       0       0       0
  3386 ;;      Temps:          0       0       0       0
  3387 ;;      Totals:         0       0       0       0
  3388 ;;Total ram usage:        0 bytes
  3389 ;; Hardware stack levels used:    1
  3390 ;; Hardware stack levels required when called:    1
  3391 ;; This function calls:
  3392 ;;		Nothing
  3393 ;; This function is called by:
  3394 ;;		_main
  3395 ;; This function uses a non-reentrant model
  3396 ;;
  3397                           
  3398                           	psect	text14
  3399  0018BC                     __ptext14:
  3400                           	opt stack 0
  3401  0018BC                     _RFID_init:
  3402                           	opt stack 29
  3403                           
  3404                           ;RFID.c: 4: TRISC = TRISC | 0b11000000;
  3405                           
  3406                           ;incstack = 0
  3407  0018BC  5094               	movf	3988,w,c	;volatile
  3408  0018BE  09C0               	iorlw	192
  3409  0018C0  6E94               	movwf	3988,c	;volatile
  3410                           
  3411                           ;RFID.c: 5: SPBRG = 204;
  3412  0018C2  0ECC               	movlw	204
  3413  0018C4  6EAF               	movwf	4015,c	;volatile
  3414                           
  3415                           ;RFID.c: 6: SPBRGH = 0;
  3416  0018C6  0E00               	movlw	0
  3417  0018C8  6EB0               	movwf	4016,c	;volatile
  3418                           
  3419                           ;RFID.c: 7: BAUDCONbits.BRG16 = 1;
  3420  0018CA  86AA               	bsf	4010,3,c	;volatile
  3421                           
  3422                           ;RFID.c: 8: TXSTAbits.BRGH = 1;
  3423  0018CC  84AC               	bsf	4012,2,c	;volatile
  3424                           
  3425                           ;RFID.c: 9: RCSTAbits.CREN = 1;
  3426  0018CE  88AB               	bsf	4011,4,c	;volatile
  3427                           
  3428                           ;RFID.c: 10: RCSTAbits.SPEN = 1;
  3429  0018D0  8EAB               	bsf	4011,7,c	;volatile
  3430                           
  3431                           ;RFID.c: 11: TXSTAbits.TXEN = 1;
  3432  0018D2  8AAC               	bsf	4012,5,c	;volatile
  3433  0018D4  0012               	return		;funcret
  3434  0018D6                     __end_of_RFID_init:
  3435                           	opt stack 0
  3436                           tblptru	equ	0xFF8
  3437                           prodh	equ	0xFF4
  3438                           prodl	equ	0xFF3
  3439                           intcon	equ	0xFF2
  3440                           intcon3	equ	0xFF0
  3441                           postinc0	equ	0xFEE
  3442                           wreg	equ	0xFE8
  3443                           indf2	equ	0xFDF
  3444                           postinc2	equ	0xFDE
  3445                           postdec2	equ	0xFDD
  3446                           plusw2	equ	0xFDB
  3447                           fsr2h	equ	0xFDA
  3448                           fsr2l	equ	0xFD9
  3449                           status	equ	0xFD8
  3450                           
  3451 ;; *************** function _LCD_Init *****************
  3452 ;; Defined at:
  3453 ;;		line 30 in file "LCD.c"
  3454 ;; Parameters:    Size  Location     Type
  3455 ;;		None
  3456 ;; Auto vars:     Size  Location     Type
  3457 ;;		None
  3458 ;; Return value:  Size  Location     Type
  3459 ;;                  1    wreg      void 
  3460 ;; Registers used:
  3461 ;;		wreg, status,2, status,0, cstack
  3462 ;; Tracked objects:
  3463 ;;		On entry : 0/0
  3464 ;;		On exit  : 0/0
  3465 ;;		Unchanged: 0/0
  3466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3467 ;;      Params:         0       0       0       0
  3468 ;;      Locals:         0       0       0       0
  3469 ;;      Temps:          1       0       0       0
  3470 ;;      Totals:         1       0       0       0
  3471 ;;Total ram usage:        1 bytes
  3472 ;; Hardware stack levels used:    1
  3473 ;; Hardware stack levels required when called:    4
  3474 ;; This function calls:
  3475 ;;		_LCDout
  3476 ;;		_SendLCD
  3477 ;; This function is called by:
  3478 ;;		_main
  3479 ;; This function uses a non-reentrant model
  3480 ;;
  3481                           
  3482                           	psect	text15
  3483  00119E                     __ptext15:
  3484                           	opt stack 0
  3485  00119E                     _LCD_Init:
  3486                           	opt stack 26
  3487                           
  3488                           ;LCD.c: 33: LATA=0;
  3489                           
  3490                           ;incstack = 0
  3491  00119E  0E00               	movlw	0
  3492  0011A0  6E89               	movwf	3977,c	;volatile
  3493                           
  3494                           ;LCD.c: 34: LATC=0;
  3495  0011A2  0E00               	movlw	0
  3496  0011A4  6E8B               	movwf	3979,c	;volatile
  3497                           
  3498                           ;LCD.c: 35: LATD=0;
  3499  0011A6  0E00               	movlw	0
  3500  0011A8  6E8C               	movwf	3980,c	;volatile
  3501                           
  3502                           ;LCD.c: 37: TRISAbits.RA6 = 0;
  3503  0011AA  9C92               	bcf	3986,6,c	;volatile
  3504                           
  3505                           ;LCD.c: 38: TRISCbits.RC0 = 0;
  3506  0011AC  9094               	bcf	3988,0,c	;volatile
  3507                           
  3508                           ;LCD.c: 39: TRISCbits.RC1 = 0;
  3509  0011AE  9294               	bcf	3988,1,c	;volatile
  3510                           
  3511                           ;LCD.c: 40: TRISCbits.RC2 = 0;
  3512  0011B0  9494               	bcf	3988,2,c	;volatile
  3513                           
  3514                           ;LCD.c: 41: TRISDbits.RD0 = 0;
  3515  0011B2  9095               	bcf	3989,0,c	;volatile
  3516                           
  3517                           ;LCD.c: 42: TRISDbits.RD1 = 0;
  3518  0011B4  9295               	bcf	3989,1,c	;volatile
  3519                           
  3520                           ;LCD.c: 45: _delay((unsigned long)((15)*(8000000/4000.0)));
  3521  0011B6  0E27               	movlw	39
  3522  0011B8  6E16               	movwf	??_LCD_Init& (0+255),c
  3523  0011BA  0EF5               	movlw	245
  3524  0011BC                     u2547:
  3525  0011BC  2EE8               	decfsz	wreg,f,c
  3526  0011BE  D7FE               	goto	u2547
  3527  0011C0  2E16               	decfsz	??_LCD_Init& (0+255),f,c
  3528  0011C2  D7FC               	goto	u2547
  3529  0011C4  F000               	nop	
  3530                           
  3531                           ;LCD.c: 46: LCDout(0b0011);
  3532  0011C6  0E03               	movlw	3
  3533  0011C8  EC70  F00B         	call	_LCDout
  3534                           
  3535                           ;LCD.c: 47: _delay((unsigned long)((5)*(8000000/4000.0)));
  3536  0011CC  0E0D               	movlw	13
  3537  0011CE  6E16               	movwf	??_LCD_Init& (0+255),c
  3538  0011D0  0EFC               	movlw	252
  3539  0011D2                     u2557:
  3540  0011D2  2EE8               	decfsz	wreg,f,c
  3541  0011D4  D7FE               	goto	u2557
  3542  0011D6  2E16               	decfsz	??_LCD_Init& (0+255),f,c
  3543  0011D8  D7FC               	goto	u2557
  3544                           
  3545                           ;LCD.c: 48: LCDout(0b0011);
  3546  0011DA  0E03               	movlw	3
  3547  0011DC  EC70  F00B         	call	_LCDout
  3548                           
  3549                           ;LCD.c: 49: _delay((unsigned long)((200)*(8000000/4000000.0)));
  3550  0011E0  0E85               	movlw	133
  3551  0011E2                     u2567:
  3552  0011E2  2EE8               	decfsz	wreg,f,c
  3553  0011E4  D7FE               	goto	u2567
  3554  0011E6  F000               	nop	
  3555                           
  3556                           ;LCD.c: 50: LCDout(0b0011);
  3557  0011E8  0E03               	movlw	3
  3558  0011EA  EC70  F00B         	call	_LCDout
  3559                           
  3560                           ;LCD.c: 51: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3561  0011EE  0E21               	movlw	33
  3562  0011F0                     u2577:
  3563  0011F0  2EE8               	decfsz	wreg,f,c
  3564  0011F2  D7FE               	goto	u2577
  3565  0011F4  F000               	nop	
  3566                           
  3567                           ;LCD.c: 52: LCDout(0b0010);
  3568  0011F6  0E02               	movlw	2
  3569  0011F8  EC70  F00B         	call	_LCDout
  3570                           
  3571                           ;LCD.c: 53: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3572  0011FC  0E21               	movlw	33
  3573  0011FE                     u2587:
  3574  0011FE  2EE8               	decfsz	wreg,f,c
  3575  001200  D7FE               	goto	u2587
  3576  001202  F000               	nop	
  3577                           
  3578                           ;LCD.c: 54: SendLCD(0b00101000, 0);
  3579  001204  0E00               	movlw	0
  3580  001206  6E14               	movwf	SendLCD@type+1,c
  3581  001208  0E00               	movlw	0
  3582  00120A  6E13               	movwf	SendLCD@type,c
  3583  00120C  0E28               	movlw	40
  3584  00120E  ECC5  F00B         	call	_SendLCD
  3585                           
  3586                           ;LCD.c: 55: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3587  001212  0E21               	movlw	33
  3588  001214                     u2597:
  3589  001214  2EE8               	decfsz	wreg,f,c
  3590  001216  D7FE               	goto	u2597
  3591  001218  F000               	nop	
  3592                           
  3593                           ;LCD.c: 56: SendLCD(0b00001000, 0);
  3594  00121A  0E00               	movlw	0
  3595  00121C  6E14               	movwf	SendLCD@type+1,c
  3596  00121E  0E00               	movlw	0
  3597  001220  6E13               	movwf	SendLCD@type,c
  3598  001222  0E08               	movlw	8
  3599  001224  ECC5  F00B         	call	_SendLCD
  3600                           
  3601                           ;LCD.c: 57: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3602  001228  0E21               	movlw	33
  3603  00122A                     u2607:
  3604  00122A  2EE8               	decfsz	wreg,f,c
  3605  00122C  D7FE               	goto	u2607
  3606  00122E  F000               	nop	
  3607                           
  3608                           ;LCD.c: 58: SendLCD(0b00000001, 0);
  3609  001230  0E00               	movlw	0
  3610  001232  6E14               	movwf	SendLCD@type+1,c
  3611  001234  0E00               	movlw	0
  3612  001236  6E13               	movwf	SendLCD@type,c
  3613  001238  0E01               	movlw	1
  3614  00123A  ECC5  F00B         	call	_SendLCD
  3615                           
  3616                           ;LCD.c: 59: _delay((unsigned long)((2)*(8000000/4000.0)));
  3617  00123E  0E06               	movlw	6
  3618  001240  6E16               	movwf	??_LCD_Init& (0+255),c
  3619  001242  0E30               	movlw	48
  3620  001244                     u2617:
  3621  001244  2EE8               	decfsz	wreg,f,c
  3622  001246  D7FE               	goto	u2617
  3623  001248  2E16               	decfsz	??_LCD_Init& (0+255),f,c
  3624  00124A  D7FC               	goto	u2617
  3625  00124C  D000               	nop2	
  3626                           
  3627                           ;LCD.c: 60: SendLCD(0b00000110, 0);
  3628  00124E  0E00               	movlw	0
  3629  001250  6E14               	movwf	SendLCD@type+1,c
  3630  001252  0E00               	movlw	0
  3631  001254  6E13               	movwf	SendLCD@type,c
  3632  001256  0E06               	movlw	6
  3633  001258  ECC5  F00B         	call	_SendLCD
  3634                           
  3635                           ;LCD.c: 61: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3636  00125C  0E21               	movlw	33
  3637  00125E                     u2627:
  3638  00125E  2EE8               	decfsz	wreg,f,c
  3639  001260  D7FE               	goto	u2627
  3640  001262  F000               	nop	
  3641                           
  3642                           ;LCD.c: 62: SendLCD(0b00001110, 0);
  3643  001264  0E00               	movlw	0
  3644  001266  6E14               	movwf	SendLCD@type+1,c
  3645  001268  0E00               	movlw	0
  3646  00126A  6E13               	movwf	SendLCD@type,c
  3647  00126C  0E0E               	movlw	14
  3648  00126E  ECC5  F00B         	call	_SendLCD
  3649                           
  3650                           ;LCD.c: 63: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3651  001272  0E21               	movlw	33
  3652  001274                     u2637:
  3653  001274  2EE8               	decfsz	wreg,f,c
  3654  001276  D7FE               	goto	u2637
  3655  001278  F000               	nop	
  3656  00127A  0012               	return		;funcret
  3657  00127C                     __end_of_LCD_Init:
  3658                           	opt stack 0
  3659                           tblptru	equ	0xFF8
  3660                           prodh	equ	0xFF4
  3661                           prodl	equ	0xFF3
  3662                           intcon	equ	0xFF2
  3663                           intcon3	equ	0xFF0
  3664                           postinc0	equ	0xFEE
  3665                           wreg	equ	0xFE8
  3666                           indf2	equ	0xFDF
  3667                           postinc2	equ	0xFDE
  3668                           postdec2	equ	0xFDD
  3669                           plusw2	equ	0xFDB
  3670                           fsr2h	equ	0xFDA
  3671                           fsr2l	equ	0xFD9
  3672                           status	equ	0xFD8
  3673                           
  3674 ;; *************** function _IR_signal_extract *****************
  3675 ;; Defined at:
  3676 ;;		line 36 in file "IR.c"
  3677 ;; Parameters:    Size  Location     Type
  3678 ;;  ir              2   33[COMRAM] PTR struct IR_struct
  3679 ;;		 -> main@IR_values(12), 
  3680 ;; Auto vars:     Size  Location     Type
  3681 ;;		None
  3682 ;; Return value:  Size  Location     Type
  3683 ;;                  1    wreg      void 
  3684 ;; Registers used:
  3685 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3686 ;; Tracked objects:
  3687 ;;		On entry : 0/0
  3688 ;;		On exit  : 0/0
  3689 ;;		Unchanged: 0/0
  3690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3691 ;;      Params:         2       0       0       0
  3692 ;;      Locals:         0       0       0       0
  3693 ;;      Temps:          4       0       0       0
  3694 ;;      Totals:         6       0       0       0
  3695 ;;Total ram usage:        6 bytes
  3696 ;; Hardware stack levels used:    1
  3697 ;; Hardware stack levels required when called:    3
  3698 ;; This function calls:
  3699 ;;		_map_infrared
  3700 ;; This function is called by:
  3701 ;;		_main
  3702 ;; This function uses a non-reentrant model
  3703 ;;
  3704                           
  3705                           	psect	text16
  3706  000E82                     __ptext16:
  3707                           	opt stack 0
  3708  000E82                     _IR_signal_extract:
  3709                           	opt stack 27
  3710                           
  3711                           ;IR.c: 38: ir->ir_left_old = ir->ir_left;
  3712                           
  3713                           ;incstack = 0
  3714  000E82  EE20 F004          	lfsr	2,4
  3715  000E86  5022               	movf	IR_signal_extract@ir,w,c
  3716  000E88  26D9               	addwf	fsr2l,f,c
  3717  000E8A  5023               	movf	IR_signal_extract@ir+1,w,c
  3718  000E8C  22DA               	addwfc	fsr2h,f,c
  3719  000E8E  EE10 F008          	lfsr	1,8
  3720  000E92  5022               	movf	IR_signal_extract@ir,w,c
  3721  000E94  26E1               	addwf	fsr1l,f,c
  3722  000E96  5023               	movf	IR_signal_extract@ir+1,w,c
  3723  000E98  22E2               	addwfc	fsr1h,f,c
  3724  000E9A  CFDE FFE6          	movff	postinc2,postinc1
  3725  000E9E  CFDD FFE5          	movff	postdec2,postdec1
  3726                           
  3727                           ;IR.c: 39: ir->ir_right_old = ir->ir_right;
  3728  000EA2  EE20 F006          	lfsr	2,6
  3729  000EA6  5022               	movf	IR_signal_extract@ir,w,c
  3730  000EA8  26D9               	addwf	fsr2l,f,c
  3731  000EAA  5023               	movf	IR_signal_extract@ir+1,w,c
  3732  000EAC  22DA               	addwfc	fsr2h,f,c
  3733  000EAE  EE10 F00A          	lfsr	1,10
  3734  000EB2  5022               	movf	IR_signal_extract@ir,w,c
  3735  000EB4  26E1               	addwf	fsr1l,f,c
  3736  000EB6  5023               	movf	IR_signal_extract@ir+1,w,c
  3737  000EB8  22E2               	addwfc	fsr1h,f,c
  3738  000EBA  CFDE FFE6          	movff	postinc2,postinc1
  3739  000EBE  CFDD FFE5          	movff	postdec2,postdec1
  3740                           
  3741                           ;IR.c: 40: ir->ir_left = (CAP2BUFH << 8) | (CAP2BUFL);
  3742  000EC2  5066               	movf	3942,w,c	;volatile
  3743  000EC4  CF67 F024          	movff	3943,??_IR_signal_extract	;volatile
  3744  000EC8  6A25               	clrf	(??_IR_signal_extract+1)& (0+255),c
  3745  000ECA  C024  F025         	movff	??_IR_signal_extract,??_IR_signal_extract+1
  3746  000ECE  6A24               	clrf	??_IR_signal_extract,c
  3747  000ED0  1224               	iorwf	??_IR_signal_extract,f,c
  3748  000ED2  0E00               	movlw	0
  3749  000ED4  1225               	iorwf	??_IR_signal_extract+1,f,c
  3750  000ED6  EE20 F004          	lfsr	2,4
  3751  000EDA  5022               	movf	IR_signal_extract@ir,w,c
  3752  000EDC  26D9               	addwf	fsr2l,f,c
  3753  000EDE  5023               	movf	IR_signal_extract@ir+1,w,c
  3754  000EE0  22DA               	addwfc	fsr2h,f,c
  3755  000EE2  C024  FFDE         	movff	??_IR_signal_extract,postinc2
  3756  000EE6  C025  FFDD         	movff	??_IR_signal_extract+1,postdec2
  3757                           
  3758                           ;IR.c: 41: ir->ir_right = (CAP1BUFH << 8) | (CAP1BUFL);
  3759  000EEA  5068               	movf	3944,w,c	;volatile
  3760  000EEC  CF69 F024          	movff	3945,??_IR_signal_extract	;volatile
  3761  000EF0  6A25               	clrf	(??_IR_signal_extract+1)& (0+255),c
  3762  000EF2  C024  F025         	movff	??_IR_signal_extract,??_IR_signal_extract+1
  3763  000EF6  6A24               	clrf	??_IR_signal_extract,c
  3764  000EF8  1224               	iorwf	??_IR_signal_extract,f,c
  3765  000EFA  0E00               	movlw	0
  3766  000EFC  1225               	iorwf	??_IR_signal_extract+1,f,c
  3767  000EFE  EE20 F006          	lfsr	2,6
  3768  000F02  5022               	movf	IR_signal_extract@ir,w,c
  3769  000F04  26D9               	addwf	fsr2l,f,c
  3770  000F06  5023               	movf	IR_signal_extract@ir+1,w,c
  3771  000F08  22DA               	addwfc	fsr2h,f,c
  3772  000F0A  C024  FFDE         	movff	??_IR_signal_extract,postinc2
  3773  000F0E  C025  FFDD         	movff	??_IR_signal_extract+1,postdec2
  3774                           
  3775                           ;IR.c: 43: if ((ir->ir_left == ir->ir_left_old) && (ir->ir_left <= 200)) {
  3776  000F12  EE20 F008          	lfsr	2,8
  3777  000F16  5022               	movf	IR_signal_extract@ir,w,c
  3778  000F18  26D9               	addwf	fsr2l,f,c
  3779  000F1A  5023               	movf	IR_signal_extract@ir+1,w,c
  3780  000F1C  22DA               	addwfc	fsr2h,f,c
  3781  000F1E  EE10 F004          	lfsr	1,4
  3782  000F22  5022               	movf	IR_signal_extract@ir,w,c
  3783  000F24  26E1               	addwf	fsr1l,f,c
  3784  000F26  5023               	movf	IR_signal_extract@ir+1,w,c
  3785  000F28  22E2               	addwfc	fsr1h,f,c
  3786  000F2A  50DE               	movf	postinc2,w,c
  3787  000F2C  18E6               	xorwf	postinc1,w,c
  3788  000F2E  E11E               	bnz	l2801
  3789  000F30  50DE               	movf	postinc2,w,c
  3790  000F32  18E6               	xorwf	postinc1,w,c
  3791  000F34  A4D8               	btfss	status,2,c
  3792  000F36  D01A               	goto	l2801
  3793  000F38  EE20 F004          	lfsr	2,4
  3794  000F3C  5022               	movf	IR_signal_extract@ir,w,c
  3795  000F3E  26D9               	addwf	fsr2l,f,c
  3796  000F40  5023               	movf	IR_signal_extract@ir+1,w,c
  3797  000F42  22DA               	addwfc	fsr2h,f,c
  3798  000F44  0E01               	movlw	1
  3799  000F46  BEDB               	btfsc	plusw2,7,c
  3800  000F48  D007               	goto	l2799
  3801  000F4A  0E01               	movlw	1
  3802  000F4C  50DB               	movf	plusw2,w,c
  3803  000F4E  E10E               	bnz	l2801
  3804  000F50  0EC9               	movlw	201
  3805  000F52  5CDE               	subwf	postinc2,w,c
  3806  000F54  B0D8               	btfsc	status,0,c
  3807  000F56  D00A               	goto	l2801
  3808  000F58                     l2799:
  3809                           
  3810                           ;IR.c: 44: ir->ir_left = 0;}
  3811  000F58  EE20 F004          	lfsr	2,4
  3812  000F5C  5022               	movf	IR_signal_extract@ir,w,c
  3813  000F5E  26D9               	addwf	fsr2l,f,c
  3814  000F60  5023               	movf	IR_signal_extract@ir+1,w,c
  3815  000F62  22DA               	addwfc	fsr2h,f,c
  3816  000F64  0E00               	movlw	0
  3817  000F66  6EDE               	movwf	postinc2,c
  3818  000F68  0E00               	movlw	0
  3819  000F6A  6EDD               	movwf	postdec2,c
  3820  000F6C                     l2801:
  3821                           
  3822                           ;IR.c: 45: if ((ir->ir_right == ir->ir_right_old) && (ir->ir_right <= 200)) {
  3823  000F6C  EE20 F00A          	lfsr	2,10
  3824  000F70  5022               	movf	IR_signal_extract@ir,w,c
  3825  000F72  26D9               	addwf	fsr2l,f,c
  3826  000F74  5023               	movf	IR_signal_extract@ir+1,w,c
  3827  000F76  22DA               	addwfc	fsr2h,f,c
  3828  000F78  EE10 F006          	lfsr	1,6
  3829  000F7C  5022               	movf	IR_signal_extract@ir,w,c
  3830  000F7E  26E1               	addwf	fsr1l,f,c
  3831  000F80  5023               	movf	IR_signal_extract@ir+1,w,c
  3832  000F82  22E2               	addwfc	fsr1h,f,c
  3833  000F84  50DE               	movf	postinc2,w,c
  3834  000F86  18E6               	xorwf	postinc1,w,c
  3835  000F88  E11E               	bnz	l2807
  3836  000F8A  50DE               	movf	postinc2,w,c
  3837  000F8C  18E6               	xorwf	postinc1,w,c
  3838  000F8E  A4D8               	btfss	status,2,c
  3839  000F90  D01A               	goto	l2807
  3840  000F92  EE20 F006          	lfsr	2,6
  3841  000F96  5022               	movf	IR_signal_extract@ir,w,c
  3842  000F98  26D9               	addwf	fsr2l,f,c
  3843  000F9A  5023               	movf	IR_signal_extract@ir+1,w,c
  3844  000F9C  22DA               	addwfc	fsr2h,f,c
  3845  000F9E  0E01               	movlw	1
  3846  000FA0  BEDB               	btfsc	plusw2,7,c
  3847  000FA2  D007               	goto	l2805
  3848  000FA4  0E01               	movlw	1
  3849  000FA6  50DB               	movf	plusw2,w,c
  3850  000FA8  E10E               	bnz	l2807
  3851  000FAA  0EC9               	movlw	201
  3852  000FAC  5CDE               	subwf	postinc2,w,c
  3853  000FAE  B0D8               	btfsc	status,0,c
  3854  000FB0  D00A               	goto	l2807
  3855  000FB2                     l2805:
  3856                           
  3857                           ;IR.c: 46: ir->ir_right = 0;}
  3858  000FB2  EE20 F006          	lfsr	2,6
  3859  000FB6  5022               	movf	IR_signal_extract@ir,w,c
  3860  000FB8  26D9               	addwf	fsr2l,f,c
  3861  000FBA  5023               	movf	IR_signal_extract@ir+1,w,c
  3862  000FBC  22DA               	addwfc	fsr2h,f,c
  3863  000FBE  0E00               	movlw	0
  3864  000FC0  6EDE               	movwf	postinc2,c
  3865  000FC2  0E00               	movlw	0
  3866  000FC4  6EDD               	movwf	postdec2,c
  3867  000FC6                     l2807:
  3868                           
  3869                           ;IR.c: 48: ir->ir_left_mapped = map_infrared(ir->ir_left);
  3870  000FC6  EE20 F004          	lfsr	2,4
  3871  000FCA  5022               	movf	IR_signal_extract@ir,w,c
  3872  000FCC  26D9               	addwf	fsr2l,f,c
  3873  000FCE  5023               	movf	IR_signal_extract@ir+1,w,c
  3874  000FD0  22DA               	addwfc	fsr2h,f,c
  3875  000FD2  CFDE F01E          	movff	postinc2,map_infrared@ir_signal
  3876  000FD6  CFDD F01F          	movff	postdec2,map_infrared@ir_signal+1
  3877  000FDA  EC51  F00B         	call	_map_infrared	;wreg free
  3878  000FDE  C022  FFD9         	movff	IR_signal_extract@ir,fsr2l
  3879  000FE2  C023  FFDA         	movff	IR_signal_extract@ir+1,fsr2h
  3880  000FE6  C01E  FFDE         	movff	?_map_infrared,postinc2
  3881  000FEA  C01F  FFDD         	movff	?_map_infrared+1,postdec2
  3882                           
  3883                           ;IR.c: 49: ir->ir_right_mapped = map_infrared(ir->ir_right);
  3884  000FEE  EE20 F006          	lfsr	2,6
  3885  000FF2  5022               	movf	IR_signal_extract@ir,w,c
  3886  000FF4  26D9               	addwf	fsr2l,f,c
  3887  000FF6  5023               	movf	IR_signal_extract@ir+1,w,c
  3888  000FF8  22DA               	addwfc	fsr2h,f,c
  3889  000FFA  CFDE F01E          	movff	postinc2,map_infrared@ir_signal
  3890  000FFE  CFDD F01F          	movff	postdec2,map_infrared@ir_signal+1
  3891  001002  EC51  F00B         	call	_map_infrared	;wreg free
  3892  001006  EE20 F002          	lfsr	2,2
  3893  00100A  5022               	movf	IR_signal_extract@ir,w,c
  3894  00100C  26D9               	addwf	fsr2l,f,c
  3895  00100E  5023               	movf	IR_signal_extract@ir+1,w,c
  3896  001010  22DA               	addwfc	fsr2h,f,c
  3897  001012  C01E  FFDE         	movff	?_map_infrared,postinc2
  3898  001016  C01F  FFDD         	movff	?_map_infrared+1,postdec2
  3899  00101A  0012               	return		;funcret
  3900  00101C                     __end_of_IR_signal_extract:
  3901                           	opt stack 0
  3902                           tblptru	equ	0xFF8
  3903                           prodh	equ	0xFF4
  3904                           prodl	equ	0xFF3
  3905                           intcon	equ	0xFF2
  3906                           intcon3	equ	0xFF0
  3907                           postinc0	equ	0xFEE
  3908                           wreg	equ	0xFE8
  3909                           postinc1	equ	0xFE6
  3910                           postdec1	equ	0xFE5
  3911                           fsr1h	equ	0xFE2
  3912                           fsr1l	equ	0xFE1
  3913                           indf2	equ	0xFDF
  3914                           postinc2	equ	0xFDE
  3915                           postdec2	equ	0xFDD
  3916                           plusw2	equ	0xFDB
  3917                           fsr2h	equ	0xFDA
  3918                           fsr2l	equ	0xFD9
  3919                           status	equ	0xFD8
  3920                           
  3921 ;; *************** function _map_infrared *****************
  3922 ;; Defined at:
  3923 ;;		line 29 in file "IR.c"
  3924 ;; Parameters:    Size  Location     Type
  3925 ;;  ir_signal       2   29[COMRAM] int 
  3926 ;; Auto vars:     Size  Location     Type
  3927 ;;  map_signal      2   31[COMRAM] int 
  3928 ;; Return value:  Size  Location     Type
  3929 ;;                  2   29[COMRAM] int 
  3930 ;; Registers used:
  3931 ;;		wreg, status,2, status,0, cstack
  3932 ;; Tracked objects:
  3933 ;;		On entry : 0/0
  3934 ;;		On exit  : 0/0
  3935 ;;		Unchanged: 0/0
  3936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3937 ;;      Params:         2       0       0       0
  3938 ;;      Locals:         2       0       0       0
  3939 ;;      Temps:          0       0       0       0
  3940 ;;      Totals:         4       0       0       0
  3941 ;;Total ram usage:        4 bytes
  3942 ;; Hardware stack levels used:    1
  3943 ;; Hardware stack levels required when called:    2
  3944 ;; This function calls:
  3945 ;;		___awdiv
  3946 ;; This function is called by:
  3947 ;;		_IR_signal_extract
  3948 ;; This function uses a non-reentrant model
  3949 ;;
  3950                           
  3951                           	psect	text17
  3952  0016A2                     __ptext17:
  3953                           	opt stack 0
  3954  0016A2                     _map_infrared:
  3955                           	opt stack 27
  3956                           
  3957                           ;IR.c: 30: int map_signal = ir_signal/62;
  3958                           
  3959                           ;incstack = 0
  3960  0016A2  C01E  F016         	movff	map_infrared@ir_signal,___awdiv@dividend
  3961  0016A6  C01F  F017         	movff	map_infrared@ir_signal+1,___awdiv@dividend+1
  3962  0016AA  0E00               	movlw	0
  3963  0016AC  6E19               	movwf	___awdiv@divisor+1,c
  3964  0016AE  0E3E               	movlw	62
  3965  0016B0  6E18               	movwf	___awdiv@divisor,c
  3966  0016B2  ECE7  F009         	call	___awdiv	;wreg free
  3967  0016B6  C016  F020         	movff	?___awdiv,map_infrared@map_signal
  3968  0016BA  C017  F021         	movff	?___awdiv+1,map_infrared@map_signal+1
  3969                           
  3970                           ;IR.c: 31: if (map_signal > 200) {map_signal = 200;}
  3971  0016BE  BE21               	btfsc	map_infrared@map_signal+1,7,c
  3972  0016C0  D00A               	goto	l2625
  3973  0016C2  5021               	movf	map_infrared@map_signal+1,w,c
  3974  0016C4  E104               	bnz	u1920
  3975  0016C6  0EC9               	movlw	201
  3976  0016C8  5C20               	subwf	map_infrared@map_signal,w,c
  3977  0016CA  A0D8               	btfss	status,0,c
  3978  0016CC  D004               	goto	l2625
  3979  0016CE                     u1920:
  3980  0016CE  0E00               	movlw	0
  3981  0016D0  6E21               	movwf	map_infrared@map_signal+1,c
  3982  0016D2  0EC8               	movlw	200
  3983  0016D4  6E20               	movwf	map_infrared@map_signal,c
  3984  0016D6                     l2625:
  3985                           
  3986                           ;IR.c: 32: return map_signal;
  3987  0016D6  C020  F01E         	movff	map_infrared@map_signal,?_map_infrared
  3988  0016DA  C021  F01F         	movff	map_infrared@map_signal+1,?_map_infrared+1
  3989  0016DE  0012               	return	
  3990  0016E0                     __end_of_map_infrared:
  3991                           	opt stack 0
  3992                           tblptru	equ	0xFF8
  3993                           prodh	equ	0xFF4
  3994                           prodl	equ	0xFF3
  3995                           intcon	equ	0xFF2
  3996                           intcon3	equ	0xFF0
  3997                           postinc0	equ	0xFEE
  3998                           wreg	equ	0xFE8
  3999                           postinc1	equ	0xFE6
  4000                           postdec1	equ	0xFE5
  4001                           fsr1h	equ	0xFE2
  4002                           fsr1l	equ	0xFE1
  4003                           indf2	equ	0xFDF
  4004                           postinc2	equ	0xFDE
  4005                           postdec2	equ	0xFDD
  4006                           plusw2	equ	0xFDB
  4007                           fsr2h	equ	0xFDA
  4008                           fsr2l	equ	0xFD9
  4009                           status	equ	0xFD8
  4010                           
  4011 ;; *************** function ___awdiv *****************
  4012 ;; Defined at:
  4013 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  4014 ;; Parameters:    Size  Location     Type
  4015 ;;  dividend        2   21[COMRAM] int 
  4016 ;;  divisor         2   23[COMRAM] int 
  4017 ;; Auto vars:     Size  Location     Type
  4018 ;;  quotient        2   27[COMRAM] int 
  4019 ;;  sign            1   26[COMRAM] unsigned char 
  4020 ;;  counter         1   25[COMRAM] unsigned char 
  4021 ;; Return value:  Size  Location     Type
  4022 ;;                  2   21[COMRAM] int 
  4023 ;; Registers used:
  4024 ;;		wreg, status,2, status,0
  4025 ;; Tracked objects:
  4026 ;;		On entry : 0/0
  4027 ;;		On exit  : 0/0
  4028 ;;		Unchanged: 0/0
  4029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4030 ;;      Params:         4       0       0       0
  4031 ;;      Locals:         4       0       0       0
  4032 ;;      Temps:          0       0       0       0
  4033 ;;      Totals:         8       0       0       0
  4034 ;;Total ram usage:        8 bytes
  4035 ;; Hardware stack levels used:    1
  4036 ;; Hardware stack levels required when called:    1
  4037 ;; This function calls:
  4038 ;;		Nothing
  4039 ;; This function is called by:
  4040 ;;		_map_infrared
  4041 ;;		_setMotorPWM
  4042 ;; This function uses a non-reentrant model
  4043 ;;
  4044                           
  4045                           	psect	text18
  4046  0013CE                     __ptext18:
  4047                           	opt stack 0
  4048  0013CE                     ___awdiv:
  4049                           	opt stack 26
  4050                           
  4051                           ;incstack = 0
  4052  0013CE  0E00               	movlw	0
  4053  0013D0  6E1B               	movwf	___awdiv@sign,c
  4054  0013D2  AE19               	btfss	___awdiv@divisor+1,7,c
  4055  0013D4  D006               	goto	l2507
  4056  0013D6  6C18               	negf	___awdiv@divisor,c
  4057  0013D8  1E19               	comf	___awdiv@divisor+1,f,c
  4058  0013DA  B0D8               	btfsc	status,0,c
  4059  0013DC  2A19               	incf	___awdiv@divisor+1,f,c
  4060  0013DE  0E01               	movlw	1
  4061  0013E0  6E1B               	movwf	___awdiv@sign,c
  4062  0013E2                     l2507:
  4063  0013E2  AE17               	btfss	___awdiv@dividend+1,7,c
  4064  0013E4  D006               	goto	l2513
  4065  0013E6  6C16               	negf	___awdiv@dividend,c
  4066  0013E8  1E17               	comf	___awdiv@dividend+1,f,c
  4067  0013EA  B0D8               	btfsc	status,0,c
  4068  0013EC  2A17               	incf	___awdiv@dividend+1,f,c
  4069  0013EE  0E01               	movlw	1
  4070  0013F0  1A1B               	xorwf	___awdiv@sign,f,c
  4071  0013F2                     l2513:
  4072  0013F2  0E00               	movlw	0
  4073  0013F4  6E1D               	movwf	___awdiv@quotient+1,c
  4074  0013F6  0E00               	movlw	0
  4075  0013F8  6E1C               	movwf	___awdiv@quotient,c
  4076  0013FA  5018               	movf	___awdiv@divisor,w,c
  4077  0013FC  1019               	iorwf	___awdiv@divisor+1,w,c
  4078  0013FE  B4D8               	btfsc	status,2,c
  4079  001400  D01C               	goto	l2535
  4080  001402  0E01               	movlw	1
  4081  001404  6E1A               	movwf	___awdiv@counter,c
  4082  001406  D004               	goto	l2521
  4083  001408                     l2519:
  4084  001408  90D8               	bcf	status,0,c
  4085  00140A  3618               	rlcf	___awdiv@divisor,f,c
  4086  00140C  3619               	rlcf	___awdiv@divisor+1,f,c
  4087  00140E  2A1A               	incf	___awdiv@counter,f,c
  4088  001410                     l2521:
  4089  001410  AE19               	btfss	___awdiv@divisor+1,7,c
  4090  001412  D7FA               	goto	l2519
  4091  001414                     l2523:
  4092  001414  90D8               	bcf	status,0,c
  4093  001416  361C               	rlcf	___awdiv@quotient,f,c
  4094  001418  361D               	rlcf	___awdiv@quotient+1,f,c
  4095  00141A  5018               	movf	___awdiv@divisor,w,c
  4096  00141C  5C16               	subwf	___awdiv@dividend,w,c
  4097  00141E  5019               	movf	___awdiv@divisor+1,w,c
  4098  001420  5817               	subwfb	___awdiv@dividend+1,w,c
  4099  001422  A0D8               	btfss	status,0,c
  4100  001424  D005               	goto	l2531
  4101  001426  5018               	movf	___awdiv@divisor,w,c
  4102  001428  5E16               	subwf	___awdiv@dividend,f,c
  4103  00142A  5019               	movf	___awdiv@divisor+1,w,c
  4104  00142C  5A17               	subwfb	___awdiv@dividend+1,f,c
  4105  00142E  801C               	bsf	___awdiv@quotient,0,c
  4106  001430                     l2531:
  4107  001430  90D8               	bcf	status,0,c
  4108  001432  3219               	rrcf	___awdiv@divisor+1,f,c
  4109  001434  3218               	rrcf	___awdiv@divisor,f,c
  4110  001436  2E1A               	decfsz	___awdiv@counter,f,c
  4111  001438  D7ED               	goto	l2523
  4112  00143A                     l2535:
  4113  00143A  501B               	movf	___awdiv@sign,w,c
  4114  00143C  B4D8               	btfsc	status,2,c
  4115  00143E  D004               	goto	l2539
  4116  001440  6C1C               	negf	___awdiv@quotient,c
  4117  001442  1E1D               	comf	___awdiv@quotient+1,f,c
  4118  001444  B0D8               	btfsc	status,0,c
  4119  001446  2A1D               	incf	___awdiv@quotient+1,f,c
  4120  001448                     l2539:
  4121  001448  C01C  F016         	movff	___awdiv@quotient,?___awdiv
  4122  00144C  C01D  F017         	movff	___awdiv@quotient+1,?___awdiv+1
  4123  001450  0012               	return	
  4124  001452                     __end_of___awdiv:
  4125                           	opt stack 0
  4126                           tblptru	equ	0xFF8
  4127                           prodh	equ	0xFF4
  4128                           prodl	equ	0xFF3
  4129                           intcon	equ	0xFF2
  4130                           intcon3	equ	0xFF0
  4131                           postinc0	equ	0xFEE
  4132                           wreg	equ	0xFE8
  4133                           postinc1	equ	0xFE6
  4134                           postdec1	equ	0xFE5
  4135                           fsr1h	equ	0xFE2
  4136                           fsr1l	equ	0xFE1
  4137                           indf2	equ	0xFDF
  4138                           postinc2	equ	0xFDE
  4139                           postdec2	equ	0xFDD
  4140                           plusw2	equ	0xFDB
  4141                           fsr2h	equ	0xFDA
  4142                           fsr2l	equ	0xFD9
  4143                           status	equ	0xFD8
  4144                           
  4145 ;; *************** function _IR_init *****************
  4146 ;; Defined at:
  4147 ;;		line 16 in file "IR.c"
  4148 ;; Parameters:    Size  Location     Type
  4149 ;;		None
  4150 ;; Auto vars:     Size  Location     Type
  4151 ;;		None
  4152 ;; Return value:  Size  Location     Type
  4153 ;;                  1    wreg      void 
  4154 ;; Registers used:
  4155 ;;		wreg, status,2
  4156 ;; Tracked objects:
  4157 ;;		On entry : 0/0
  4158 ;;		On exit  : 0/0
  4159 ;;		Unchanged: 0/0
  4160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4161 ;;      Params:         0       0       0       0
  4162 ;;      Locals:         0       0       0       0
  4163 ;;      Temps:          0       0       0       0
  4164 ;;      Totals:         0       0       0       0
  4165 ;;Total ram usage:        0 bytes
  4166 ;; Hardware stack levels used:    1
  4167 ;; Hardware stack levels required when called:    1
  4168 ;; This function calls:
  4169 ;;		Nothing
  4170 ;; This function is called by:
  4171 ;;		_main
  4172 ;; This function uses a non-reentrant model
  4173 ;;
  4174                           
  4175                           	psect	text19
  4176  001864                     __ptext19:
  4177                           	opt stack 0
  4178  001864                     _IR_init:
  4179                           	opt stack 29
  4180                           
  4181                           ;IR.c: 18: CAP1CONbits.CAP1REN = 1;
  4182                           
  4183                           ;incstack = 0
  4184  001864  8C63               	bsf	3939,6,c	;volatile
  4185                           
  4186                           ;IR.c: 19: CAP1CONbits.CAP1M = 0b0110;
  4187  001866  5063               	movf	3939,w,c	;volatile
  4188  001868  0BF0               	andlw	-16
  4189  00186A  0906               	iorlw	6
  4190  00186C  6E63               	movwf	3939,c	;volatile
  4191                           
  4192                           ;IR.c: 20: CAP2CONbits.CAP2REN = 1;
  4193  00186E  8C62               	bsf	3938,6,c	;volatile
  4194                           
  4195                           ;IR.c: 21: CAP2CONbits.CAP2M = 0b0110;
  4196  001870  5062               	movf	3938,w,c	;volatile
  4197  001872  0BF0               	andlw	-16
  4198  001874  0906               	iorlw	6
  4199  001876  6E62               	movwf	3938,c	;volatile
  4200                           
  4201                           ;IR.c: 23: ANSEL0 = 0;
  4202  001878  0E00               	movlw	0
  4203  00187A  6EB8               	movwf	4024,c	;volatile
  4204                           
  4205                           ;IR.c: 24: ANSEL1 = 0;
  4206  00187C  0E00               	movlw	0
  4207  00187E  6EB9               	movwf	4025,c	;volatile
  4208  001880  0012               	return		;funcret
  4209  001882                     __end_of_IR_init:
  4210                           	opt stack 0
  4211                           tblptru	equ	0xFF8
  4212                           prodh	equ	0xFF4
  4213                           prodl	equ	0xFF3
  4214                           intcon	equ	0xFF2
  4215                           intcon3	equ	0xFF0
  4216                           postinc0	equ	0xFEE
  4217                           wreg	equ	0xFE8
  4218                           postinc1	equ	0xFE6
  4219                           postdec1	equ	0xFE5
  4220                           fsr1h	equ	0xFE2
  4221                           fsr1l	equ	0xFE1
  4222                           indf2	equ	0xFDF
  4223                           postinc2	equ	0xFDE
  4224                           postdec2	equ	0xFDD
  4225                           plusw2	equ	0xFDB
  4226                           fsr2h	equ	0xFDA
  4227                           fsr2l	equ	0xFD9
  4228                           status	equ	0xFD8
  4229                           
  4230 ;; *************** function _IR_LCD_display *****************
  4231 ;; Defined at:
  4232 ;;		line 97 in file "LCD.c"
  4233 ;; Parameters:    Size  Location     Type
  4234 ;;  buf_r           2   48[COMRAM] PTR unsigned char 
  4235 ;;		 -> main@buf_r(16), 
  4236 ;;  buf_l           2   50[COMRAM] PTR unsigned char 
  4237 ;;		 -> main@buf_l(16), 
  4238 ;;  ir              2   52[COMRAM] PTR struct IR_struct
  4239 ;;		 -> main@IR_values(12), 
  4240 ;; Auto vars:     Size  Location     Type
  4241 ;;		None
  4242 ;; Return value:  Size  Location     Type
  4243 ;;                  1    wreg      void 
  4244 ;; Registers used:
  4245 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4246 ;; Tracked objects:
  4247 ;;		On entry : 0/0
  4248 ;;		On exit  : 0/0
  4249 ;;		Unchanged: 0/0
  4250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4251 ;;      Params:         6       0       0       0
  4252 ;;      Locals:         0       0       0       0
  4253 ;;      Temps:          1       0       0       0
  4254 ;;      Totals:         7       0       0       0
  4255 ;;Total ram usage:        7 bytes
  4256 ;; Hardware stack levels used:    1
  4257 ;; Hardware stack levels required when called:    5
  4258 ;; This function calls:
  4259 ;;		_LCD_string
  4260 ;;		_SetLine
  4261 ;;		_clear_LCD
  4262 ;;		_sprintf
  4263 ;; This function is called by:
  4264 ;;		_main
  4265 ;; This function uses a non-reentrant model
  4266 ;;
  4267                           
  4268                           	psect	text20
  4269  00127C                     __ptext20:
  4270                           	opt stack 0
  4271  00127C                     _IR_LCD_display:
  4272                           	opt stack 25
  4273                           
  4274                           ;LCD.c: 99: clear_LCD();
  4275                           
  4276                           ;incstack = 0
  4277  00127C  EC04  F00C         	call	_clear_LCD	;wreg free
  4278                           
  4279                           ;LCD.c: 101: sprintf(buf_r,"PR = %d %02d",ir->ir_right_mapped, TMR0L);
  4280  001280  C031  F01C         	movff	IR_LCD_display@buf_r,sprintf@sp
  4281  001284  C032  F01D         	movff	IR_LCD_display@buf_r+1,sprintf@sp+1
  4282  001288  0E36               	movlw	low STR_1
  4283  00128A  6E1E               	movwf	sprintf@f,c
  4284  00128C  0E03               	movlw	high STR_1
  4285  00128E  6E1F               	movwf	sprintf@f+1,c
  4286  001290  EE20 F002          	lfsr	2,2
  4287  001294  5035               	movf	IR_LCD_display@ir,w,c
  4288  001296  26D9               	addwf	fsr2l,f,c
  4289  001298  5036               	movf	IR_LCD_display@ir+1,w,c
  4290  00129A  22DA               	addwfc	fsr2h,f,c
  4291  00129C  CFDE F020          	movff	postinc2,?_sprintf+4
  4292  0012A0  CFDD F021          	movff	postdec2,?_sprintf+5
  4293  0012A4  CFD6 F022          	movff	4054,?_sprintf+6	;volatile
  4294  0012A8  6A23               	clrf	?_sprintf+7,c
  4295  0012AA  ECD1  F004         	call	_sprintf	;wreg free
  4296                           
  4297                           ;LCD.c: 102: sprintf(buf_l,"PL = %d %02d",ir->ir_left_mapped, TMR0H);
  4298  0012AE  C033  F01C         	movff	IR_LCD_display@buf_l,sprintf@sp
  4299  0012B2  C034  F01D         	movff	IR_LCD_display@buf_l+1,sprintf@sp+1
  4300  0012B6  0E29               	movlw	low STR_2
  4301  0012B8  6E1E               	movwf	sprintf@f,c
  4302  0012BA  0E03               	movlw	high STR_2
  4303  0012BC  6E1F               	movwf	sprintf@f+1,c
  4304  0012BE  C035  FFD9         	movff	IR_LCD_display@ir,fsr2l
  4305  0012C2  C036  FFDA         	movff	IR_LCD_display@ir+1,fsr2h
  4306  0012C6  CFDE F020          	movff	postinc2,?_sprintf+4
  4307  0012CA  CFDD F021          	movff	postdec2,?_sprintf+5
  4308  0012CE  CFD7 F022          	movff	4055,?_sprintf+6	;volatile
  4309  0012D2  6A23               	clrf	?_sprintf+7,c
  4310  0012D4  ECD1  F004         	call	_sprintf	;wreg free
  4311                           
  4312                           ;LCD.c: 104: SetLine(1);
  4313  0012D8  0E00               	movlw	0
  4314  0012DA  6E17               	movwf	SetLine@line+1,c
  4315  0012DC  0E01               	movlw	1
  4316  0012DE  6E16               	movwf	SetLine@line,c
  4317  0012E0  EC8F  F00B         	call	_SetLine	;wreg free
  4318                           
  4319                           ;LCD.c: 105: LCD_string(buf_r);
  4320  0012E4  C031  F016         	movff	IR_LCD_display@buf_r,LCD_string@string
  4321  0012E8  C032  F017         	movff	IR_LCD_display@buf_r+1,LCD_string@string+1
  4322  0012EC  ECAB  F00B         	call	_LCD_string	;wreg free
  4323                           
  4324                           ;LCD.c: 106: SetLine(2);
  4325  0012F0  0E00               	movlw	0
  4326  0012F2  6E17               	movwf	SetLine@line+1,c
  4327  0012F4  0E02               	movlw	2
  4328  0012F6  6E16               	movwf	SetLine@line,c
  4329  0012F8  EC8F  F00B         	call	_SetLine	;wreg free
  4330                           
  4331                           ;LCD.c: 107: LCD_string(buf_l);
  4332  0012FC  C033  F016         	movff	IR_LCD_display@buf_l,LCD_string@string
  4333  001300  C034  F017         	movff	IR_LCD_display@buf_l+1,LCD_string@string+1
  4334  001304  ECAB  F00B         	call	_LCD_string	;wreg free
  4335                           
  4336                           ;LCD.c: 109: _delay((unsigned long)((50)*(8000000/4000.0)));
  4337  001308  0E82               	movlw	130
  4338  00130A  6E37               	movwf	??_IR_LCD_display& (0+255),c
  4339  00130C  0EDE               	movlw	222
  4340  00130E                     u2647:
  4341  00130E  2EE8               	decfsz	wreg,f,c
  4342  001310  D7FE               	goto	u2647
  4343  001312  2E37               	decfsz	??_IR_LCD_display& (0+255),f,c
  4344  001314  D7FC               	goto	u2647
  4345                           
  4346                           ;LCD.c: 110: _delay((unsigned long)((50)*(8000000/4000.0)));
  4347  001316  0E82               	movlw	130
  4348  001318  6E37               	movwf	??_IR_LCD_display& (0+255),c
  4349  00131A  0EDE               	movlw	222
  4350  00131C                     u2657:
  4351  00131C  2EE8               	decfsz	wreg,f,c
  4352  00131E  D7FE               	goto	u2657
  4353  001320  2E37               	decfsz	??_IR_LCD_display& (0+255),f,c
  4354  001322  D7FC               	goto	u2657
  4355                           
  4356                           ;LCD.c: 111: _delay((unsigned long)((50)*(8000000/4000.0)));
  4357  001324  0E82               	movlw	130
  4358  001326  6E37               	movwf	??_IR_LCD_display& (0+255),c
  4359  001328  0EDE               	movlw	222
  4360  00132A                     u2667:
  4361  00132A  2EE8               	decfsz	wreg,f,c
  4362  00132C  D7FE               	goto	u2667
  4363  00132E  2E37               	decfsz	??_IR_LCD_display& (0+255),f,c
  4364  001330  D7FC               	goto	u2667
  4365                           
  4366                           ;LCD.c: 112: _delay((unsigned long)((50)*(8000000/4000.0)));
  4367  001332  0E82               	movlw	130
  4368  001334  6E37               	movwf	??_IR_LCD_display& (0+255),c
  4369  001336  0EDE               	movlw	222
  4370  001338                     u2677:
  4371  001338  2EE8               	decfsz	wreg,f,c
  4372  00133A  D7FE               	goto	u2677
  4373  00133C  2E37               	decfsz	??_IR_LCD_display& (0+255),f,c
  4374  00133E  D7FC               	goto	u2677
  4375  001340  0012               	return		;funcret
  4376  001342                     __end_of_IR_LCD_display:
  4377                           	opt stack 0
  4378                           tblptru	equ	0xFF8
  4379                           prodh	equ	0xFF4
  4380                           prodl	equ	0xFF3
  4381                           intcon	equ	0xFF2
  4382                           intcon3	equ	0xFF0
  4383                           postinc0	equ	0xFEE
  4384                           wreg	equ	0xFE8
  4385                           postinc1	equ	0xFE6
  4386                           postdec1	equ	0xFE5
  4387                           fsr1h	equ	0xFE2
  4388                           fsr1l	equ	0xFE1
  4389                           indf2	equ	0xFDF
  4390                           postinc2	equ	0xFDE
  4391                           postdec2	equ	0xFDD
  4392                           plusw2	equ	0xFDB
  4393                           fsr2h	equ	0xFDA
  4394                           fsr2l	equ	0xFD9
  4395                           status	equ	0xFD8
  4396                           
  4397 ;; *************** function _sprintf *****************
  4398 ;; Defined at:
  4399 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  4400 ;; Parameters:    Size  Location     Type
  4401 ;;  sp              2   27[COMRAM] PTR unsigned char 
  4402 ;;		 -> check_sum@buf_cs(16), main@buf_l(16), main@buf_r(16), 
  4403 ;;  f               2   29[COMRAM] PTR const unsigned char 
  4404 ;;		 -> STR_4(16), STR_3(14), STR_2(13), STR_1(13), 
  4405 ;; Auto vars:     Size  Location     Type
  4406 ;;  tmpval          4    0        struct .
  4407 ;;  cp              3    0        PTR const unsigned char 
  4408 ;;  width           2   45[COMRAM] int 
  4409 ;;  val             2   42[COMRAM] unsigned int 
  4410 ;;  ap              2   39[COMRAM] PTR void [1]
  4411 ;;		 -> ?_sprintf(2), 
  4412 ;;  len             2    0        unsigned int 
  4413 ;;  c               1   47[COMRAM] char 
  4414 ;;  flag            1   44[COMRAM] unsigned char 
  4415 ;;  prec            1   41[COMRAM] char 
  4416 ;; Return value:  Size  Location     Type
  4417 ;;                  2   27[COMRAM] int 
  4418 ;; Registers used:
  4419 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4420 ;; Tracked objects:
  4421 ;;		On entry : 0/0
  4422 ;;		On exit  : 0/0
  4423 ;;		Unchanged: 0/0
  4424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4425 ;;      Params:         8       0       0       0
  4426 ;;      Locals:         9       0       0       0
  4427 ;;      Temps:          4       0       0       0
  4428 ;;      Totals:        21       0       0       0
  4429 ;;Total ram usage:       21 bytes
  4430 ;; Hardware stack levels used:    1
  4431 ;; Hardware stack levels required when called:    2
  4432 ;; This function calls:
  4433 ;;		___lwdiv
  4434 ;;		___lwmod
  4435 ;;		___wmul
  4436 ;;		_isdigit
  4437 ;; This function is called by:
  4438 ;;		_IR_LCD_display
  4439 ;;		_check_sum
  4440 ;; This function uses a non-reentrant model
  4441 ;;
  4442                           
  4443                           	psect	text21
  4444  0009A2                     __ptext21:
  4445                           	opt stack 0
  4446  0009A2                     _sprintf:
  4447                           	opt stack 27
  4448                           
  4449                           ;doprnt.c: 494: va_list ap;
  4450                           ;doprnt.c: 499: signed char c;
  4451                           ;doprnt.c: 501: int width;
  4452                           ;doprnt.c: 506: signed char prec;
  4453                           ;doprnt.c: 508: unsigned char flag;
  4454                           ;doprnt.c: 523: union {
  4455                           ;doprnt.c: 524: unsigned long vd;
  4456                           ;doprnt.c: 525: double integ;
  4457                           ;doprnt.c: 526: } tmpval;
  4458                           ;doprnt.c: 528: unsigned int val;
  4459                           ;doprnt.c: 529: unsigned len;
  4460                           ;doprnt.c: 530: const char * cp;
  4461                           ;doprnt.c: 533: *ap = __va_start();
  4462                           
  4463                           ;incstack = 0
  4464  0009A2  0E20               	movlw	low (?_sprintf+4)
  4465  0009A4  6E28               	movwf	sprintf@ap,c
  4466  0009A6  0E00               	movlw	high (?_sprintf+4)
  4467  0009A8  6E29               	movwf	sprintf@ap+1,c
  4468                           
  4469                           ;doprnt.c: 536: while(c = *f++) {
  4470  0009AA  D12F               	goto	l2761
  4471  0009AC                     l2655:
  4472                           
  4473                           ;doprnt.c: 538: if(c != '%')
  4474  0009AC  0E25               	movlw	37
  4475  0009AE  1830               	xorwf	sprintf@c,w,c
  4476  0009B0  B4D8               	btfsc	status,2,c
  4477  0009B2  D009               	goto	l2661
  4478                           
  4479                           ;doprnt.c: 540: {
  4480                           ;doprnt.c: 541: ((*sp++ = (c)));
  4481  0009B4  C01C  FFD9         	movff	sprintf@sp,fsr2l
  4482  0009B8  C01D  FFDA         	movff	sprintf@sp+1,fsr2h
  4483  0009BC  C030  FFDF         	movff	sprintf@c,indf2
  4484  0009C0  4A1C               	infsnz	sprintf@sp,f,c
  4485  0009C2  2A1D               	incf	sprintf@sp+1,f,c
  4486                           
  4487                           ;doprnt.c: 542: continue;
  4488  0009C4  D122               	goto	l2761
  4489  0009C6                     l2661:
  4490                           
  4491                           ;doprnt.c: 543: }
  4492                           ;doprnt.c: 546: width = 0;
  4493  0009C6  0E00               	movlw	0
  4494  0009C8  6E2F               	movwf	sprintf@width+1,c
  4495  0009CA  0E00               	movlw	0
  4496  0009CC  6E2E               	movwf	sprintf@width,c
  4497                           
  4498                           ;doprnt.c: 548: flag = 0;
  4499  0009CE  0E00               	movlw	0
  4500  0009D0  6E2D               	movwf	sprintf@flag,c
  4501                           
  4502                           ;doprnt.c: 551: switch(*f) {
  4503                           
  4504                           ;doprnt.c: 550: for(;;) {
  4505  0009D2  D003               	goto	l2667
  4506  0009D4                     l2663:
  4507                           
  4508                           ;doprnt.c: 580: flag |= 0x04;
  4509  0009D4  842D               	bsf	sprintf@flag,2,c
  4510                           
  4511                           ;doprnt.c: 581: f++;
  4512  0009D6  4A1E               	infsnz	sprintf@f,f,c
  4513  0009D8  2A1F               	incf	sprintf@f+1,f,c
  4514  0009DA                     l2667:
  4515  0009DA  C01E  FFF6         	movff	sprintf@f,tblptrl
  4516  0009DE  C01F  FFF7         	movff	sprintf@f+1,tblptrh
  4517  0009E2                     	if	0	;tblptru may be non-zero
  4518  0009E2                     	endif
  4519  0009E2                     	if	0	;tblptru may be non-zero
  4520  0009E2                     	endif
  4521  0009E2  0008               	tblrd		*
  4522  0009E4  50F5               	movf	tablat,w,c
  4523                           
  4524                           ; Switch size 1, requested type "space"
  4525                           ; Number of cases is 1, Range of values is 48 to 48
  4526                           ; switch strategies available:
  4527                           ; Name         Instructions Cycles
  4528                           ; simple_byte            4     3 (average)
  4529                           ;	Chosen strategy is simple_byte
  4530  0009E6  0A30               	xorlw	48	; case 48
  4531  0009E8  B4D8               	btfsc	status,2,c
  4532  0009EA  D7F4               	goto	l2663
  4533                           
  4534                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4535                           
  4536                           ;doprnt.c: 586: }
  4537                           
  4538                           ;doprnt.c: 585: break;
  4539  0009EC  C01E  FFF6         	movff	sprintf@f,tblptrl
  4540  0009F0  C01F  FFF7         	movff	sprintf@f+1,tblptrh
  4541  0009F4                     	if	0	;tblptru may be non-zero
  4542  0009F4                     	endif
  4543  0009F4                     	if	0	;tblptru may be non-zero
  4544  0009F4                     	endif
  4545  0009F4  0008               	tblrd		*
  4546  0009F6  50F5               	movf	tablat,w,c
  4547  0009F8  EC41  F00C         	call	_isdigit
  4548  0009FC  A0D8               	btfss	status,0,c
  4549  0009FE  D032               	goto	l2683
  4550                           
  4551                           ;doprnt.c: 598: width = 0;
  4552  000A00  0E00               	movlw	0
  4553  000A02  6E2F               	movwf	sprintf@width+1,c
  4554  000A04  0E00               	movlw	0
  4555  000A06  6E2E               	movwf	sprintf@width,c
  4556  000A08                     l2673:
  4557                           
  4558                           ;doprnt.c: 600: width *= 10;
  4559  000A08  C02E  F010         	movff	sprintf@width,___wmul@multiplier
  4560  000A0C  C02F  F011         	movff	sprintf@width+1,___wmul@multiplier+1
  4561  000A10  0E00               	movlw	0
  4562  000A12  6E13               	movwf	___wmul@multiplicand+1,c
  4563  000A14  0E0A               	movlw	10
  4564  000A16  6E12               	movwf	___wmul@multiplicand,c
  4565  000A18  ECF1  F00B         	call	___wmul	;wreg free
  4566  000A1C  C010  F02E         	movff	?___wmul,sprintf@width
  4567  000A20  C011  F02F         	movff	?___wmul+1,sprintf@width+1
  4568                           
  4569                           ;doprnt.c: 601: width += *f++ - '0';
  4570  000A24  0ED0               	movlw	208
  4571  000A26  6E24               	movwf	??_sprintf& (0+255),c
  4572  000A28  0EFF               	movlw	255
  4573  000A2A  6E25               	movwf	(??_sprintf+1)& (0+255),c
  4574  000A2C  C01E  FFF6         	movff	sprintf@f,tblptrl
  4575  000A30  C01F  FFF7         	movff	sprintf@f+1,tblptrh
  4576  000A34                     	if	0	;tblptru may be non-zero
  4577  000A34                     	endif
  4578  000A34                     	if	0	;tblptru may be non-zero
  4579  000A34                     	endif
  4580  000A34  0008               	tblrd		*
  4581  000A36  50F5               	movf	tablat,w,c
  4582  000A38  6E26               	movwf	(??_sprintf+2)& (0+255),c
  4583  000A3A  6A27               	clrf	(??_sprintf+3)& (0+255),c
  4584  000A3C  5024               	movf	??_sprintf,w,c
  4585  000A3E  2626               	addwf	??_sprintf+2,f,c
  4586  000A40  5025               	movf	??_sprintf+1,w,c
  4587  000A42  2227               	addwfc	??_sprintf+3,f,c
  4588  000A44  5026               	movf	??_sprintf+2,w,c
  4589  000A46  262E               	addwf	sprintf@width,f,c
  4590  000A48  5027               	movf	??_sprintf+3,w,c
  4591  000A4A  222F               	addwfc	sprintf@width+1,f,c
  4592  000A4C  4A1E               	infsnz	sprintf@f,f,c
  4593  000A4E  2A1F               	incf	sprintf@f+1,f,c
  4594                           
  4595                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4596  000A50  C01E  FFF6         	movff	sprintf@f,tblptrl
  4597  000A54  C01F  FFF7         	movff	sprintf@f+1,tblptrh
  4598  000A58                     	if	0	;tblptru may be non-zero
  4599  000A58                     	endif
  4600  000A58                     	if	0	;tblptru may be non-zero
  4601  000A58                     	endif
  4602  000A58  0008               	tblrd		*
  4603  000A5A  50F5               	movf	tablat,w,c
  4604  000A5C  EC41  F00C         	call	_isdigit
  4605  000A60  B0D8               	btfsc	status,0,c
  4606  000A62  D7D2               	goto	l2673
  4607  000A64                     l2683:
  4608  000A64  C01E  FFF6         	movff	sprintf@f,tblptrl
  4609  000A68  C01F  FFF7         	movff	sprintf@f+1,tblptrh
  4610  000A6C  4A1E               	infsnz	sprintf@f,f,c
  4611  000A6E  2A1F               	incf	sprintf@f+1,f,c
  4612  000A70                     	if	0	;tblptru may be non-zero
  4613  000A70                     	endif
  4614  000A70                     	if	0	;tblptru may be non-zero
  4615  000A70                     	endif
  4616  000A70  0008               	tblrd		*
  4617  000A72  CFF5 F030          	movff	tablat,sprintf@c
  4618  000A76  5030               	movf	sprintf@c,w,c
  4619                           
  4620                           ; Switch size 1, requested type "space"
  4621                           ; Number of cases is 3, Range of values is 0 to 105
  4622                           ; switch strategies available:
  4623                           ; Name         Instructions Cycles
  4624                           ; simple_byte           10     6 (average)
  4625                           ;	Chosen strategy is simple_byte
  4626  000A78  0A00               	xorlw	0	; case 0
  4627  000A7A  B4D8               	btfsc	status,2,c
  4628  000A7C  D0D2               	goto	l2763
  4629  000A7E  0A64               	xorlw	100	; case 100
  4630  000A80  B4D8               	btfsc	status,2,c
  4631  000A82  D003               	goto	l2685
  4632  000A84  0A0D               	xorlw	13	; case 105
  4633  000A86  A4D8               	btfss	status,2,c
  4634  000A88  D0C0               	goto	l2761
  4635  000A8A                     l2685:
  4636                           
  4637                           ;doprnt.c: 1253: {
  4638                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4639  000A8A  C028  FFD9         	movff	sprintf@ap,fsr2l
  4640  000A8E  C029  FFDA         	movff	sprintf@ap+1,fsr2h
  4641  000A92  CFDE F02B          	movff	postinc2,sprintf@val
  4642  000A96  CFDD F02C          	movff	postdec2,sprintf@val+1
  4643  000A9A  0E02               	movlw	2
  4644  000A9C  2628               	addwf	sprintf@ap,f,c
  4645  000A9E  0E00               	movlw	0
  4646  000AA0  2229               	addwfc	sprintf@ap+1,f,c
  4647                           
  4648                           ;doprnt.c: 1261: if((int)val < 0) {
  4649  000AA2  AE2C               	btfss	sprintf@val+1,7,c
  4650  000AA4  D006               	goto	l2695
  4651                           
  4652                           ;doprnt.c: 1262: flag |= 0x03;
  4653  000AA6  0E03               	movlw	3
  4654  000AA8  122D               	iorwf	sprintf@flag,f,c
  4655                           
  4656                           ;doprnt.c: 1263: val = -val;
  4657  000AAA  6C2B               	negf	sprintf@val,c
  4658  000AAC  1E2C               	comf	sprintf@val+1,f,c
  4659  000AAE  B0D8               	btfsc	status,0,c
  4660  000AB0  2A2C               	incf	sprintf@val+1,f,c
  4661  000AB2                     l2695:
  4662                           
  4663                           ;doprnt.c: 1264: }
  4664                           ;doprnt.c: 1266: }
  4665                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4666  000AB2  0E01               	movlw	1
  4667  000AB4  6E30               	movwf	sprintf@c,c
  4668  000AB6                     l2697:
  4669  000AB6  0E05               	movlw	5
  4670  000AB8  1830               	xorwf	sprintf@c,w,c
  4671  000ABA  B4D8               	btfsc	status,2,c
  4672  000ABC  D012               	goto	l2709
  4673                           
  4674                           ;doprnt.c: 1306: if(val < dpowers[c])
  4675  000ABE  5030               	movf	sprintf@c,w,c
  4676  000AC0  0D02               	mullw	2
  4677  000AC2  0E01               	movlw	low _dpowers
  4678  000AC4  24F3               	addwf	prodl,w,c
  4679  000AC6  6EF6               	movwf	tblptrl,c
  4680  000AC8  0E03               	movlw	high _dpowers
  4681  000ACA  20F4               	addwfc	prodh,w,c
  4682  000ACC  6EF7               	movwf	tblptrh,c
  4683  000ACE                     	if	0	;There are less than 3 active tblptr bytes
  4684  000ACE                     	endif
  4685  000ACE  0009               	tblrd		*+
  4686  000AD0  50F5               	movf	tablat,w,c
  4687  000AD2  5C2B               	subwf	sprintf@val,w,c
  4688  000AD4  0009               	tblrd		*+
  4689  000AD6  50F5               	movf	tablat,w,c
  4690  000AD8  582C               	subwfb	sprintf@val+1,w,c
  4691  000ADA  A0D8               	btfss	status,0,c
  4692  000ADC  D002               	goto	l2709
  4693                           
  4694                           ;doprnt.c: 1307: break;
  4695  000ADE  2A30               	incf	sprintf@c,f,c
  4696  000AE0  D7EA               	goto	l2697
  4697  000AE2                     l2709:
  4698                           
  4699                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4700  000AE2  502E               	movf	sprintf@width,w,c
  4701  000AE4  102F               	iorwf	sprintf@width+1,w,c
  4702  000AE6  B4D8               	btfsc	status,2,c
  4703  000AE8  D009               	goto	l2715
  4704  000AEA  C02D  F024         	movff	sprintf@flag,??_sprintf
  4705  000AEE  0E03               	movlw	3
  4706  000AF0  1624               	andwf	??_sprintf,f,c
  4707  000AF2  B4D8               	btfsc	status,2,c
  4708  000AF4  D003               	goto	l2715
  4709                           
  4710                           ;doprnt.c: 1346: width--;
  4711  000AF6  062E               	decf	sprintf@width,f,c
  4712  000AF8  A0D8               	btfss	status,0,c
  4713  000AFA  062F               	decf	sprintf@width+1,f,c
  4714  000AFC                     l2715:
  4715                           
  4716                           ;doprnt.c: 1381: if(width > c)
  4717  000AFC  0E80               	movlw	128
  4718  000AFE  BE30               	btfsc	sprintf@c,7,c
  4719  000B00  0E7F               	movlw	127
  4720  000B02  6E24               	movwf	??_sprintf& (0+255),c
  4721  000B04  502E               	movf	sprintf@width,w,c
  4722  000B06  5C30               	subwf	sprintf@c,w,c
  4723  000B08  502F               	movf	sprintf@width+1,w,c
  4724  000B0A  0A80               	xorlw	128
  4725  000B0C  5824               	subwfb	??_sprintf& (0+255),w,c
  4726  000B0E  B0D8               	btfsc	status,0,c
  4727  000B10  D007               	goto	l2719
  4728                           
  4729                           ;doprnt.c: 1382: width -= c;
  4730  000B12  5030               	movf	sprintf@c,w,c
  4731  000B14  5E2E               	subwf	sprintf@width,f,c
  4732  000B16  0E00               	movlw	0
  4733  000B18  BE30               	btfsc	sprintf@c,7,c
  4734  000B1A  0EFF               	movlw	255
  4735  000B1C  5A2F               	subwfb	sprintf@width+1,f,c
  4736  000B1E  D004               	goto	l2721
  4737  000B20                     l2719:
  4738                           
  4739                           ;doprnt.c: 1383: else
  4740                           ;doprnt.c: 1384: width = 0;
  4741  000B20  0E00               	movlw	0
  4742  000B22  6E2F               	movwf	sprintf@width+1,c
  4743  000B24  0E00               	movlw	0
  4744  000B26  6E2E               	movwf	sprintf@width,c
  4745  000B28                     l2721:
  4746                           
  4747                           ;doprnt.c: 1387: if(flag & 0x04) {
  4748  000B28  A42D               	btfss	sprintf@flag,2,c
  4749  000B2A  D01E               	goto	l2737
  4750                           
  4751                           ;doprnt.c: 1392: if(flag & 0x03)
  4752  000B2C  C02D  F024         	movff	sprintf@flag,??_sprintf
  4753  000B30  0E03               	movlw	3
  4754  000B32  1624               	andwf	??_sprintf,f,c
  4755  000B34  B4D8               	btfsc	status,2,c
  4756  000B36  D008               	goto	l2729
  4757                           
  4758                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  4759  000B38  C01C  FFD9         	movff	sprintf@sp,fsr2l
  4760  000B3C  C01D  FFDA         	movff	sprintf@sp+1,fsr2h
  4761  000B40  0E2D               	movlw	45
  4762  000B42  6EDF               	movwf	indf2,c
  4763  000B44  4A1C               	infsnz	sprintf@sp,f,c
  4764  000B46  2A1D               	incf	sprintf@sp+1,f,c
  4765  000B48                     l2729:
  4766                           
  4767                           ;doprnt.c: 1415: if(width)
  4768  000B48  502E               	movf	sprintf@width,w,c
  4769  000B4A  102F               	iorwf	sprintf@width+1,w,c
  4770  000B4C  B4D8               	btfsc	status,2,c
  4771  000B4E  D02D               	goto	l2751
  4772                           
  4773                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  4774                           
  4775                           ;doprnt.c: 1416: do
  4776  000B50  C01C  FFD9         	movff	sprintf@sp,fsr2l
  4777  000B54  C01D  FFDA         	movff	sprintf@sp+1,fsr2h
  4778  000B58  0E30               	movlw	48
  4779  000B5A  6EDF               	movwf	indf2,c
  4780  000B5C  4A1C               	infsnz	sprintf@sp,f,c
  4781  000B5E  2A1D               	incf	sprintf@sp+1,f,c
  4782                           
  4783                           ;doprnt.c: 1418: while(--width);
  4784  000B60  062E               	decf	sprintf@width,f,c
  4785  000B62  A0D8               	btfss	status,0,c
  4786  000B64  062F               	decf	sprintf@width+1,f,c
  4787  000B66  D7F0               	goto	l2729
  4788  000B68                     l2737:
  4789                           
  4790                           ;doprnt.c: 1422: {
  4791                           ;doprnt.c: 1424: if(width
  4792                           ;doprnt.c: 1428: )
  4793  000B68  502E               	movf	sprintf@width,w,c
  4794  000B6A  102F               	iorwf	sprintf@width+1,w,c
  4795  000B6C  B4D8               	btfsc	status,2,c
  4796  000B6E  D00F               	goto	l2745
  4797  000B70                     l2739:
  4798                           
  4799                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  4800  000B70  C01C  FFD9         	movff	sprintf@sp,fsr2l
  4801  000B74  C01D  FFDA         	movff	sprintf@sp+1,fsr2h
  4802  000B78  0E20               	movlw	32
  4803  000B7A  6EDF               	movwf	indf2,c
  4804  000B7C  4A1C               	infsnz	sprintf@sp,f,c
  4805  000B7E  2A1D               	incf	sprintf@sp+1,f,c
  4806                           
  4807                           ;doprnt.c: 1431: while(--width);
  4808  000B80  062E               	decf	sprintf@width,f,c
  4809  000B82  A0D8               	btfss	status,0,c
  4810  000B84  062F               	decf	sprintf@width+1,f,c
  4811  000B86  502E               	movf	sprintf@width,w,c
  4812  000B88  102F               	iorwf	sprintf@width+1,w,c
  4813  000B8A  A4D8               	btfss	status,2,c
  4814  000B8C  D7F1               	goto	l2739
  4815  000B8E                     l2745:
  4816                           
  4817                           ;doprnt.c: 1438: if(flag & 0x03)
  4818  000B8E  C02D  F024         	movff	sprintf@flag,??_sprintf
  4819  000B92  0E03               	movlw	3
  4820  000B94  1624               	andwf	??_sprintf,f,c
  4821  000B96  B4D8               	btfsc	status,2,c
  4822  000B98  D008               	goto	l2751
  4823                           
  4824                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  4825  000B9A  C01C  FFD9         	movff	sprintf@sp,fsr2l
  4826  000B9E  C01D  FFDA         	movff	sprintf@sp+1,fsr2h
  4827  000BA2  0E2D               	movlw	45
  4828  000BA4  6EDF               	movwf	indf2,c
  4829  000BA6  4A1C               	infsnz	sprintf@sp,f,c
  4830  000BA8  2A1D               	incf	sprintf@sp+1,f,c
  4831  000BAA                     l2751:
  4832                           
  4833                           ;doprnt.c: 1469: }
  4834                           ;doprnt.c: 1472: prec = c;
  4835  000BAA  C030  F02A         	movff	sprintf@c,sprintf@prec
  4836                           
  4837                           ;doprnt.c: 1474: while(prec--) {
  4838  000BAE  D029               	goto	l2759
  4839  000BB0                     l2753:
  4840                           
  4841                           ;doprnt.c: 1478: {
  4842                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4843  000BB0  502A               	movf	sprintf@prec,w,c
  4844  000BB2  0D02               	mullw	2
  4845  000BB4  0E01               	movlw	low _dpowers
  4846  000BB6  24F3               	addwf	prodl,w,c
  4847  000BB8  6EF6               	movwf	tblptrl,c
  4848  000BBA  0E03               	movlw	high _dpowers
  4849  000BBC  20F4               	addwfc	prodh,w,c
  4850  000BBE  6EF7               	movwf	tblptrh,c
  4851  000BC0                     	if	0	;There are less than 3 active tblptr bytes
  4852  000BC0                     	endif
  4853  000BC0  0009               	tblrd		*+
  4854  000BC2  CFF5 F012          	movff	tablat,___lwdiv@divisor
  4855  000BC6  000A               	tblrd		*-
  4856  000BC8  CFF5 F013          	movff	tablat,___lwdiv@divisor+1
  4857  000BCC  C02B  F010         	movff	sprintf@val,___lwdiv@dividend
  4858  000BD0  C02C  F011         	movff	sprintf@val+1,___lwdiv@dividend+1
  4859  000BD4  EC83  F00A         	call	___lwdiv	;wreg free
  4860  000BD8  C010  F017         	movff	?___lwdiv,___lwmod@dividend
  4861  000BDC  C011  F018         	movff	?___lwdiv+1,___lwmod@dividend+1
  4862  000BE0  0E00               	movlw	0
  4863  000BE2  6E1A               	movwf	___lwmod@divisor+1,c
  4864  000BE4  0E0A               	movlw	10
  4865  000BE6  6E19               	movwf	___lwmod@divisor,c
  4866  000BE8  EC30  F00B         	call	___lwmod	;wreg free
  4867  000BEC  5017               	movf	?___lwmod,w,c
  4868  000BEE  0F30               	addlw	48
  4869  000BF0  6E30               	movwf	sprintf@c,c
  4870                           
  4871                           ;doprnt.c: 1523: }
  4872                           ;doprnt.c: 1524: ((*sp++ = (c)));
  4873  000BF2  C01C  FFD9         	movff	sprintf@sp,fsr2l
  4874  000BF6  C01D  FFDA         	movff	sprintf@sp+1,fsr2h
  4875  000BFA  C030  FFDF         	movff	sprintf@c,indf2
  4876  000BFE  4A1C               	infsnz	sprintf@sp,f,c
  4877  000C00  2A1D               	incf	sprintf@sp+1,f,c
  4878  000C02                     l2759:
  4879  000C02  062A               	decf	sprintf@prec,f,c
  4880  000C04  282A               	incf	sprintf@prec,w,c
  4881  000C06  A4D8               	btfss	status,2,c
  4882  000C08  D7D3               	goto	l2753
  4883  000C0A                     l2761:
  4884  000C0A  C01E  FFF6         	movff	sprintf@f,tblptrl
  4885  000C0E  C01F  FFF7         	movff	sprintf@f+1,tblptrh
  4886  000C12  4A1E               	infsnz	sprintf@f,f,c
  4887  000C14  2A1F               	incf	sprintf@f+1,f,c
  4888  000C16                     	if	0	;tblptru may be non-zero
  4889  000C16                     	endif
  4890  000C16                     	if	0	;tblptru may be non-zero
  4891  000C16                     	endif
  4892  000C16  0008               	tblrd		*
  4893  000C18  CFF5 F030          	movff	tablat,sprintf@c
  4894  000C1C  5030               	movf	sprintf@c,w,c
  4895  000C1E  A4D8               	btfss	status,2,c
  4896  000C20  D6C5               	goto	l2655
  4897  000C22                     l2763:
  4898                           
  4899                           ;doprnt.c: 1538: *sp = 0;
  4900  000C22  C01C  FFD9         	movff	sprintf@sp,fsr2l
  4901  000C26  C01D  FFDA         	movff	sprintf@sp+1,fsr2h
  4902  000C2A  0E00               	movlw	0
  4903  000C2C  6EDF               	movwf	indf2,c
  4904  000C2E  0012               	return	
  4905  000C30                     __end_of_sprintf:
  4906                           	opt stack 0
  4907                           tblptru	equ	0xFF8
  4908                           tblptrh	equ	0xFF7
  4909                           tblptrl	equ	0xFF6
  4910                           tablat	equ	0xFF5
  4911                           prodh	equ	0xFF4
  4912                           prodl	equ	0xFF3
  4913                           intcon	equ	0xFF2
  4914                           intcon3	equ	0xFF0
  4915                           postinc0	equ	0xFEE
  4916                           wreg	equ	0xFE8
  4917                           postinc1	equ	0xFE6
  4918                           postdec1	equ	0xFE5
  4919                           fsr1h	equ	0xFE2
  4920                           fsr1l	equ	0xFE1
  4921                           indf2	equ	0xFDF
  4922                           postinc2	equ	0xFDE
  4923                           postdec2	equ	0xFDD
  4924                           plusw2	equ	0xFDB
  4925                           fsr2h	equ	0xFDA
  4926                           fsr2l	equ	0xFD9
  4927                           status	equ	0xFD8
  4928                           
  4929 ;; *************** function _isdigit *****************
  4930 ;; Defined at:
  4931 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\isdigit.c"
  4932 ;; Parameters:    Size  Location     Type
  4933 ;;  c               1    wreg     unsigned char 
  4934 ;; Auto vars:     Size  Location     Type
  4935 ;;  c               1   17[COMRAM] unsigned char 
  4936 ;; Return value:  Size  Location     Type
  4937 ;;		None               void
  4938 ;; Registers used:
  4939 ;;		wreg, status,2, status,0
  4940 ;; Tracked objects:
  4941 ;;		On entry : 0/0
  4942 ;;		On exit  : 0/0
  4943 ;;		Unchanged: 0/0
  4944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4945 ;;      Params:         0       0       0       0
  4946 ;;      Locals:         2       0       0       0
  4947 ;;      Temps:          1       0       0       0
  4948 ;;      Totals:         3       0       0       0
  4949 ;;Total ram usage:        3 bytes
  4950 ;; Hardware stack levels used:    1
  4951 ;; Hardware stack levels required when called:    1
  4952 ;; This function calls:
  4953 ;;		Nothing
  4954 ;; This function is called by:
  4955 ;;		_sprintf
  4956 ;; This function uses a non-reentrant model
  4957 ;;
  4958                           
  4959                           	psect	text22
  4960  001882                     __ptext22:
  4961                           	opt stack 0
  4962  001882                     _isdigit:
  4963                           	opt stack 27
  4964                           
  4965                           ;incstack = 0
  4966                           ;isdigit@c stored from wreg
  4967  001882  6E12               	movwf	isdigit@c,c
  4968  001884  0E00               	movlw	0
  4969  001886  6E11               	movwf	_isdigit$1717,c
  4970  001888  0E3A               	movlw	58
  4971  00188A  6012               	cpfslt	isdigit@c,c
  4972  00188C  D005               	goto	l2577
  4973  00188E  0E2F               	movlw	47
  4974  001890  6412               	cpfsgt	isdigit@c,c
  4975  001892  D002               	goto	l2577
  4976  001894  0E01               	movlw	1
  4977  001896  6E11               	movwf	_isdigit$1717,c
  4978  001898                     l2577:
  4979  001898  C011  F010         	movff	_isdigit$1717,??_isdigit
  4980  00189C  3010               	rrcf	??_isdigit,w,c
  4981  00189E  0012               	return	
  4982  0018A0                     __end_of_isdigit:
  4983                           	opt stack 0
  4984                           tblptru	equ	0xFF8
  4985                           tblptrh	equ	0xFF7
  4986                           tblptrl	equ	0xFF6
  4987                           tablat	equ	0xFF5
  4988                           prodh	equ	0xFF4
  4989                           prodl	equ	0xFF3
  4990                           intcon	equ	0xFF2
  4991                           intcon3	equ	0xFF0
  4992                           postinc0	equ	0xFEE
  4993                           wreg	equ	0xFE8
  4994                           postinc1	equ	0xFE6
  4995                           postdec1	equ	0xFE5
  4996                           fsr1h	equ	0xFE2
  4997                           fsr1l	equ	0xFE1
  4998                           indf2	equ	0xFDF
  4999                           postinc2	equ	0xFDE
  5000                           postdec2	equ	0xFDD
  5001                           plusw2	equ	0xFDB
  5002                           fsr2h	equ	0xFDA
  5003                           fsr2l	equ	0xFD9
  5004                           status	equ	0xFD8
  5005                           
  5006 ;; *************** function ___wmul *****************
  5007 ;; Defined at:
  5008 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  5009 ;; Parameters:    Size  Location     Type
  5010 ;;  multiplier      2   15[COMRAM] unsigned int 
  5011 ;;  multiplicand    2   17[COMRAM] unsigned int 
  5012 ;; Auto vars:     Size  Location     Type
  5013 ;;  product         2   19[COMRAM] unsigned int 
  5014 ;; Return value:  Size  Location     Type
  5015 ;;                  2   15[COMRAM] unsigned int 
  5016 ;; Registers used:
  5017 ;;		wreg, status,2, status,0, prodl, prodh
  5018 ;; Tracked objects:
  5019 ;;		On entry : 0/0
  5020 ;;		On exit  : 0/0
  5021 ;;		Unchanged: 0/0
  5022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5023 ;;      Params:         4       0       0       0
  5024 ;;      Locals:         2       0       0       0
  5025 ;;      Temps:          0       0       0       0
  5026 ;;      Totals:         6       0       0       0
  5027 ;;Total ram usage:        6 bytes
  5028 ;; Hardware stack levels used:    1
  5029 ;; Hardware stack levels required when called:    1
  5030 ;; This function calls:
  5031 ;;		Nothing
  5032 ;; This function is called by:
  5033 ;;		_setMotorPWM
  5034 ;;		_sprintf
  5035 ;; This function uses a non-reentrant model
  5036 ;;
  5037                           
  5038                           	psect	text23
  5039  0017E2                     __ptext23:
  5040                           	opt stack 0
  5041  0017E2                     ___wmul:
  5042                           	opt stack 26
  5043                           
  5044                           ;incstack = 0
  5045  0017E2  5010               	movf	___wmul@multiplier,w,c
  5046  0017E4  0212               	mulwf	___wmul@multiplicand,c
  5047  0017E6  CFF3 F014          	movff	prodl,___wmul@product
  5048  0017EA  CFF4 F015          	movff	prodh,___wmul@product+1
  5049  0017EE  5010               	movf	___wmul@multiplier,w,c
  5050  0017F0  0213               	mulwf	___wmul@multiplicand+1,c
  5051  0017F2  50F3               	movf	prodl,w,c
  5052  0017F4  2615               	addwf	___wmul@product+1,f,c
  5053  0017F6  5011               	movf	___wmul@multiplier+1,w,c
  5054  0017F8  0212               	mulwf	___wmul@multiplicand,c
  5055  0017FA  50F3               	movf	prodl,w,c
  5056  0017FC  2615               	addwf	___wmul@product+1,f,c
  5057  0017FE  C014  F010         	movff	___wmul@product,?___wmul
  5058  001802  C015  F011         	movff	___wmul@product+1,?___wmul+1
  5059  001806  0012               	return	
  5060  001808                     __end_of___wmul:
  5061                           	opt stack 0
  5062                           tblptru	equ	0xFF8
  5063                           tblptrh	equ	0xFF7
  5064                           tblptrl	equ	0xFF6
  5065                           tablat	equ	0xFF5
  5066                           prodh	equ	0xFF4
  5067                           prodl	equ	0xFF3
  5068                           intcon	equ	0xFF2
  5069                           intcon3	equ	0xFF0
  5070                           postinc0	equ	0xFEE
  5071                           wreg	equ	0xFE8
  5072                           postinc1	equ	0xFE6
  5073                           postdec1	equ	0xFE5
  5074                           fsr1h	equ	0xFE2
  5075                           fsr1l	equ	0xFE1
  5076                           indf2	equ	0xFDF
  5077                           postinc2	equ	0xFDE
  5078                           postdec2	equ	0xFDD
  5079                           plusw2	equ	0xFDB
  5080                           fsr2h	equ	0xFDA
  5081                           fsr2l	equ	0xFD9
  5082                           status	equ	0xFD8
  5083                           
  5084 ;; *************** function ___lwmod *****************
  5085 ;; Defined at:
  5086 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwmod.c"
  5087 ;; Parameters:    Size  Location     Type
  5088 ;;  dividend        2   22[COMRAM] unsigned int 
  5089 ;;  divisor         2   24[COMRAM] unsigned int 
  5090 ;; Auto vars:     Size  Location     Type
  5091 ;;  counter         1   26[COMRAM] unsigned char 
  5092 ;; Return value:  Size  Location     Type
  5093 ;;                  2   22[COMRAM] unsigned int 
  5094 ;; Registers used:
  5095 ;;		wreg, status,2, status,0
  5096 ;; Tracked objects:
  5097 ;;		On entry : 0/0
  5098 ;;		On exit  : 0/0
  5099 ;;		Unchanged: 0/0
  5100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5101 ;;      Params:         4       0       0       0
  5102 ;;      Locals:         1       0       0       0
  5103 ;;      Temps:          0       0       0       0
  5104 ;;      Totals:         5       0       0       0
  5105 ;;Total ram usage:        5 bytes
  5106 ;; Hardware stack levels used:    1
  5107 ;; Hardware stack levels required when called:    1
  5108 ;; This function calls:
  5109 ;;		Nothing
  5110 ;; This function is called by:
  5111 ;;		_sprintf
  5112 ;; This function uses a non-reentrant model
  5113 ;;
  5114                           
  5115                           	psect	text24
  5116  001660                     __ptext24:
  5117                           	opt stack 0
  5118  001660                     ___lwmod:
  5119                           	opt stack 27
  5120                           
  5121                           ;incstack = 0
  5122  001660  5019               	movf	___lwmod@divisor,w,c
  5123  001662  101A               	iorwf	___lwmod@divisor+1,w,c
  5124  001664  B4D8               	btfsc	status,2,c
  5125  001666  D018               	goto	l788
  5126  001668  0E01               	movlw	1
  5127  00166A  6E1B               	movwf	___lwmod@counter,c
  5128  00166C  D004               	goto	l2609
  5129  00166E                     l2607:
  5130  00166E  90D8               	bcf	status,0,c
  5131  001670  3619               	rlcf	___lwmod@divisor,f,c
  5132  001672  361A               	rlcf	___lwmod@divisor+1,f,c
  5133  001674  2A1B               	incf	___lwmod@counter,f,c
  5134  001676                     l2609:
  5135  001676  AE1A               	btfss	___lwmod@divisor+1,7,c
  5136  001678  D7FA               	goto	l2607
  5137  00167A                     l2611:
  5138  00167A  5019               	movf	___lwmod@divisor,w,c
  5139  00167C  5C17               	subwf	___lwmod@dividend,w,c
  5140  00167E  501A               	movf	___lwmod@divisor+1,w,c
  5141  001680  5818               	subwfb	___lwmod@dividend+1,w,c
  5142  001682  A0D8               	btfss	status,0,c
  5143  001684  D004               	goto	l2615
  5144  001686  5019               	movf	___lwmod@divisor,w,c
  5145  001688  5E17               	subwf	___lwmod@dividend,f,c
  5146  00168A  501A               	movf	___lwmod@divisor+1,w,c
  5147  00168C  5A18               	subwfb	___lwmod@dividend+1,f,c
  5148  00168E                     l2615:
  5149  00168E  90D8               	bcf	status,0,c
  5150  001690  321A               	rrcf	___lwmod@divisor+1,f,c
  5151  001692  3219               	rrcf	___lwmod@divisor,f,c
  5152  001694  2E1B               	decfsz	___lwmod@counter,f,c
  5153  001696  D7F1               	goto	l2611
  5154  001698                     l788:
  5155  001698  C017  F017         	movff	___lwmod@dividend,?___lwmod
  5156  00169C  C018  F018         	movff	___lwmod@dividend+1,?___lwmod+1
  5157  0016A0  0012               	return		;funcret
  5158  0016A2                     __end_of___lwmod:
  5159                           	opt stack 0
  5160                           tblptru	equ	0xFF8
  5161                           tblptrh	equ	0xFF7
  5162                           tblptrl	equ	0xFF6
  5163                           tablat	equ	0xFF5
  5164                           prodh	equ	0xFF4
  5165                           prodl	equ	0xFF3
  5166                           intcon	equ	0xFF2
  5167                           intcon3	equ	0xFF0
  5168                           postinc0	equ	0xFEE
  5169                           wreg	equ	0xFE8
  5170                           postinc1	equ	0xFE6
  5171                           postdec1	equ	0xFE5
  5172                           fsr1h	equ	0xFE2
  5173                           fsr1l	equ	0xFE1
  5174                           indf2	equ	0xFDF
  5175                           postinc2	equ	0xFDE
  5176                           postdec2	equ	0xFDD
  5177                           plusw2	equ	0xFDB
  5178                           fsr2h	equ	0xFDA
  5179                           fsr2l	equ	0xFD9
  5180                           status	equ	0xFD8
  5181                           
  5182 ;; *************** function ___lwdiv *****************
  5183 ;; Defined at:
  5184 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwdiv.c"
  5185 ;; Parameters:    Size  Location     Type
  5186 ;;  dividend        2   15[COMRAM] unsigned int 
  5187 ;;  divisor         2   17[COMRAM] unsigned int 
  5188 ;; Auto vars:     Size  Location     Type
  5189 ;;  quotient        2   20[COMRAM] unsigned int 
  5190 ;;  counter         1   19[COMRAM] unsigned char 
  5191 ;; Return value:  Size  Location     Type
  5192 ;;                  2   15[COMRAM] unsigned int 
  5193 ;; Registers used:
  5194 ;;		wreg, status,2, status,0
  5195 ;; Tracked objects:
  5196 ;;		On entry : 0/0
  5197 ;;		On exit  : 0/0
  5198 ;;		Unchanged: 0/0
  5199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5200 ;;      Params:         4       0       0       0
  5201 ;;      Locals:         3       0       0       0
  5202 ;;      Temps:          0       0       0       0
  5203 ;;      Totals:         7       0       0       0
  5204 ;;Total ram usage:        7 bytes
  5205 ;; Hardware stack levels used:    1
  5206 ;; Hardware stack levels required when called:    1
  5207 ;; This function calls:
  5208 ;;		Nothing
  5209 ;; This function is called by:
  5210 ;;		_sprintf
  5211 ;; This function uses a non-reentrant model
  5212 ;;
  5213                           
  5214                           	psect	text25
  5215  001506                     __ptext25:
  5216                           	opt stack 0
  5217  001506                     ___lwdiv:
  5218                           	opt stack 27
  5219                           
  5220                           ;incstack = 0
  5221  001506  0E00               	movlw	0
  5222  001508  6E16               	movwf	___lwdiv@quotient+1,c
  5223  00150A  0E00               	movlw	0
  5224  00150C  6E15               	movwf	___lwdiv@quotient,c
  5225  00150E  5012               	movf	___lwdiv@divisor,w,c
  5226  001510  1013               	iorwf	___lwdiv@divisor+1,w,c
  5227  001512  B4D8               	btfsc	status,2,c
  5228  001514  D01C               	goto	l778
  5229  001516  0E01               	movlw	1
  5230  001518  6E14               	movwf	___lwdiv@counter,c
  5231  00151A  D004               	goto	l2589
  5232  00151C                     l2587:
  5233  00151C  90D8               	bcf	status,0,c
  5234  00151E  3612               	rlcf	___lwdiv@divisor,f,c
  5235  001520  3613               	rlcf	___lwdiv@divisor+1,f,c
  5236  001522  2A14               	incf	___lwdiv@counter,f,c
  5237  001524                     l2589:
  5238  001524  AE13               	btfss	___lwdiv@divisor+1,7,c
  5239  001526  D7FA               	goto	l2587
  5240  001528                     l2591:
  5241  001528  90D8               	bcf	status,0,c
  5242  00152A  3615               	rlcf	___lwdiv@quotient,f,c
  5243  00152C  3616               	rlcf	___lwdiv@quotient+1,f,c
  5244  00152E  5012               	movf	___lwdiv@divisor,w,c
  5245  001530  5C10               	subwf	___lwdiv@dividend,w,c
  5246  001532  5013               	movf	___lwdiv@divisor+1,w,c
  5247  001534  5811               	subwfb	___lwdiv@dividend+1,w,c
  5248  001536  A0D8               	btfss	status,0,c
  5249  001538  D005               	goto	l2599
  5250  00153A  5012               	movf	___lwdiv@divisor,w,c
  5251  00153C  5E10               	subwf	___lwdiv@dividend,f,c
  5252  00153E  5013               	movf	___lwdiv@divisor+1,w,c
  5253  001540  5A11               	subwfb	___lwdiv@dividend+1,f,c
  5254  001542  8015               	bsf	___lwdiv@quotient,0,c
  5255  001544                     l2599:
  5256  001544  90D8               	bcf	status,0,c
  5257  001546  3213               	rrcf	___lwdiv@divisor+1,f,c
  5258  001548  3212               	rrcf	___lwdiv@divisor,f,c
  5259  00154A  2E14               	decfsz	___lwdiv@counter,f,c
  5260  00154C  D7ED               	goto	l2591
  5261  00154E                     l778:
  5262  00154E  C015  F010         	movff	___lwdiv@quotient,?___lwdiv
  5263  001552  C016  F011         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5264  001556  0012               	return		;funcret
  5265  001558                     __end_of___lwdiv:
  5266                           	opt stack 0
  5267                           tblptru	equ	0xFF8
  5268                           tblptrh	equ	0xFF7
  5269                           tblptrl	equ	0xFF6
  5270                           tablat	equ	0xFF5
  5271                           prodh	equ	0xFF4
  5272                           prodl	equ	0xFF3
  5273                           intcon	equ	0xFF2
  5274                           intcon3	equ	0xFF0
  5275                           postinc0	equ	0xFEE
  5276                           wreg	equ	0xFE8
  5277                           postinc1	equ	0xFE6
  5278                           postdec1	equ	0xFE5
  5279                           fsr1h	equ	0xFE2
  5280                           fsr1l	equ	0xFE1
  5281                           indf2	equ	0xFDF
  5282                           postinc2	equ	0xFDE
  5283                           postdec2	equ	0xFDD
  5284                           plusw2	equ	0xFDB
  5285                           fsr2h	equ	0xFDA
  5286                           fsr2l	equ	0xFD9
  5287                           status	equ	0xFD8
  5288                           
  5289 ;; *************** function _clear_LCD *****************
  5290 ;; Defined at:
  5291 ;;		line 90 in file "LCD.c"
  5292 ;; Parameters:    Size  Location     Type
  5293 ;;		None
  5294 ;; Auto vars:     Size  Location     Type
  5295 ;;		None
  5296 ;; Return value:  Size  Location     Type
  5297 ;;                  1    wreg      void 
  5298 ;; Registers used:
  5299 ;;		wreg, status,2, status,0, cstack
  5300 ;; Tracked objects:
  5301 ;;		On entry : 0/0
  5302 ;;		On exit  : 0/0
  5303 ;;		Unchanged: 0/0
  5304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5305 ;;      Params:         0       0       0       0
  5306 ;;      Locals:         0       0       0       0
  5307 ;;      Temps:          1       0       0       0
  5308 ;;      Totals:         1       0       0       0
  5309 ;;Total ram usage:        1 bytes
  5310 ;; Hardware stack levels used:    1
  5311 ;; Hardware stack levels required when called:    4
  5312 ;; This function calls:
  5313 ;;		_SendLCD
  5314 ;; This function is called by:
  5315 ;;		_IR_LCD_display
  5316 ;;		_send_signal_RFID
  5317 ;; This function uses a non-reentrant model
  5318 ;;
  5319                           
  5320                           	psect	text26
  5321  001808                     __ptext26:
  5322                           	opt stack 0
  5323  001808                     _clear_LCD:
  5324                           	opt stack 25
  5325                           
  5326                           ;LCD.c: 91: SendLCD(0b00000001,0);
  5327                           
  5328                           ;incstack = 0
  5329  001808  0E00               	movlw	0
  5330  00180A  6E14               	movwf	SendLCD@type+1,c
  5331  00180C  0E00               	movlw	0
  5332  00180E  6E13               	movwf	SendLCD@type,c
  5333  001810  0E01               	movlw	1
  5334  001812  ECC5  F00B         	call	_SendLCD
  5335                           
  5336                           ;LCD.c: 92: _delay((unsigned long)((2)*(8000000/4000.0)));
  5337  001816  0E06               	movlw	6
  5338  001818  6E16               	movwf	??_clear_LCD& (0+255),c
  5339  00181A  0E30               	movlw	48
  5340  00181C                     u2687:
  5341  00181C  2EE8               	decfsz	wreg,f,c
  5342  00181E  D7FE               	goto	u2687
  5343  001820  2E16               	decfsz	??_clear_LCD& (0+255),f,c
  5344  001822  D7FC               	goto	u2687
  5345  001824  D000               	nop2	
  5346  001826  0012               	return		;funcret
  5347  001828                     __end_of_clear_LCD:
  5348                           	opt stack 0
  5349                           tblptru	equ	0xFF8
  5350                           tblptrh	equ	0xFF7
  5351                           tblptrl	equ	0xFF6
  5352                           tablat	equ	0xFF5
  5353                           prodh	equ	0xFF4
  5354                           prodl	equ	0xFF3
  5355                           intcon	equ	0xFF2
  5356                           intcon3	equ	0xFF0
  5357                           postinc0	equ	0xFEE
  5358                           wreg	equ	0xFE8
  5359                           postinc1	equ	0xFE6
  5360                           postdec1	equ	0xFE5
  5361                           fsr1h	equ	0xFE2
  5362                           fsr1l	equ	0xFE1
  5363                           indf2	equ	0xFDF
  5364                           postinc2	equ	0xFDE
  5365                           postdec2	equ	0xFDD
  5366                           plusw2	equ	0xFDB
  5367                           fsr2h	equ	0xFDA
  5368                           fsr2l	equ	0xFD9
  5369                           status	equ	0xFD8
  5370                           
  5371 ;; *************** function _SetLine *****************
  5372 ;; Defined at:
  5373 ;;		line 67 in file "LCD.c"
  5374 ;; Parameters:    Size  Location     Type
  5375 ;;  line            2   21[COMRAM] int 
  5376 ;; Auto vars:     Size  Location     Type
  5377 ;;		None
  5378 ;; Return value:  Size  Location     Type
  5379 ;;                  1    wreg      void 
  5380 ;; Registers used:
  5381 ;;		wreg, status,2, status,0, cstack
  5382 ;; Tracked objects:
  5383 ;;		On entry : 0/0
  5384 ;;		On exit  : 0/0
  5385 ;;		Unchanged: 0/0
  5386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5387 ;;      Params:         2       0       0       0
  5388 ;;      Locals:         0       0       0       0
  5389 ;;      Temps:          0       0       0       0
  5390 ;;      Totals:         2       0       0       0
  5391 ;;Total ram usage:        2 bytes
  5392 ;; Hardware stack levels used:    1
  5393 ;; Hardware stack levels required when called:    4
  5394 ;; This function calls:
  5395 ;;		_SendLCD
  5396 ;; This function is called by:
  5397 ;;		_IR_LCD_display
  5398 ;;		_send_signal_RFID
  5399 ;; This function uses a non-reentrant model
  5400 ;;
  5401                           
  5402                           	psect	text27
  5403  00171E                     __ptext27:
  5404                           	opt stack 0
  5405  00171E                     _SetLine:
  5406                           	opt stack 25
  5407                           
  5408                           ;LCD.c: 68: if (line == 1) {
  5409                           
  5410                           ;incstack = 0
  5411  00171E  0416               	decf	SetLine@line,w,c
  5412  001720  1017               	iorwf	SetLine@line+1,w,c
  5413  001722  A4D8               	btfss	status,2,c
  5414  001724  D007               	goto	l2633
  5415                           
  5416                           ;LCD.c: 70: SendLCD(0x80, 0);}
  5417  001726  0E00               	movlw	0
  5418  001728  6E14               	movwf	SendLCD@type+1,c
  5419  00172A  0E00               	movlw	0
  5420  00172C  6E13               	movwf	SendLCD@type,c
  5421  00172E  0E80               	movlw	128
  5422  001730  ECC5  F00B         	call	_SendLCD
  5423  001734                     l2633:
  5424                           
  5425                           ;LCD.c: 71: if (line == 2) {
  5426  001734  0E02               	movlw	2
  5427  001736  1816               	xorwf	SetLine@line,w,c
  5428  001738  1017               	iorwf	SetLine@line+1,w,c
  5429  00173A  A4D8               	btfss	status,2,c
  5430  00173C  D007               	goto	l2637
  5431                           
  5432                           ;LCD.c: 73: SendLCD(0xC0, 0);}
  5433  00173E  0E00               	movlw	0
  5434  001740  6E14               	movwf	SendLCD@type+1,c
  5435  001742  0E00               	movlw	0
  5436  001744  6E13               	movwf	SendLCD@type,c
  5437  001746  0EC0               	movlw	192
  5438  001748  ECC5  F00B         	call	_SendLCD
  5439  00174C                     l2637:
  5440                           
  5441                           ;LCD.c: 74: _delay((unsigned long)((50)*(8000000/4000000.0)));
  5442  00174C  0E21               	movlw	33
  5443  00174E                     u2697:
  5444  00174E  2EE8               	decfsz	wreg,f,c
  5445  001750  D7FE               	goto	u2697
  5446  001752  F000               	nop	
  5447  001754  0012               	return		;funcret
  5448  001756                     __end_of_SetLine:
  5449                           	opt stack 0
  5450                           tblptru	equ	0xFF8
  5451                           tblptrh	equ	0xFF7
  5452                           tblptrl	equ	0xFF6
  5453                           tablat	equ	0xFF5
  5454                           prodh	equ	0xFF4
  5455                           prodl	equ	0xFF3
  5456                           intcon	equ	0xFF2
  5457                           intcon3	equ	0xFF0
  5458                           postinc0	equ	0xFEE
  5459                           wreg	equ	0xFE8
  5460                           postinc1	equ	0xFE6
  5461                           postdec1	equ	0xFE5
  5462                           fsr1h	equ	0xFE2
  5463                           fsr1l	equ	0xFE1
  5464                           indf2	equ	0xFDF
  5465                           postinc2	equ	0xFDE
  5466                           postdec2	equ	0xFDD
  5467                           plusw2	equ	0xFDB
  5468                           fsr2h	equ	0xFDA
  5469                           fsr2l	equ	0xFD9
  5470                           status	equ	0xFD8
  5471                           
  5472 ;; *************** function _LCD_string *****************
  5473 ;; Defined at:
  5474 ;;		line 78 in file "LCD.c"
  5475 ;; Parameters:    Size  Location     Type
  5476 ;;  string          2   21[COMRAM] PTR unsigned char 
  5477 ;;		 -> check_sum@buf_cs(16), main@buf_l(16), main@buf_r(16), 
  5478 ;; Auto vars:     Size  Location     Type
  5479 ;;		None
  5480 ;; Return value:  Size  Location     Type
  5481 ;;                  1    wreg      void 
  5482 ;; Registers used:
  5483 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5484 ;; Tracked objects:
  5485 ;;		On entry : 0/0
  5486 ;;		On exit  : 0/0
  5487 ;;		Unchanged: 0/0
  5488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5489 ;;      Params:         2       0       0       0
  5490 ;;      Locals:         0       0       0       0
  5491 ;;      Temps:          0       0       0       0
  5492 ;;      Totals:         2       0       0       0
  5493 ;;Total ram usage:        2 bytes
  5494 ;; Hardware stack levels used:    1
  5495 ;; Hardware stack levels required when called:    4
  5496 ;; This function calls:
  5497 ;;		_SendLCD
  5498 ;; This function is called by:
  5499 ;;		_IR_LCD_display
  5500 ;;		_check_sum
  5501 ;; This function uses a non-reentrant model
  5502 ;;
  5503                           
  5504                           	psect	text28
  5505  001756                     __ptext28:
  5506                           	opt stack 0
  5507  001756                     _LCD_string:
  5508                           	opt stack 25
  5509                           
  5510                           ;LCD.c: 80: while (*string != 0x00) {
  5511                           
  5512                           ;incstack = 0
  5513  001756  D011               	goto	l2647
  5514  001758                     l2641:
  5515                           
  5516                           ;LCD.c: 83: SendLCD(*string++, 1);
  5517  001758  0E00               	movlw	0
  5518  00175A  6E14               	movwf	SendLCD@type+1,c
  5519  00175C  0E01               	movlw	1
  5520  00175E  6E13               	movwf	SendLCD@type,c
  5521  001760  C016  FFD9         	movff	LCD_string@string,fsr2l
  5522  001764  C017  FFDA         	movff	LCD_string@string+1,fsr2h
  5523  001768  50DF               	movf	indf2,w,c
  5524  00176A  ECC5  F00B         	call	_SendLCD
  5525  00176E  4A16               	infsnz	LCD_string@string,f,c
  5526  001770  2A17               	incf	LCD_string@string+1,f,c
  5527                           
  5528                           ;LCD.c: 84: _delay((unsigned long)((50)*(8000000/4000000.0)));
  5529  001772  0E21               	movlw	33
  5530  001774                     u2707:
  5531  001774  2EE8               	decfsz	wreg,f,c
  5532  001776  D7FE               	goto	u2707
  5533  001778  F000               	nop	
  5534  00177A                     l2647:
  5535  00177A  C016  FFD9         	movff	LCD_string@string,fsr2l
  5536  00177E  C017  FFDA         	movff	LCD_string@string+1,fsr2h
  5537  001782  50DF               	movf	indf2,w,c
  5538  001784  B4D8               	btfsc	status,2,c
  5539  001786  0012               	return	
  5540  001788  D7E7               	goto	l2641
  5541  00178A                     __end_of_LCD_string:
  5542                           	opt stack 0
  5543                           tblptru	equ	0xFF8
  5544                           tblptrh	equ	0xFF7
  5545                           tblptrl	equ	0xFF6
  5546                           tablat	equ	0xFF5
  5547                           prodh	equ	0xFF4
  5548                           prodl	equ	0xFF3
  5549                           intcon	equ	0xFF2
  5550                           intcon3	equ	0xFF0
  5551                           postinc0	equ	0xFEE
  5552                           wreg	equ	0xFE8
  5553                           postinc1	equ	0xFE6
  5554                           postdec1	equ	0xFE5
  5555                           fsr1h	equ	0xFE2
  5556                           fsr1l	equ	0xFE1
  5557                           indf2	equ	0xFDF
  5558                           postinc2	equ	0xFDE
  5559                           postdec2	equ	0xFDD
  5560                           plusw2	equ	0xFDB
  5561                           fsr2h	equ	0xFDA
  5562                           fsr2l	equ	0xFD9
  5563                           status	equ	0xFD8
  5564                           
  5565 ;; *************** function _SendLCD *****************
  5566 ;; Defined at:
  5567 ;;		line 21 in file "LCD.c"
  5568 ;; Parameters:    Size  Location     Type
  5569 ;;  Byte            1    wreg     unsigned char 
  5570 ;;  type            2   18[COMRAM] int 
  5571 ;; Auto vars:     Size  Location     Type
  5572 ;;  Byte            1   20[COMRAM] unsigned char 
  5573 ;; Return value:  Size  Location     Type
  5574 ;;                  1    wreg      void 
  5575 ;; Registers used:
  5576 ;;		wreg, status,2, status,0, cstack
  5577 ;; Tracked objects:
  5578 ;;		On entry : 0/0
  5579 ;;		On exit  : 0/0
  5580 ;;		Unchanged: 0/0
  5581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5582 ;;      Params:         2       0       0       0
  5583 ;;      Locals:         1       0       0       0
  5584 ;;      Temps:          0       0       0       0
  5585 ;;      Totals:         3       0       0       0
  5586 ;;Total ram usage:        3 bytes
  5587 ;; Hardware stack levels used:    1
  5588 ;; Hardware stack levels required when called:    3
  5589 ;; This function calls:
  5590 ;;		_LCDout
  5591 ;; This function is called by:
  5592 ;;		_LCD_Init
  5593 ;;		_SetLine
  5594 ;;		_LCD_string
  5595 ;;		_clear_LCD
  5596 ;;		_send_signal_RFID
  5597 ;; This function uses a non-reentrant model
  5598 ;;
  5599                           
  5600                           	psect	text29
  5601  00178A                     __ptext29:
  5602                           	opt stack 0
  5603  00178A                     _SendLCD:
  5604                           	opt stack 25
  5605                           
  5606                           ;incstack = 0
  5607                           ;SendLCD@Byte stored from wreg
  5608  00178A  6E15               	movwf	SendLCD@Byte,c
  5609                           
  5610                           ;LCD.c: 22: LATAbits.LATA6 = type;
  5611  00178C  B013               	btfsc	SendLCD@type,0,c
  5612  00178E  D002               	bra	u1795
  5613  001790  9C89               	bcf	3977,6,c	;volatile
  5614  001792  D001               	bra	u1796
  5615  001794                     u1795:
  5616  001794  8C89               	bsf	3977,6,c	;volatile
  5617  001796                     u1796:
  5618                           
  5619                           ;LCD.c: 23: LCDout(Byte >> 4);
  5620  001796  3815               	swapf	SendLCD@Byte,w,c
  5621  001798  0B0F               	andlw	15
  5622  00179A  EC70  F00B         	call	_LCDout
  5623                           
  5624                           ;LCD.c: 24: _delay((unsigned long)((10)*(8000000/4000000.0)));
  5625  00179E  0E06               	movlw	6
  5626  0017A0                     u2717:
  5627  0017A0  2EE8               	decfsz	wreg,f,c
  5628  0017A2  D7FE               	goto	u2717
  5629  0017A4  D000               	nop2		;nop
  5630                           
  5631                           ;LCD.c: 25: LCDout(Byte & 0b00001111);
  5632  0017A6  5015               	movf	SendLCD@Byte,w,c
  5633  0017A8  0B0F               	andlw	15
  5634  0017AA  EC70  F00B         	call	_LCDout
  5635                           
  5636                           ;LCD.c: 26: _delay((unsigned long)((50)*(8000000/4000000.0)));
  5637  0017AE  0E21               	movlw	33
  5638  0017B0                     u2727:
  5639  0017B0  2EE8               	decfsz	wreg,f,c
  5640  0017B2  D7FE               	goto	u2727
  5641  0017B4  F000               	nop	
  5642  0017B6  0012               	return		;funcret
  5643  0017B8                     __end_of_SendLCD:
  5644                           	opt stack 0
  5645                           tblptru	equ	0xFF8
  5646                           tblptrh	equ	0xFF7
  5647                           tblptrl	equ	0xFF6
  5648                           tablat	equ	0xFF5
  5649                           prodh	equ	0xFF4
  5650                           prodl	equ	0xFF3
  5651                           intcon	equ	0xFF2
  5652                           intcon3	equ	0xFF0
  5653                           postinc0	equ	0xFEE
  5654                           wreg	equ	0xFE8
  5655                           postinc1	equ	0xFE6
  5656                           postdec1	equ	0xFE5
  5657                           fsr1h	equ	0xFE2
  5658                           fsr1l	equ	0xFE1
  5659                           indf2	equ	0xFDF
  5660                           postinc2	equ	0xFDE
  5661                           postdec2	equ	0xFDD
  5662                           plusw2	equ	0xFDB
  5663                           fsr2h	equ	0xFDA
  5664                           fsr2l	equ	0xFD9
  5665                           status	equ	0xFD8
  5666                           
  5667 ;; *************** function _LCDout *****************
  5668 ;; Defined at:
  5669 ;;		line 11 in file "LCD.c"
  5670 ;; Parameters:    Size  Location     Type
  5671 ;;  number          1    wreg     unsigned char 
  5672 ;; Auto vars:     Size  Location     Type
  5673 ;;  number          1   17[COMRAM] unsigned char 
  5674 ;; Return value:  Size  Location     Type
  5675 ;;                  1    wreg      void 
  5676 ;; Registers used:
  5677 ;;		wreg, status,2, status,0, cstack
  5678 ;; Tracked objects:
  5679 ;;		On entry : 0/0
  5680 ;;		On exit  : 0/0
  5681 ;;		Unchanged: 0/0
  5682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5683 ;;      Params:         0       0       0       0
  5684 ;;      Locals:         1       0       0       0
  5685 ;;      Temps:          2       0       0       0
  5686 ;;      Totals:         3       0       0       0
  5687 ;;Total ram usage:        3 bytes
  5688 ;; Hardware stack levels used:    1
  5689 ;; Hardware stack levels required when called:    2
  5690 ;; This function calls:
  5691 ;;		_E_TOG
  5692 ;; This function is called by:
  5693 ;;		_SendLCD
  5694 ;;		_LCD_Init
  5695 ;; This function uses a non-reentrant model
  5696 ;;
  5697                           
  5698                           	psect	text30
  5699  0016E0                     __ptext30:
  5700                           	opt stack 0
  5701  0016E0                     _LCDout:
  5702                           	opt stack 25
  5703                           
  5704                           ;incstack = 0
  5705                           ;LCDout@number stored from wreg
  5706  0016E0  6E12               	movwf	LCDout@number,c
  5707                           
  5708                           ;LCD.c: 14: LATC = ((LATC & 0b11111001) | ((number & 0b00000011) << 1));
  5709  0016E2  C012  F010         	movff	LCDout@number,??_LCDout
  5710  0016E6  0E03               	movlw	3
  5711  0016E8  1610               	andwf	??_LCDout,f,c
  5712  0016EA  90D8               	bcf	status,0,c
  5713  0016EC  3410               	rlcf	??_LCDout,w,c
  5714  0016EE  6E11               	movwf	(??_LCDout+1)& (0+255),c
  5715  0016F0  508B               	movf	3979,w,c	;volatile
  5716  0016F2  0BF9               	andlw	249
  5717  0016F4  1011               	iorwf	??_LCDout+1,w,c
  5718  0016F6  6E8B               	movwf	3979,c	;volatile
  5719                           
  5720                           ;LCD.c: 15: LATD = ((LATD & 0b11111100) | ((number & 0b00001100) >> 2));
  5721  0016F8  C012  F010         	movff	LCDout@number,??_LCDout
  5722  0016FC  90D8               	bcf	status,0,c
  5723  0016FE  3210               	rrcf	??_LCDout,f,c
  5724  001700  90D8               	bcf	status,0,c
  5725  001702  3210               	rrcf	??_LCDout,f,c
  5726  001704  0E03               	movlw	3
  5727  001706  1610               	andwf	??_LCDout,f,c
  5728  001708  508C               	movf	3980,w,c	;volatile
  5729  00170A  0BFC               	andlw	252
  5730  00170C  1010               	iorwf	??_LCDout,w,c
  5731  00170E  6E8C               	movwf	3980,c	;volatile
  5732                           
  5733                           ;LCD.c: 16: E_TOG();
  5734  001710  EC74  F00C         	call	_E_TOG	;wreg free
  5735                           
  5736                           ;LCD.c: 17: _delay((unsigned long)((5)*(8000000/4000000.0)));
  5737  001714  0E03               	movlw	3
  5738  001716                     u2737:
  5739  001716  2EE8               	decfsz	wreg,f,c
  5740  001718  D7FE               	goto	u2737
  5741  00171A  F000               	nop	
  5742  00171C  0012               	return		;funcret
  5743  00171E                     __end_of_LCDout:
  5744                           	opt stack 0
  5745                           tblptru	equ	0xFF8
  5746                           tblptrh	equ	0xFF7
  5747                           tblptrl	equ	0xFF6
  5748                           tablat	equ	0xFF5
  5749                           prodh	equ	0xFF4
  5750                           prodl	equ	0xFF3
  5751                           intcon	equ	0xFF2
  5752                           intcon3	equ	0xFF0
  5753                           postinc0	equ	0xFEE
  5754                           wreg	equ	0xFE8
  5755                           postinc1	equ	0xFE6
  5756                           postdec1	equ	0xFE5
  5757                           fsr1h	equ	0xFE2
  5758                           fsr1l	equ	0xFE1
  5759                           indf2	equ	0xFDF
  5760                           postinc2	equ	0xFDE
  5761                           postdec2	equ	0xFDD
  5762                           plusw2	equ	0xFDB
  5763                           fsr2h	equ	0xFDA
  5764                           fsr2l	equ	0xFD9
  5765                           status	equ	0xFD8
  5766                           
  5767 ;; *************** function _E_TOG *****************
  5768 ;; Defined at:
  5769 ;;		line 4 in file "LCD.c"
  5770 ;; Parameters:    Size  Location     Type
  5771 ;;		None
  5772 ;; Auto vars:     Size  Location     Type
  5773 ;;		None
  5774 ;; Return value:  Size  Location     Type
  5775 ;;                  1    wreg      void 
  5776 ;; Registers used:
  5777 ;;		wreg
  5778 ;; Tracked objects:
  5779 ;;		On entry : 0/0
  5780 ;;		On exit  : 0/0
  5781 ;;		Unchanged: 0/0
  5782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5783 ;;      Params:         0       0       0       0
  5784 ;;      Locals:         0       0       0       0
  5785 ;;      Temps:          0       0       0       0
  5786 ;;      Totals:         0       0       0       0
  5787 ;;Total ram usage:        0 bytes
  5788 ;; Hardware stack levels used:    1
  5789 ;; Hardware stack levels required when called:    1
  5790 ;; This function calls:
  5791 ;;		Nothing
  5792 ;; This function is called by:
  5793 ;;		_LCDout
  5794 ;; This function uses a non-reentrant model
  5795 ;;
  5796                           
  5797                           	psect	text31
  5798  0018E8                     __ptext31:
  5799                           	opt stack 0
  5800  0018E8                     _E_TOG:
  5801                           	opt stack 25
  5802                           
  5803                           ;LCD.c: 5: LATCbits.LATC0 = 1;
  5804                           
  5805                           ;incstack = 0
  5806  0018E8  808B               	bsf	3979,0,c	;volatile
  5807                           
  5808                           ;LCD.c: 6: _delay((unsigned long)((5)*(8000000/4000000.0)));
  5809  0018EA  0E03               	movlw	3
  5810  0018EC                     u2747:
  5811  0018EC  2EE8               	decfsz	wreg,f,c
  5812  0018EE  D7FE               	goto	u2747
  5813  0018F0  F000               	nop	
  5814                           
  5815                           ;LCD.c: 7: LATCbits.LATC0 = 0;
  5816  0018F2  908B               	bcf	3979,0,c	;volatile
  5817  0018F4  0012               	return		;funcret
  5818  0018F6                     __end_of_E_TOG:
  5819                           	opt stack 0
  5820                           tblptru	equ	0xFF8
  5821                           tblptrh	equ	0xFF7
  5822                           tblptrl	equ	0xFF6
  5823                           tablat	equ	0xFF5
  5824                           prodh	equ	0xFF4
  5825                           prodl	equ	0xFF3
  5826                           intcon	equ	0xFF2
  5827                           intcon3	equ	0xFF0
  5828                           postinc0	equ	0xFEE
  5829                           wreg	equ	0xFE8
  5830                           postinc1	equ	0xFE6
  5831                           postdec1	equ	0xFE5
  5832                           fsr1h	equ	0xFE2
  5833                           fsr1l	equ	0xFE1
  5834                           indf2	equ	0xFDF
  5835                           postinc2	equ	0xFDE
  5836                           postdec2	equ	0xFDD
  5837                           plusw2	equ	0xFDB
  5838                           fsr2h	equ	0xFDA
  5839                           fsr2l	equ	0xFD9
  5840                           status	equ	0xFD8
  5841                           
  5842 ;; *************** function _InterruptHandlerHigh *****************
  5843 ;; Defined at:
  5844 ;;		line 28 in file "main_final_project.c"
  5845 ;; Parameters:    Size  Location     Type
  5846 ;;		None
  5847 ;; Auto vars:     Size  Location     Type
  5848 ;;  rx_char         1   14[COMRAM] unsigned char 
  5849 ;; Return value:  Size  Location     Type
  5850 ;;                  1    wreg      void 
  5851 ;; Registers used:
  5852 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5853 ;; Tracked objects:
  5854 ;;		On entry : 0/0
  5855 ;;		On exit  : 0/0
  5856 ;;		Unchanged: 0/0
  5857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5858 ;;      Params:         0       0       0       0
  5859 ;;      Locals:         1       0       0       0
  5860 ;;      Temps:         14       0       0       0
  5861 ;;      Totals:        15       0       0       0
  5862 ;;Total ram usage:       15 bytes
  5863 ;; Hardware stack levels used:    1
  5864 ;; This function calls:
  5865 ;;		Nothing
  5866 ;; This function is called by:
  5867 ;;		Interrupt level 2
  5868 ;; This function uses a non-reentrant model
  5869 ;;
  5870                           
  5871                           	psect	intcode
  5872  000008                     __pintcode:
  5873                           	opt stack 0
  5874  000008                     _InterruptHandlerHigh:
  5875                           	opt stack 25
  5876                           
  5877                           ;incstack = 0
  5878  000008  8250               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5879  00000A  CFFA F001          	movff	pclath,??_InterruptHandlerHigh
  5880  00000E  CFFB F002          	movff	pclatu,??_InterruptHandlerHigh+1
  5881  000012  CFE9 F003          	movff	fsr0l,??_InterruptHandlerHigh+2
  5882  000016  CFEA F004          	movff	fsr0h,??_InterruptHandlerHigh+3
  5883  00001A  CFE1 F005          	movff	fsr1l,??_InterruptHandlerHigh+4
  5884  00001E  CFE2 F006          	movff	fsr1h,??_InterruptHandlerHigh+5
  5885  000022  CFD9 F007          	movff	fsr2l,??_InterruptHandlerHigh+6
  5886  000026  CFDA F008          	movff	fsr2h,??_InterruptHandlerHigh+7
  5887  00002A  CFF3 F009          	movff	prodl,??_InterruptHandlerHigh+8
  5888  00002E  CFF4 F00A          	movff	prodh,??_InterruptHandlerHigh+9
  5889  000032  CFF6 F00B          	movff	tblptrl,??_InterruptHandlerHigh+10
  5890  000036  CFF7 F00C          	movff	tblptrh,??_InterruptHandlerHigh+11
  5891  00003A  CFF8 F00D          	movff	tblptru,??_InterruptHandlerHigh+12
  5892  00003E  CFF5 F00E          	movff	tablat,??_InterruptHandlerHigh+13
  5893                           
  5894                           ;main_final_project.c: 31: static char x = 0;
  5895                           ;main_final_project.c: 32: char rx_char;
  5896                           ;main_final_project.c: 34: if (PIR1bits.RCIF) {
  5897  000042  AA9E               	btfss	3998,5,c	;volatile
  5898  000044  D01A               	goto	i2l2295
  5899                           
  5900                           ;main_final_project.c: 35: rx_char = RCREG;
  5901  000046  CFAE F00F          	movff	4014,InterruptHandlerHigh@rx_char	;volatile
  5902                           
  5903                           ;main_final_project.c: 36: if (rx_char == 0x02) {
  5904  00004A  0E02               	movlw	2
  5905  00004C  180F               	xorwf	InterruptHandlerHigh@rx_char,w,c
  5906  00004E  A4D8               	btfss	status,2,c
  5907  000050  D002               	goto	i2l2287
  5908                           
  5909                           ;main_final_project.c: 37: x = 0;
  5910  000052  0E00               	movlw	0
  5911  000054  6E3E               	movwf	InterruptHandlerHigh@x,c
  5912  000056                     i2l2287:
  5913                           
  5914                           ;main_final_project.c: 38: }
  5915                           ;main_final_project.c: 39: if (rx_char == 0x03) {
  5916  000056  0E03               	movlw	3
  5917  000058  180F               	xorwf	InterruptHandlerHigh@rx_char,w,c
  5918  00005A  A4D8               	btfss	status,2,c
  5919  00005C  D003               	goto	i2l2291
  5920                           
  5921                           ;main_final_project.c: 40: card_read = 1;
  5922  00005E  0E01               	movlw	1
  5923  000060  0101               	movlb	1	; () banked
  5924  000062  6FD1               	movwf	_card_read& (0+255),b	;volatile
  5925  000064                     i2l2291:
  5926                           
  5927                           ;main_final_project.c: 41: }
  5928                           ;main_final_project.c: 42: string_rfid[x] = rx_char;
  5929  000064  503E               	movf	InterruptHandlerHigh@x,w,c
  5930  000066  0D01               	mullw	1
  5931  000068  0E3F               	movlw	low _string_rfid
  5932  00006A  24F3               	addwf	prodl,w,c
  5933  00006C  6ED9               	movwf	fsr2l,c
  5934  00006E  0E00               	movlw	high _string_rfid
  5935  000070  20F4               	addwfc	prodh,w,c
  5936  000072  6EDA               	movwf	fsr2h,c
  5937  000074  C00F  FFDF         	movff	InterruptHandlerHigh@rx_char,indf2
  5938                           
  5939                           ;main_final_project.c: 43: x++;
  5940  000078  2A3E               	incf	InterruptHandlerHigh@x,f,c
  5941  00007A                     i2l2295:
  5942                           
  5943                           ;main_final_project.c: 44: }
  5944                           ;main_final_project.c: 48: if (INTCON3bits.INT2IF) {
  5945  00007A  A2F0               	btfss	intcon3,1,c	;volatile
  5946  00007C  D00A               	goto	i2l165
  5947                           
  5948                           ;main_final_project.c: 49: if (PORTCbits.RC5 == 1) {
  5949  00007E  BA82               	btfsc	3970,5,c	;volatile
  5950                           
  5951                           ;main_final_project.c: 50: if (PORTCbits.RC5 == 1) {
  5952  000080  AA82               	btfss	3970,5,c	;volatile
  5953  000082  D006               	goto	i2l2307
  5954                           
  5955                           ;main_final_project.c: 51: if (PORTCbits.RC5 == 1) {
  5956  000084  BA82               	btfsc	3970,5,c	;volatile
  5957                           
  5958                           ;main_final_project.c: 52: if (PORTCbits.RC5 == 1) {
  5959  000086  AA82               	btfss	3970,5,c	;volatile
  5960  000088  D003               	goto	i2l2307
  5961                           
  5962                           ;main_final_project.c: 53: card_read = 0;
  5963  00008A  0E00               	movlw	0
  5964  00008C  0101               	movlb	1	; () banked
  5965  00008E  6FD1               	movwf	_card_read& (0+255),b	;volatile
  5966  000090                     i2l2307:
  5967                           
  5968                           ;main_final_project.c: 54: }
  5969                           ;main_final_project.c: 55: }
  5970                           ;main_final_project.c: 56: }
  5971                           ;main_final_project.c: 57: }
  5972                           ;main_final_project.c: 58: INTCON3bits.INT2IF = 0;
  5973  000090  92F0               	bcf	intcon3,1,c	;volatile
  5974  000092                     i2l165:
  5975  000092  C00E  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  5976  000096  C00D  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  5977  00009A  C00C  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  5978  00009E  C00B  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  5979  0000A2  C00A  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  5980  0000A6  C009  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  5981  0000AA  C008  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  5982  0000AE  C007  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  5983  0000B2  C006  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  5984  0000B6  C005  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  5985  0000BA  C004  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  5986  0000BE  C003  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  5987  0000C2  C002  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  5988  0000C6  C001  FFFA         	movff	??_InterruptHandlerHigh,pclath
  5989  0000CA  9250               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5990  0000CC  0011               	retfie		f
  5991  0000CE                     __end_of_InterruptHandlerHigh:
  5992                           	opt stack 0
  5993                           pclatu	equ	0xFFB
  5994                           pclath	equ	0xFFA
  5995                           tblptru	equ	0xFF8
  5996                           tblptrh	equ	0xFF7
  5997                           tblptrl	equ	0xFF6
  5998                           tablat	equ	0xFF5
  5999                           prodh	equ	0xFF4
  6000                           prodl	equ	0xFF3
  6001                           intcon	equ	0xFF2
  6002                           intcon3	equ	0xFF0
  6003                           postinc0	equ	0xFEE
  6004                           fsr0h	equ	0xFEA
  6005                           fsr0l	equ	0xFE9
  6006                           wreg	equ	0xFE8
  6007                           postinc1	equ	0xFE6
  6008                           postdec1	equ	0xFE5
  6009                           fsr1h	equ	0xFE2
  6010                           fsr1l	equ	0xFE1
  6011                           indf2	equ	0xFDF
  6012                           postinc2	equ	0xFDE
  6013                           postdec2	equ	0xFDD
  6014                           plusw2	equ	0xFDB
  6015                           fsr2h	equ	0xFDA
  6016                           fsr2l	equ	0xFD9
  6017                           status	equ	0xFD8
  6018                           pclatu	equ	0xFFB
  6019                           pclath	equ	0xFFA
  6020                           tblptru	equ	0xFF8
  6021                           tblptrh	equ	0xFF7
  6022                           tblptrl	equ	0xFF6
  6023                           tablat	equ	0xFF5
  6024                           prodh	equ	0xFF4
  6025                           prodl	equ	0xFF3
  6026                           intcon	equ	0xFF2
  6027                           intcon3	equ	0xFF0
  6028                           postinc0	equ	0xFEE
  6029                           fsr0h	equ	0xFEA
  6030                           fsr0l	equ	0xFE9
  6031                           wreg	equ	0xFE8
  6032                           postinc1	equ	0xFE6
  6033                           postdec1	equ	0xFE5
  6034                           fsr1h	equ	0xFE2
  6035                           fsr1l	equ	0xFE1
  6036                           indf2	equ	0xFDF
  6037                           postinc2	equ	0xFDE
  6038                           postdec2	equ	0xFDD
  6039                           plusw2	equ	0xFDB
  6040                           fsr2h	equ	0xFDA
  6041                           fsr2l	equ	0xFD9
  6042                           status	equ	0xFD8
  6043                           
  6044                           	psect	rparam
  6045  0000                     pclatu	equ	0xFFB
  6046                           pclath	equ	0xFFA
  6047                           tblptru	equ	0xFF8
  6048                           tblptrh	equ	0xFF7
  6049                           tblptrl	equ	0xFF6
  6050                           tablat	equ	0xFF5
  6051                           prodh	equ	0xFF4
  6052                           prodl	equ	0xFF3
  6053                           intcon	equ	0xFF2
  6054                           intcon3	equ	0xFF0
  6055                           postinc0	equ	0xFEE
  6056                           fsr0h	equ	0xFEA
  6057                           fsr0l	equ	0xFE9
  6058                           wreg	equ	0xFE8
  6059                           postinc1	equ	0xFE6
  6060                           postdec1	equ	0xFE5
  6061                           fsr1h	equ	0xFE2
  6062                           fsr1l	equ	0xFE1
  6063                           indf2	equ	0xFDF
  6064                           postinc2	equ	0xFDE
  6065                           postdec2	equ	0xFDD
  6066                           plusw2	equ	0xFDB
  6067                           fsr2h	equ	0xFDA
  6068                           fsr2l	equ	0xFD9
  6069                           status	equ	0xFD8
  6070                           
  6071                           	psect	temp
  6072  000050                     btemp:
  6073                           	opt stack 0
  6074  000050                     	ds	1
  6075  0000                     int$flags	set	btemp
  6076                           pclatu	equ	0xFFB
  6077                           pclath	equ	0xFFA
  6078                           tblptru	equ	0xFF8
  6079                           tblptrh	equ	0xFF7
  6080                           tblptrl	equ	0xFF6
  6081                           tablat	equ	0xFF5
  6082                           prodh	equ	0xFF4
  6083                           prodl	equ	0xFF3
  6084                           intcon	equ	0xFF2
  6085                           intcon3	equ	0xFF0
  6086                           postinc0	equ	0xFEE
  6087                           fsr0h	equ	0xFEA
  6088                           fsr0l	equ	0xFE9
  6089                           wreg	equ	0xFE8
  6090                           postinc1	equ	0xFE6
  6091                           postdec1	equ	0xFE5
  6092                           fsr1h	equ	0xFE2
  6093                           fsr1l	equ	0xFE1
  6094                           indf2	equ	0xFDF
  6095                           postinc2	equ	0xFDE
  6096                           postdec2	equ	0xFDD
  6097                           plusw2	equ	0xFDB
  6098                           fsr2h	equ	0xFDA
  6099                           fsr2l	equ	0xFD9
  6100                           status	equ	0xFD8


Data Sizes:
    Strings     56
    Constant    10
    Data        0
    BSS         19
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     61      79
    BANK0           160    160     160
    BANK1           256    209     210
    BANK2           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_4(CODE[16]), STR_3(CODE[14]), STR_2(CODE[13]), STR_1(CODE[13]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 16
		 -> check_sum@buf_cs(BANK0[16]), main@buf_l(BANK1[16]), main@buf_r(BANK1[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    check_sum@bit16	PTR int  size(2) Largest target is 12
		 -> main@bits_16(BANK1[12]), 

    check_sum@arr_check	PTR unsigned char  size(2) Largest target is 12
		 -> main@array_check(BANK1[12]), 

    check_sum@str	PTR unsigned char  size(2) Largest target is 17
		 -> string_rfid(COMRAM[17]), 

    send_signal_RFID@dis	PTR unsigned char  size(2) Largest target is 17
		 -> string_rfid(COMRAM[17]), 

    send_signal_RFID@pa	PTR unsigned char  size(2) Largest target is 17
		 -> string_rfid(COMRAM[17]), 

    store_back@back_trace_dist	PTR int  size(2) Largest target is 120
		 -> main@back_trace_distance(BANK1[120]), 

    store_back@back_trace_dir	PTR int  size(2) Largest target is 120
		 -> main@back_trace_direction(BANK0[120]), 

    backwards@m_R.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    backwards@m_R.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    backwards@m_R	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    backwards@m_L.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    backwards@m_L.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    backwards@m_L	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    forwards@m_R.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    forwards@m_R.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    forwards@m_R	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    forwards@m_L.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    forwards@m_L.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    forwards@m_L	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turnRight@m_R.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@m_R.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@m_R	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turnRight@m_L.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@m_L.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@m_L	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turnLeft@m_R.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@m_R.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@m_R	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turnLeft@m_L.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@m_L.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@m_L	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    stop@m_L.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@m_L.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@m_L	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    stop@m_R.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@m_R.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@m_R	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), main@motorL(BANK1[9]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), main@motorL(BANK1[9]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S795DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S795DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    IR_LCD_display@buf_l	PTR unsigned char  size(2) Largest target is 16
		 -> main@buf_l(BANK1[16]), 

    IR_LCD_display@ir	PTR struct IR_struct size(2) Largest target is 12
		 -> main@IR_values(BANK1[12]), 

    IR_LCD_display@buf_r	PTR unsigned char  size(2) Largest target is 16
		 -> main@buf_r(BANK1[16]), 

    LCD_string@string	PTR unsigned char  size(2) Largest target is 16
		 -> check_sum@buf_cs(BANK0[16]), main@buf_l(BANK1[16]), main@buf_r(BANK1[16]), 

    IR_signal_extract@ir	PTR struct IR_struct size(2) Largest target is 12
		 -> main@IR_values(BANK1[12]), 


Critical Paths under _main in COMRAM

    _main->_check_sum
    _turnRight->_setMotorFullSpeed
    _turnLeft->_setMotorFullSpeed
    _stop->_setMotorPWM
    _send_signal_RFID->_SetLine
    _forwards->_setMotorFullSpeed
    _check_sum->_sprintf
    _backwards->_setMotorFullSpeed
    _setMotorFullSpeed->_setMotorPWM
    _setMotorPWM->___awdiv
    _LCD_Init->_SendLCD
    _IR_signal_extract->_map_infrared
    _map_infrared->___awdiv
    ___awdiv->___wmul
    _IR_LCD_display->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _clear_LCD->_SendLCD
    _SetLine->_SendLCD
    _LCD_string->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerHigh in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_check_sum

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               343   343      0   45494
                                             56 COMRAM     5     5      0
                                             31 BANK0    129   129      0
                                              0 BANK1    209   209      0
                     _IR_LCD_display
                            _IR_init
                  _IR_signal_extract
                           _LCD_Init
                          _RFID_init
                          _TMR0_init
                          _TMR5_init
                          _backwards
                          _check_sum
                           _forwards
                            _initPWM
                   _send_signal_RFID
                               _stop
                         _store_back
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _turnRight                                            5     0      5    4127
                                             40 COMRAM     5     0      5
                  _setMotorFullSpeed
 ---------------------------------------------------------------------------------
 (1) _turnLeft                                             5     0      5    4358
                                             40 COMRAM     5     0      5
                  _setMotorFullSpeed
 ---------------------------------------------------------------------------------
 (1) _store_back                                           9     2      7    1698
                                             15 COMRAM     9     2      7
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    3387
                                             36 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _send_signal_RFID                                    10     6      4    3429
                                             23 COMRAM    10     6      4
                            _SendLCD
                            _SetLine
                          _clear_LCD
 ---------------------------------------------------------------------------------
 (1) _initPWM                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _forwards                                             5     0      5    4127
                                             40 COMRAM     5     0      5
                  _setMotorFullSpeed
 ---------------------------------------------------------------------------------
 (1) _check_sum                                           39    31      8    5931
                                             48 COMRAM     8     0      8
                                              0 BANK0     31    31      0
                         _LCD_string
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _backwards                                            5     0      5    4127
                                             40 COMRAM     5     0      5
                  _setMotorFullSpeed
 ---------------------------------------------------------------------------------
 (2) _setMotorFullSpeed                                    4     1      3    3479
                                             36 COMRAM     4     1      3
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          7     5      2    2123
                                             29 COMRAM     7     5      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _TMR5_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RFID_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             1     1      0     987
                                             21 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _IR_signal_extract                                    6     4      2    1719
                                             33 COMRAM     6     4      2
                       _map_infrared
 ---------------------------------------------------------------------------------
 (2) _map_infrared                                         4     2      2    1084
                                             29 COMRAM     4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     831
                                             21 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _IR_init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _IR_LCD_display                                       7     1      6    7373
                                             48 COMRAM     7     1      6
                         _LCD_string
                            _SetLine
                          _clear_LCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             30    22      8    3438
                                             27 COMRAM    21    13      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             15 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     618
                                             15 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     386
                                             22 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     395
                                             15 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _clear_LCD                                            1     1      0     925
                                             21 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SetLine                                              2     0      2    1295
                                             21 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _LCD_string                                           2     0      2    1298
                                             21 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (3) _SendLCD                                              3     1      2     925
                                             18 COMRAM     3     1      2
                             _LCDout
 ---------------------------------------------------------------------------------
 (4) _LCDout                                               3     3      0      62
                                             15 COMRAM     3     3      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (5) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerHigh                                15    15      0      67
                                              0 COMRAM    15    15      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _IR_LCD_display
     _LCD_string
       _SendLCD
         _LCDout
           _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _clear_LCD
       _SendLCD
         _LCDout
           _E_TOG
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _IR_init
   _IR_signal_extract
     _map_infrared
       ___awdiv
         ___wmul (ARG)
   _LCD_Init
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _RFID_init
   _TMR0_init
   _TMR5_init
   _backwards
     _setMotorFullSpeed
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _check_sum
     _LCD_string
       _SendLCD
         _LCDout
           _E_TOG
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _forwards
     _setMotorFullSpeed
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _initPWM
   _send_signal_RFID
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _clear_LCD
       _SendLCD
         _LCDout
           _E_TOG
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _store_back
   _turnLeft
     _setMotorFullSpeed
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _turnRight
     _setMotorFullSpeed
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul

 _InterruptHandlerHigh (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     D1      D2       7       82.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     A0      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3D      4F       1       84.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1C1       3        0.0%
DATA                 0      0     1C1      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Mon Dec 11 13:54:32 2017

   __size_of_IR_signal_extract 019A         __end_of_IR_LCD_display 1342                   ___awdiv@sign 001B  
          ___wmul@multiplicand 0012         main@back_trace_counter 01B1                            l168 0348  
                          l778 154E                            l788 1698                            prod 000FF3  
                          wreg 000FE8        main@back_trace_distance 0100                    ?_LCD_string 0016  
            _setMotorFullSpeed 17B8                    main@bits_16 01A4                   __CFG_LVP$OFF 000000  
           ?_setMotorFullSpeed 0025                           l3001 0CD0                           l3015 0E58  
                         l3009 0D64                           l3121 063C                           l3113 05B6  
                         l3125 0658                           l3109 059C                           l3135 06EE  
                         l2521 1410                           l2513 13F2                           l3145 0772  
                         l2611 167A                           l2531 1430                           l2523 1414  
                         l2507 13E2                           l3147 078A                           l3139 070A  
                         l3181 08D2                           l3173 0860                           l3165 0846  
                         l3149 0790                           l3085 0468                           l2615 168E  
                         l2607 166E                           l2519 1408                           l2535 143A  
                         l3167 0850                           l2641 1758                           l2633 1734  
                         l2609 1676                           l2721 0B28                           l2625 16D6  
                         l2801 0F6C                           l3185 0916                           l3177 0898  
                         l3089 0488                           l2715 0AFC                           l2539 1448  
                         l2555 1096                           l3187 092E                           l3195 098A  
                         l3099 0502                           l2637 174C                           l2709 0AE2  
                         l2661 09C6                           l2805 0FB2                           l2557 10DC  
                         l2647 177A                           l2591 1528                           l2751 0BAA  
                         l2719 0B20                           l2663 09D4                           l2655 09AC  
                         l2807 0FC6                           l2567 1174                           l2577 1898  
                         l2753 0BB0                           l2745 0B8E                           l2729 0B48  
                         l2737 0B68                           l2673 0A08                           l2761 0C0A  
                         l2921 1482                           l2913 1454                           l2587 151C  
                         l2739 0B70                           l2763 0C22                           l2683 0A64  
                         l2667 09DA                           l2589 1524                           l2685 0A8A  
                         l2773 17D0                           l2941 14FC                           l2599 1544  
                         l2759 0C02                           l2695 0AB2                           l2927 14A0  
                         l2919 1472                           l2697 0AB6                           l2769 17BA  
                         l2961 1358                           l2963 136A                           l2799 0F58  
                         l2983 0C80                           l2975 0C3C                           l2959 1354  
                         l2985 0C88                           l2993 0CAA                           l2969 1390  
                         l2995 0CC0                           l2979 0C7A                           l2997 0CC6  
                         l2989 0CA4                           STR_1 0336                           STR_2 0329  
                         STR_3 031B                           STR_4 030B                           _LATA 000F89  
                         _LATB 000F8A                           _LATC 000F8B                           _LATD 000F8C  
                         u2330 04F8                           u2255 0C54                           u2380 066E  
                         u2517 1462                           u2390 0684                           u2607 122A  
                         u2527 1490                           u1920 16CE                           u1824 1168  
                         u2480 08FC                           u2617 1244                           u1825 1164  
                         u2537 1386                           u1834 1190                           u2707 1774  
                         u2627 125E                           u2547 11BC                           u1835 118C  
                         u2717 17A0                           u2637 1274                           u2557 11D2  
                         u2727 17B0                           u2647 130E                           u2567 11E2  
                         u2737 1716                           u2657 131C                           u2577 11F0  
                         u2747 18EC                           u1795 1794                           u2667 132A  
                         u2587 11FE                           u1796 1796                           u2677 1338  
                         u2597 1214                           u2687 181C                           u2697 174E  
                         _main 0344                           fsr0h 000FEA                           fsr1h 000FE2  
                         fsr0l 000FE9                           fsr2h 000FDA                           fsr1l 000FE1  
                         indf2 000FDF                           fsr2l 000FD9       main@back_trace_direction 007F  
                         btemp 0050                __end_of_IR_init 1882                           _stop 1452  
                         pclat 000FFA            ??_setMotorFullSpeed 0028                           prodh 000FF4  
                         prodl 000FF3                           start 00CE                   ___param_bank 000010  
              ?_IR_LCD_display 0031                    _string_rfid 003F                __end_of_SendLCD 17B8  
              __end_of_SetLine 1756               __end_of_LCD_Init 127C             __size_of_RFID_init 001A  
                        ?_main 0001                __end_of___awdiv 1452                          ?_stop 0025  
              ___awdiv@divisor 0018                          _PDC0H 000F78                          _PDC1H 000F76  
                        _PDC0L 000F79                          _PDC1L 000F77                __end_of___lwdiv 1558  
              __end_of___lwmod 16A2                          i2l165 0092                ___awdiv@counter 001A  
                        _RCREG 000FAE      __end_of_setMotorFullSpeed 17E2                          _E_TOG 18E8  
                        _TMR0H 000FD7                          _TMR0L 000FD6                          _SPBRG 000FAF  
                        _TRISB 000F93                          _TRISC 000F94                  ?_map_infrared 001E  
       main@speed_motor_medium 00FA                __end_of_initPWM 1864                __end_of_dpowers 030B  
           __size_of_TMR0_init 001C                __end_of_isdigit 18A0             __size_of_TMR5_init 0012  
                        tablat 000FF5                          plusw2 000FDB                          status 000FD8  
              __end_of_sprintf 0C30                 __CFG_MCLRE$OFF 000000                __initialization 1828  
          __size_of_LCD_string 0034                   __end_of_main 09A2                   __end_of_stop 14B0  
               __CFG_OSC$IRCIO 000000                         ??_main 0039                         ??_stop 0029  
                __activetblptr 000002                         ?_E_TOG 0001                 ??_map_infrared 0020  
             _send_signal_RFID 1342                  main@direction 01B0                   ?_setMotorPWM 001E  
                    ??_IR_init 0010               ___awdiv@dividend 0016                         _ANSEL0 000FB8  
                       _ANSEL1 000FB9                         i2l2307 0090                         i2l2291 0064  
               __CFG_WDTEN$OFF 000000                         i2l2287 0056                         i2l2295 007A  
                       _LCDout 16E0                    SendLCD@Byte 0015                         _OSCCON 000FD3  
                       _PTCON0 000F7F                         _PTCON1 000F7E                         _SPBRGH 000FB0  
                       _PTPERH 000F7A                         _PTPERL 000F7B              __end_of_RFID_init 18D6  
        InterruptHandlerHigh@x 003E                    SendLCD@type 0013                      ??_SendLCD 0015  
                    ??_SetLine 0018                         ___wmul 17E2                      ??___awdiv 001A  
            __end_of_TMR0_init 18BC                      ??___lwdiv 0014                      ??___lwmod 001B  
            __end_of_TMR5_init 18E8                         clear_0 1832               __end_of_forwards 161E  
             ___awdiv@quotient 001C                      ??_initPWM 0010     __size_of_setMotorFullSpeed 002A  
                    ??_isdigit 0010                  main@threshold 00FD                   __mediumconst 0000  
                  forwards@m_L 0029                    forwards@m_R 002B                         tblptrh 000FF7  
                       tblptrl 000FF6                         tblptru 000FF8                      ??_sprintf 0024  
             __end_of_turnLeft 15DC                     __accesstop 0060        __end_of__initialization 1838  
                    ?_LCD_Init 0001             check_sum@arr_check 0033                  ___rparam_used 000001  
                  SetLine@line 0016                  __end_of_E_TOG 18F6             __size_of_backwards 0042  
               __pcstackCOMRAM 0001             __size_of_check_sum 0252             __size_of_clear_LCD 0020  
              check_sum@buf_cs 006A                        ??_E_TOG 0010  __size_of_InterruptHandlerHigh 00C6  
                 ??_LCD_string 0018                 main@difference 00FB                   sprintf@width 002E  
                   __pbssBANK1 01D1               LCD_string@string 0016                        ?_LCDout 0001  
                   ??_LCD_Init 0016               ??_IR_LCD_display 0037           __end_of_map_infrared 16E0  
                      ?___wmul 0010             __end_of_LCD_string 178A             check_sum@xor_value 007A  
            __end_of_backwards 1660                        _PWMCON0 000F6F                        _PWMCON1 000F6E  
                      _IR_init 1864              __end_of_check_sum 0E82           __size_of_setMotorPWM 0182  
            __end_of_clear_LCD 1828                __size_of_LCDout 003E                      ?_forwards 0029  
          main@speed_motor_low 00FF             __size_of_turnRight 0042                        _SendLCD 178A  
     __end_of_send_signal_RFID 13CE                        __Hparam 0000                        _SetLine 171E  
                      __Lparam 0000         setMotorFullSpeed@max_p 0027                        ___awdiv 13CE  
              __size_of___wmul 0026                        ___lwdiv 1506                        ___lwmod 1660  
                 __psmallconst 0300                     check_sum@i 007C                     check_sum@j 007E  
                      __pcinit 1828                        __ramtop 0300                      ?_turnLeft 0029  
                      __ptext0 0344                        __ptext1 1558                        __ptext2 159A  
                      __ptext3 14B0                        __ptext4 1452                        __ptext5 1342  
                      __ptext6 1846                        __ptext7 15DC                        __ptext8 0C30  
                      __ptext9 161E                      _T0CONbits 000FD5                        _initPWM 1846  
                      _dpowers 0301                        _isdigit 1882                   LCDout@number 0012  
                    _T5CONbits 000FB7                   backwards@m_L 0029                   backwards@m_R 002B  
                      _sprintf 09A2           end_of_initialization 1838             setMotorPWM@PWMduty 0023  
                __Lmediumconst 0000                     ??_forwards 002E                   turnRight@m_L 0029  
                 turnRight@m_R 002B                      _RFID_init 18BC                      _RCSTAbits 000FAB  
                      postdec1 000FE5                        postdec2 000FDD                        postinc0 000FEE  
                      postinc1 000FE6                        postinc2 000FDE                        stop@m_L 0025  
                      stop@m_R 0027         map_infrared@map_signal 0020                     ??_turnLeft 002E  
                    _PORTCbits 000F82                      _TMR0_init 18A0                      _TMR5_init 18D6  
            __end_of_turnRight 159A                      _TRISAbits 000F92                      _TRISCbits 000F94  
                    _TRISDbits 000F95                    _CAP1CONbits 000F63                    _CAP2CONbits 000F62  
        __size_of_map_infrared 003E                 __end_of_LCDout 171E                      _TXSTAbits 000FAC  
                   main@motorL 01BF                     main@motorR 01C8              __size_of_LCD_Init 00DE  
                   ?_RFID_init 0001                     _store_back 14B0                 __end_of___wmul 1808  
                  _BAUDCONbits 000FAA                     ?_TMR0_init 0001                     ?_TMR5_init 0001  
          start_initialization 1828                   _map_infrared 16A2                       ??_LCDout 0010  
 __end_of_InterruptHandlerHigh 00CE                       ??___wmul 0014                    __pbssCOMRAM 003E  
     store_back@back_trace_dir 0010                  __pcstackBANK0 0060                  __pcstackBANK1 0100  
               check_sum@bit16 0035                   _isdigit$1717 0011                       ?_IR_init 0001  
                    _backwards 161E                    sprintf@flag 002D                    sprintf@prec 002A  
                    _card_read 01D1                      _check_sum 0C30                   check_sum@btc 0037  
                     ?_SendLCD 0013                   check_sum@str 0031                      _clear_LCD 1808  
                     ?_SetLine 0016              __size_of_forwards 0042               ___lwdiv@dividend 0010  
                  ??_RFID_init 0010              ?_send_signal_RFID 0018                    ?_store_back 0010  
                    __pintcode 0008             ??_send_signal_RFID 001C                       ?___awdiv 0016  
              main@array_check 0178                       ?___lwdiv 0010                       ?___lwmod 0017  
                  ??_TMR0_init 0010                       _CAP1BUFH 000F69                       _CAP1BUFL 000F68  
                     _CAP2BUFH 000F67                       _CAP2BUFL 000F66                    ??_TMR5_init 0010  
                     ?_initPWM 0001                    __smallconst 0300                 __size_of_E_TOG 000E  
                     ?_isdigit 0001              __size_of_turnLeft 0042                  ??_setMotorPWM 0020  
             ___lwdiv@quotient 0015                       ?_sprintf 001C                     ?_backwards 0029  
                  turnLeft@m_L 0029                    turnLeft@m_R 002B                       _LCD_Init 119E  
               ___wmul@product 0014                       _LATAbits 000F89                       _LATCbits 000F8B  
                   ?_check_sum 0031                       _PIE1bits 000F9D                     ?_clear_LCD 0001  
                     _PIR1bits 000F9E               IR_LCD_display@ir 0035                 backwards@speed 002D  
        map_infrared@ir_signal 001E        __size_of_IR_LCD_display 00C6              ___wmul@multiplier 0010  
                 setMotorPWM@m 001E                      main@buf_l 0194                      main@buf_r 0184  
         _InterruptHandlerHigh 0008            __size_of_store_back 0056                      _turnRight 1558  
         main@speed_motor_high 00F7                    _INTCON3bits 000FF0             setMotorFullSpeed@m 0025  
             __size_of_IR_init 001E                  store_back@btc 0015                  store_back@dir 0014  
          __end_of_setMotorPWM 119E            IR_signal_extract@ir 0022                       __Hrparam 0000  
             __size_of_SendLCD 002E                       __Lrparam 0000               __size_of_SetLine 0038  
             __size_of___awdiv 0084              _IR_signal_extract 0E82               __size_of___lwdiv 0052  
             __size_of___lwmod 0042             ?_IR_signal_extract 0022          ?_InterruptHandlerHigh 0001  
                   sprintf@val 002B               __size_of_initPWM 001E               __size_of_isdigit 001E  
              ___lwdiv@divisor 0012                ___lwdiv@counter 0014                     ?_turnRight 0029  
                     __ptext10 17B8                       __ptext11 101C                       __ptext20 127C  
                     __ptext12 18D6                       __ptext21 09A2                       __ptext13 18A0  
                     __ptext30 16E0                       __ptext22 1882                       __ptext14 18BC  
                     __ptext31 18E8                       __ptext23 17E2                       __ptext15 119E  
          ??_IR_signal_extract 0024                       __ptext24 1660                       __ptext16 0E82  
                     __ptext25 1506                       __ptext17 16A2                       __ptext26 1808  
                     __ptext18 13CE                       __ptext27 171E                       __ptext19 1864  
                     __ptext28 1756                       __ptext29 178A                    ??_backwards 002E  
             __size_of_sprintf 028E      store_back@back_trace_dist 0012                 turnRight@speed 002D  
                __size_of_main 065E                  turnLeft@speed 002D                       _forwards 15DC  
                __size_of_stop 005E                    ??_check_sum 0060            send_signal_RFID@dis 001A  
                  ??_clear_LCD 0016      __end_of_IR_signal_extract 101C                       int$flags 0050  
          IR_LCD_display@buf_l 0033            IR_LCD_display@buf_r 0031                       _turnLeft 159A  
                   _INTCONbits 000FF2                     _LCD_string 1756                       isdigit@c 0012  
                  _setMotorPWM 101C                       intlevel2 0000                      sprintf@ap 0028  
                    sprintf@sp 001C               ___lwmod@dividend 0017    InterruptHandlerHigh@rx_char 000F  
           send_signal_RFID@pa 0018                     _OSCCONbits 000FD3                   ??_store_back 0017  
                forwards@speed 002D                 _IR_LCD_display 127C         ??_InterruptHandlerHigh 0001  
                     sprintf@c 0030                       sprintf@f 001E                ___lwmod@divisor 0019  
    __size_of_send_signal_RFID 008C                ___lwmod@counter 001B                    ??_turnRight 002E  
           __end_of_store_back 1506                  main@IR_values 01B3                   main@PWMcycle 00F8  
